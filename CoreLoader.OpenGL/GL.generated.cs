//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreLoader.OpenGL
{
    using System;
    using System.Runtime.CompilerServices;
    using static CoreLoader.OpenGL.GlNative;
    
    
    public unsafe partial class GL
    {
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ActiveShaderProgram(uint pipeline, uint program)
        {
            GlNative.ActiveShaderProgram(pipeline, program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void AttachShader(uint program, uint shader)
        {
            GlNative.AttachShader(program, shader);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BeginConditionalRender(uint id, uint mode)
        {
            GlNative.BeginConditionalRender(id, mode);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EndConditionalRender()
        {
            GlNative.EndConditionalRender();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BeginQuery(BeginQueryTarget target, uint id)
        {
            GlNative.BeginQuery(((uint)(target)), id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EndQuery(EndQueryTarget target)
        {
            GlNative.EndQuery(((uint)(target)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BeginQueryIndexed(BeginQueryIndexedTarget target, uint index, uint id)
        {
            GlNative.BeginQueryIndexed(((uint)(target)), index, id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EndQueryIndexed(EndQueryIndexedTarget target, uint index)
        {
            GlNative.EndQueryIndexed(((uint)(target)), index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BeginTransformFeedback(uint primitiveMode)
        {
            GlNative.BeginTransformFeedback(primitiveMode);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EndTransformFeedback()
        {
            GlNative.EndTransformFeedback();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindAttribLocation(uint program, uint index, string name)
        {
            GlNative.BindAttribLocation(program, index, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindBuffer(uint target, uint buffer)
        {
            GlNative.BindBuffer(target, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindBufferBase(BindBufferBaseTarget target, uint index, uint buffer)
        {
            GlNative.BindBufferBase(((uint)(target)), index, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindBufferRange(BindBufferRangeTarget target, uint index, uint buffer, long offset, long size)
        {
            GlNative.BindBufferRange(((uint)(target)), index, buffer, offset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindBuffersBase(BindBuffersBaseTarget target, uint first, int count, uint* buffers)
        {
            GlNative.BindBuffersBase(((uint)(target)), first, count, buffers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindBuffersRange(BindBuffersRangeTarget target, uint first, int count, uint* buffers, long* offsets, long* sizes)
        {
            GlNative.BindBuffersRange(((uint)(target)), first, count, buffers, offsets, sizes);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindFragDataLocation(uint program, uint colorNumber, string name)
        {
            GlNative.BindFragDataLocation(program, colorNumber, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
        {
            GlNative.BindFragDataLocationIndexed(program, colorNumber, index, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindFramebuffer(uint target, uint framebuffer)
        {
            GlNative.BindFramebuffer(target, framebuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format)
        {
            GlNative.BindImageTexture(unit, texture, level, layered, layer, access, format);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindImageTextures(uint first, int count, uint* textures)
        {
            GlNative.BindImageTextures(first, count, textures);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindProgramPipeline(uint pipeline)
        {
            GlNative.BindProgramPipeline(pipeline);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindRenderbuffer(BindRenderbufferTarget target, uint renderbuffer)
        {
            GlNative.BindRenderbuffer(((uint)(target)), renderbuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindSampler(uint unit, uint sampler)
        {
            GlNative.BindSampler(unit, sampler);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindSamplers(uint first, int count, uint* samplers)
        {
            GlNative.BindSamplers(first, count, samplers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindTexture(BindTextureTarget target, uint texture)
        {
            GlNative.BindTexture(((uint)(target)), texture);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindTextures(uint first, int count, uint* textures)
        {
            GlNative.BindTextures(first, count, textures);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindTextureUnit(uint unit, uint texture)
        {
            GlNative.BindTextureUnit(unit, texture);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindTransformFeedback(BindTransformFeedbackTarget target, uint id)
        {
            GlNative.BindTransformFeedback(((uint)(target)), id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindVertexArray(uint array)
        {
            GlNative.BindVertexArray(array);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindVertexBuffer(uint bindingindex, uint buffer, long offset, int stride)
        {
            GlNative.BindVertexBuffer(bindingindex, buffer, offset, stride);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, long offset, int stride)
        {
            GlNative.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BindVertexBuffers(uint first, int count, uint* buffers, long* offsets, int* strides)
        {
            GlNative.BindVertexBuffers(first, count, buffers, offsets, strides);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, long* offsets, int* strides)
        {
            GlNative.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendColor(float red, float green, float blue, float alpha)
        {
            GlNative.BlendColor(red, green, blue, alpha);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendEquation(BlendEquationMode mode)
        {
            GlNative.BlendEquation(((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendEquationi(uint buf, BlendEquationiMode mode)
        {
            GlNative.BlendEquationi(buf, ((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendEquationSeparate(BlendEquationSeparateModeRGB modeRGB, BlendEquationSeparateModeAlpha modeAlpha)
        {
            GlNative.BlendEquationSeparate(((uint)(modeRGB)), ((uint)(modeAlpha)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendEquationSeparatei(uint buf, BlendEquationSeparateiModeRGB modeRGB, BlendEquationSeparateiModeAlpha modeAlpha)
        {
            GlNative.BlendEquationSeparatei(buf, ((uint)(modeRGB)), ((uint)(modeAlpha)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendFuncSeparate(BlendFuncSeparateSrcRGB srcRGB, BlendFuncSeparateDstRGB dstRGB, BlendFuncSeparateSrcAlpha srcAlpha, BlendFuncSeparateDstAlpha dstAlpha)
        {
            GlNative.BlendFuncSeparate(((uint)(srcRGB)), ((uint)(dstRGB)), ((uint)(srcAlpha)), ((uint)(dstAlpha)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlendFuncSeparatei(uint buf, BlendFuncSeparateiSrcRGB srcRGB, BlendFuncSeparateiDstRGB dstRGB, BlendFuncSeparateiSrcAlpha srcAlpha, BlendFuncSeparateiDstAlpha dstAlpha)
        {
            GlNative.BlendFuncSeparatei(buf, ((uint)(srcRGB)), ((uint)(dstRGB)), ((uint)(srcAlpha)), ((uint)(dstAlpha)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, BlitFramebufferMask mask, BlitFramebufferFilter filter)
        {
            GlNative.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, ((uint)(mask)), ((uint)(filter)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, BlitNamedFramebufferMask mask, BlitNamedFramebufferFilter filter)
        {
            GlNative.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, ((uint)(mask)), ((uint)(filter)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BufferStorage(uint target, long size, void* data, BufferStorageFlags flags)
        {
            GlNative.BufferStorage(target, size, data, ((uint)(flags)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedBufferStorage(uint buffer, long size, void* data, NamedBufferStorageFlags flags)
        {
            GlNative.NamedBufferStorage(buffer, size, data, ((uint)(flags)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void BufferSubData(uint target, long offset, long size, void* data)
        {
            GlNative.BufferSubData(target, offset, size, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedBufferSubData(uint buffer, long offset, long size, void* data)
        {
            GlNative.NamedBufferSubData(buffer, offset, size, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint CheckFramebufferStatus(uint target)
        {
            return GlNative.CheckFramebufferStatus(target);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint CheckNamedFramebufferStatus(uint framebuffer, uint target)
        {
            return GlNative.CheckNamedFramebufferStatus(framebuffer, target);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClampColor(ClampColorTarget target, ClampColorClamp clamp)
        {
            GlNative.ClampColor(((uint)(target)), ((uint)(clamp)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Clear(ClearMask mask)
        {
            GlNative.Clear(((uint)(mask)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferiv(uint buffer, int drawbuffer, int* value)
        {
            GlNative.ClearBufferiv(buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferuiv(uint buffer, int drawbuffer, uint* value)
        {
            GlNative.ClearBufferuiv(buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferfv(uint buffer, int drawbuffer, float* value)
        {
            GlNative.ClearBufferfv(buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil)
        {
            GlNative.ClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, int* value)
        {
            GlNative.ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, uint* value)
        {
            GlNative.ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, float* value)
        {
            GlNative.ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil)
        {
            GlNative.ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferData(uint target, uint internalformat, uint format, uint type, void* data)
        {
            GlNative.ClearBufferData(target, internalformat, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, void* data)
        {
            GlNative.ClearNamedBufferData(buffer, internalformat, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearBufferSubData(uint target, uint internalformat, long offset, long size, uint format, uint type, void* data)
        {
            GlNative.ClearBufferSubData(target, internalformat, offset, size, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearNamedBufferSubData(uint buffer, uint internalformat, long offset, long size, uint format, uint type, void* data)
        {
            GlNative.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearColor(float red, float green, float blue, float alpha)
        {
            GlNative.ClearColor(red, green, blue, alpha);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearDepth(double depth)
        {
            GlNative.ClearDepth(depth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearDepthf(float depth)
        {
            GlNative.ClearDepthf(depth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearStencil(int s)
        {
            GlNative.ClearStencil(s);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearTexImage(uint texture, int level, uint format, uint type, void* data)
        {
            GlNative.ClearTexImage(texture, level, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data)
        {
            GlNative.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint ClientWaitSync(System.IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
        {
            return GlNative.ClientWaitSync(sync, ((uint)(flags)), timeout);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ClipControl(ClipControlOrigin origin, ClipControlDepth depth)
        {
            GlNative.ClipControl(((uint)(origin)), ((uint)(depth)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            GlNative.ColorMask(red, green, blue, alpha);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ColorMaski(uint buf, bool red, bool green, bool blue, bool alpha)
        {
            GlNative.ColorMaski(buf, red, green, blue, alpha);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompileShader(uint shader)
        {
            GlNative.CompileShader(shader);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexImage1D(CompressedTexImage1DTarget target, int level, uint internalformat, int width, int border, int imageSize, void* data)
        {
            GlNative.CompressedTexImage1D(((uint)(target)), level, internalformat, width, border, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexImage2D(CompressedTexImage2DTarget target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
        {
            GlNative.CompressedTexImage2D(((uint)(target)), level, internalformat, width, height, border, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexImage3D(CompressedTexImage3DTarget target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            GlNative.CompressedTexImage3D(((uint)(target)), level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexSubImage1D(CompressedTexSubImage1DTarget target, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTexSubImage1D(((uint)(target)), level, xoffset, width, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexSubImage2D(CompressedTexSubImage2DTarget target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTexSubImage2D(((uint)(target)), level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTexSubImage3D(CompressedTexSubImage3DTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTexSubImage3D(((uint)(target)), level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            GlNative.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyBufferSubData(uint readTarget, uint writeTarget, long readOffset, long writeOffset, long size)
        {
            GlNative.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size)
        {
            GlNative.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            GlNative.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTexImage1D(CopyTexImage1DTarget target, int level, CopyTexImage1DInternalformat internalformat, int x, int y, int width, int border)
        {
            GlNative.CopyTexImage1D(((uint)(target)), level, ((uint)(internalformat)), x, y, width, border);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTexImage2D(CopyTexImage2DTarget target, int level, CopyTexImage2DInternalformat internalformat, int x, int y, int width, int height, int border)
        {
            GlNative.CopyTexImage2D(((uint)(target)), level, ((uint)(internalformat)), x, y, width, height, border);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTexSubImage1D(CopyTexSubImage1DTarget target, int level, int xoffset, int x, int y, int width)
        {
            GlNative.CopyTexSubImage1D(((uint)(target)), level, xoffset, x, y, width);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
        {
            GlNative.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTexSubImage2D(CopyTexSubImage2DTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            GlNative.CopyTexSubImage2D(((uint)(target)), level, xoffset, yoffset, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            GlNative.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTexSubImage3D(CopyTexSubImage3DTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            GlNative.CopyTexSubImage3D(((uint)(target)), level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            GlNative.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint CreateProgram()
        {
            return GlNative.CreateProgram();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CreateProgramPipelines(int n, uint* pipelines)
        {
            GlNative.CreateProgramPipelines(n, pipelines);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CreateQueries(uint target, int n, uint* ids)
        {
            GlNative.CreateQueries(target, n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CreateSamplers(int n, uint* samplers)
        {
            GlNative.CreateSamplers(n, samplers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint CreateShader(CreateShaderShaderType shaderType)
        {
            return GlNative.CreateShader(((uint)(shaderType)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint CreateShaderProgramv(uint type, int count, string[] strings)
        {
            return GlNative.CreateShaderProgramv(type, count, strings);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CreateTransformFeedbacks(int n, uint* ids)
        {
            GlNative.CreateTransformFeedbacks(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void CullFace(CullFaceMode mode)
        {
            GlNative.CullFace(((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DebugMessageCallback(DebugProc callback, void* userParam)
        {
            GlNative.DebugMessageCallback(callback, userParam);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DebugMessageControl(uint source, uint type, uint severity, int count, uint* ids, bool enabled)
        {
            GlNative.DebugMessageControl(source, type, severity, count, ids, enabled);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DebugMessageInsert(uint source, uint type, uint id, uint severity, int length, string message)
        {
            GlNative.DebugMessageInsert(source, type, id, severity, length, message);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteProgram(uint program)
        {
            GlNative.DeleteProgram(program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteProgramPipelines(int n, uint* pipelines)
        {
            GlNative.DeleteProgramPipelines(n, pipelines);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteQueries(int n, uint* ids)
        {
            GlNative.DeleteQueries(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteSamplers(int n, uint* samplers)
        {
            GlNative.DeleteSamplers(n, samplers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteShader(uint shader)
        {
            GlNative.DeleteShader(shader);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteSync(System.IntPtr sync)
        {
            GlNative.DeleteSync(sync);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DeleteTransformFeedbacks(int n, uint* ids)
        {
            GlNative.DeleteTransformFeedbacks(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthFunc(DepthFuncFunc func)
        {
            GlNative.DepthFunc(((uint)(func)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthMask(bool flag)
        {
            GlNative.DepthMask(flag);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthRange(double nearVal, double farVal)
        {
            GlNative.DepthRange(nearVal, farVal);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthRangef(float nearVal, float farVal)
        {
            GlNative.DepthRangef(nearVal, farVal);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthRangeArrayv(uint first, int count, double* v)
        {
            GlNative.DepthRangeArrayv(first, count, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DepthRangeIndexed(uint index, double nearVal, double farVal)
        {
            GlNative.DepthRangeIndexed(index, nearVal, farVal);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DetachShader(uint program, uint shader)
        {
            GlNative.DetachShader(program, shader);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            GlNative.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DispatchComputeIndirect(long indirect)
        {
            GlNative.DispatchComputeIndirect(indirect);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawArrays(DrawArraysMode mode, int first, int count)
        {
            GlNative.DrawArrays(((uint)(mode)), first, count);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawArraysIndirect(DrawArraysIndirectMode mode, void* indirect)
        {
            GlNative.DrawArraysIndirect(((uint)(mode)), indirect);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawArraysInstanced(DrawArraysInstancedMode mode, int first, int count, int instancecount)
        {
            GlNative.DrawArraysInstanced(((uint)(mode)), first, count, instancecount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawArraysInstancedBaseInstance(DrawArraysInstancedBaseInstanceMode mode, int first, int count, int instancecount, uint baseinstance)
        {
            GlNative.DrawArraysInstancedBaseInstance(((uint)(mode)), first, count, instancecount, baseinstance);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawBuffer(DrawBufferBuf buf)
        {
            GlNative.DrawBuffer(((uint)(buf)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferDrawBuffer(uint framebuffer, NamedFramebufferDrawBufferBuf buf)
        {
            GlNative.NamedFramebufferDrawBuffer(framebuffer, ((uint)(buf)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawBuffers(int n, uint* bufs)
        {
            GlNative.DrawBuffers(n, bufs);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs)
        {
            GlNative.NamedFramebufferDrawBuffers(framebuffer, n, bufs);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElements(DrawElementsMode mode, int count, DrawElementsType type, void* indices)
        {
            GlNative.DrawElements(((uint)(mode)), count, ((uint)(type)), indices);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsBaseVertex(DrawElementsBaseVertexMode mode, int count, DrawElementsBaseVertexType type, void* indices, int basevertex)
        {
            GlNative.DrawElementsBaseVertex(((uint)(mode)), count, ((uint)(type)), indices, basevertex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsIndirect(DrawElementsIndirectMode mode, DrawElementsIndirectType type, void* indirect)
        {
            GlNative.DrawElementsIndirect(((uint)(mode)), ((uint)(type)), indirect);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsInstanced(DrawElementsInstancedMode mode, int count, DrawElementsInstancedType type, void* indices, int instancecount)
        {
            GlNative.DrawElementsInstanced(((uint)(mode)), count, ((uint)(type)), indices, instancecount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsInstancedBaseInstance(DrawElementsInstancedBaseInstanceMode mode, int count, DrawElementsInstancedBaseInstanceType type, void* indices, int instancecount, uint baseinstance)
        {
            GlNative.DrawElementsInstancedBaseInstance(((uint)(mode)), count, ((uint)(type)), indices, instancecount, baseinstance);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsInstancedBaseVertex(DrawElementsInstancedBaseVertexMode mode, int count, DrawElementsInstancedBaseVertexType type, void* indices, int instancecount, int basevertex)
        {
            GlNative.DrawElementsInstancedBaseVertex(((uint)(mode)), count, ((uint)(type)), indices, instancecount, basevertex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawElementsInstancedBaseVertexBaseInstance(DrawElementsInstancedBaseVertexBaseInstanceMode mode, int count, DrawElementsInstancedBaseVertexBaseInstanceType type, void* indices, int instancecount, int basevertex, uint baseinstance)
        {
            GlNative.DrawElementsInstancedBaseVertexBaseInstance(((uint)(mode)), count, ((uint)(type)), indices, instancecount, basevertex, baseinstance);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawRangeElements(DrawRangeElementsMode mode, uint start, uint end, int count, DrawRangeElementsType type, void* indices)
        {
            GlNative.DrawRangeElements(((uint)(mode)), start, end, count, ((uint)(type)), indices);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawRangeElementsBaseVertex(DrawRangeElementsBaseVertexMode mode, uint start, uint end, int count, DrawRangeElementsBaseVertexType type, void* indices, int basevertex)
        {
            GlNative.DrawRangeElementsBaseVertex(((uint)(mode)), start, end, count, ((uint)(type)), indices, basevertex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawTransformFeedback(DrawTransformFeedbackMode mode, uint id)
        {
            GlNative.DrawTransformFeedback(((uint)(mode)), id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawTransformFeedbackInstanced(DrawTransformFeedbackInstancedMode mode, uint id, int instancecount)
        {
            GlNative.DrawTransformFeedbackInstanced(((uint)(mode)), id, instancecount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawTransformFeedbackStream(DrawTransformFeedbackStreamMode mode, uint id, uint stream)
        {
            GlNative.DrawTransformFeedbackStream(((uint)(mode)), id, stream);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DrawTransformFeedbackStreamInstanced(DrawTransformFeedbackStreamInstancedMode mode, uint id, uint stream, int instancecount)
        {
            GlNative.DrawTransformFeedbackStreamInstanced(((uint)(mode)), id, stream, instancecount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Enable(uint cap)
        {
            GlNative.Enable(cap);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Disable(uint cap)
        {
            GlNative.Disable(cap);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Enablei(uint cap, uint index)
        {
            GlNative.Enablei(cap, index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Disablei(uint cap, uint index)
        {
            GlNative.Disablei(cap, index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EnableVertexAttribArray(uint index)
        {
            GlNative.EnableVertexAttribArray(index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DisableVertexAttribArray(uint index)
        {
            GlNative.DisableVertexAttribArray(index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void EnableVertexArrayAttrib(uint vaobj, uint index)
        {
            GlNative.EnableVertexArrayAttrib(vaobj, index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void DisableVertexArrayAttrib(uint vaobj, uint index)
        {
            GlNative.DisableVertexArrayAttrib(vaobj, index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static System.IntPtr FenceSync(FenceSyncCondition condition, uint flags)
        {
            return GlNative.FenceSync(((uint)(condition)), flags);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Finish()
        {
            GlNative.Finish();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Flush()
        {
            GlNative.Flush();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FlushMappedBufferRange(uint target, long offset, long length)
        {
            GlNative.FlushMappedBufferRange(target, offset, length);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FlushMappedNamedBufferRange(uint buffer, long offset, long length)
        {
            GlNative.FlushMappedNamedBufferRange(buffer, offset, length);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferParameteri(uint target, uint pname, int param)
        {
            GlNative.FramebufferParameteri(target, pname, param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferParameteri(uint framebuffer, uint pname, int param)
        {
            GlNative.NamedFramebufferParameteri(framebuffer, pname, param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferRenderbuffer(uint target, uint attachment, FramebufferRenderbufferRenderbuffertarget renderbuffertarget, uint renderbuffer)
        {
            GlNative.FramebufferRenderbuffer(target, attachment, ((uint)(renderbuffertarget)), renderbuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferRenderbuffer(uint framebuffer, uint attachment, NamedFramebufferRenderbufferRenderbuffertarget renderbuffertarget, uint renderbuffer)
        {
            GlNative.NamedFramebufferRenderbuffer(framebuffer, attachment, ((uint)(renderbuffertarget)), renderbuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferTexture(uint target, uint attachment, uint texture, int level)
        {
            GlNative.FramebufferTexture(target, attachment, texture, level);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            GlNative.FramebufferTexture1D(target, attachment, textarget, texture, level);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level)
        {
            GlNative.FramebufferTexture2D(target, attachment, textarget, texture, level);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int layer)
        {
            GlNative.FramebufferTexture3D(target, attachment, textarget, texture, level, layer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level)
        {
            GlNative.NamedFramebufferTexture(framebuffer, attachment, texture, level);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer)
        {
            GlNative.FramebufferTextureLayer(target, attachment, texture, level, layer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer)
        {
            GlNative.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void FrontFace(FrontFaceMode mode)
        {
            GlNative.FrontFace(((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenBuffers(int n, uint* buffers)
        {
            GlNative.GenBuffers(n, buffers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenerateMipmap(GenerateMipmapTarget target)
        {
            GlNative.GenerateMipmap(((uint)(target)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenerateTextureMipmap(uint texture)
        {
            GlNative.GenerateTextureMipmap(texture);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenFramebuffers(int n, uint* ids)
        {
            GlNative.GenFramebuffers(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenProgramPipelines(int n, uint* pipelines)
        {
            GlNative.GenProgramPipelines(n, pipelines);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenQueries(int n, uint* ids)
        {
            GlNative.GenQueries(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenRenderbuffers(int n, uint* renderbuffers)
        {
            GlNative.GenRenderbuffers(n, renderbuffers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenSamplers(int n, uint* samplers)
        {
            GlNative.GenSamplers(n, samplers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenTextures(int n, uint* textures)
        {
            GlNative.GenTextures(n, textures);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenTransformFeedbacks(int n, uint* ids)
        {
            GlNative.GenTransformFeedbacks(n, ids);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GenVertexArrays(int n, uint* arrays)
        {
            GlNative.GenVertexArrays(n, arrays);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBooleanv(uint pname, bool* data)
        {
            GlNative.GetBooleanv(pname, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetDoublev(uint pname, double* data)
        {
            GlNative.GetDoublev(pname, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetFloatv(uint pname, float* data)
        {
            GlNative.GetFloatv(pname, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetIntegerv(uint pname, int* data)
        {
            GlNative.GetIntegerv(pname, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetInteger64v(uint pname, long* data)
        {
            GlNative.GetInteger64v(pname, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBooleani_v(uint target, uint index, bool* data)
        {
            GlNative.GetBooleani_v(target, index, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetIntegeri_v(uint target, uint index, int* data)
        {
            GlNative.GetIntegeri_v(target, index, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetFloati_v(uint target, uint index, float* data)
        {
            GlNative.GetFloati_v(target, index, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetDoublei_v(uint target, uint index, double* data)
        {
            GlNative.GetDoublei_v(target, index, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetInteger64i_v(uint target, uint index, long* data)
        {
            GlNative.GetInteger64i_v(target, index, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* @params)
        {
            GlNative.GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, uint* type, System.Text.StringBuilder name)
        {
            GlNative.GetActiveAttrib(program, index, bufSize, length, size, type, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveSubroutineName(uint program, uint shadertype, uint index, int bufSize, int* length, System.Text.StringBuilder name)
        {
            GlNative.GetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveSubroutineUniformiv(uint program, GetActiveSubroutineUniformivShadertype shadertype, uint index, GetActiveSubroutineUniformivPname pname, int* values)
        {
            GlNative.GetActiveSubroutineUniformiv(program, ((uint)(shadertype)), index, ((uint)(pname)), values);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveSubroutineUniformName(uint program, GetActiveSubroutineUniformNameShadertype shadertype, uint index, int bufSize, int* length, System.Text.StringBuilder name)
        {
            GlNative.GetActiveSubroutineUniformName(program, ((uint)(shadertype)), index, bufSize, length, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, uint* type, System.Text.StringBuilder name)
        {
            GlNative.GetActiveUniform(program, index, bufSize, length, size, type, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int* @params)
        {
            GlNative.GetActiveUniformBlockiv(program, uniformBlockIndex, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, System.Text.StringBuilder uniformBlockName)
        {
            GlNative.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, System.Text.StringBuilder uniformName)
        {
            GlNative.GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, uint pname, int* @params)
        {
            GlNative.GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetAttachedShaders(uint program, int maxCount, int* count, uint* shaders)
        {
            GlNative.GetAttachedShaders(program, maxCount, count, shaders);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetAttribLocation(uint program, string name)
        {
            return GlNative.GetAttribLocation(program, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBufferParameteriv(uint target, uint value, int* data)
        {
            GlNative.GetBufferParameteriv(target, value, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBufferParameteri64v(uint target, uint value, long* data)
        {
            GlNative.GetBufferParameteri64v(target, value, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedBufferParameteriv(uint buffer, uint pname, int* @params)
        {
            GlNative.GetNamedBufferParameteriv(buffer, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedBufferParameteri64v(uint buffer, uint pname, long* @params)
        {
            GlNative.GetNamedBufferParameteri64v(buffer, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBufferPointerv(uint target, GetBufferPointervPname pname, void* @params)
        {
            GlNative.GetBufferPointerv(target, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedBufferPointerv(uint buffer, GetNamedBufferPointervPname pname, void* @params)
        {
            GlNative.GetNamedBufferPointerv(buffer, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetBufferSubData(uint target, long offset, long size, void* data)
        {
            GlNative.GetBufferSubData(target, offset, size, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedBufferSubData(uint buffer, long offset, long size, void* data)
        {
            GlNative.GetNamedBufferSubData(buffer, offset, size, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetCompressedTexImage(GetCompressedTexImageTarget target, int level, void* pixels)
        {
            GlNative.GetCompressedTexImage(((uint)(target)), level, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnCompressedTexImage(GetnCompressedTexImageTarget target, int level, int bufSize, void* pixels)
        {
            GlNative.GetnCompressedTexImage(((uint)(target)), level, bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetCompressedTextureImage(uint texture, int level, int bufSize, void* pixels)
        {
            GlNative.GetCompressedTextureImage(texture, level, bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels)
        {
            GlNative.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetDebugMessageLog(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, System.Text.StringBuilder messageLog)
        {
            return GlNative.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetError()
        {
            return GlNative.GetError();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetFragDataIndex(uint program, string name)
        {
            return GlNative.GetFragDataIndex(program, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetFragDataLocation(uint program, string name)
        {
            return GlNative.GetFragDataLocation(program, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, int* @params)
        {
            GlNative.GetFramebufferAttachmentParameteriv(target, attachment, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, int* @params)
        {
            GlNative.GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetFramebufferParameteriv(uint target, uint pname, int* @params)
        {
            GlNative.GetFramebufferParameteriv(target, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedFramebufferParameteriv(uint framebuffer, uint pname, int* param)
        {
            GlNative.GetNamedFramebufferParameteriv(framebuffer, pname, param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetGraphicsResetStatus()
        {
            return GlNative.GetGraphicsResetStatus();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetInternalformativ(GetInternalformativTarget target, uint internalformat, uint pname, int bufSize, int* @params)
        {
            GlNative.GetInternalformativ(((uint)(target)), internalformat, pname, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetInternalformati64v(GetInternalformati64vTarget target, uint internalformat, uint pname, int bufSize, long* @params)
        {
            GlNative.GetInternalformati64v(((uint)(target)), internalformat, pname, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetMultisamplefv(GetMultisamplefvPname pname, uint index, float* val)
        {
            GlNative.GetMultisamplefv(((uint)(pname)), index, val);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetObjectLabel(uint identifier, uint name, int bufSize, int* length, System.Text.StringBuilder label)
        {
            GlNative.GetObjectLabel(identifier, name, bufSize, length, label);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetObjectPtrLabel(void* ptr, int bufSize, int* length, System.Text.StringBuilder label)
        {
            GlNative.GetObjectPtrLabel(ptr, bufSize, length, label);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetPointerv(GetPointervPname pname, void* @params)
        {
            GlNative.GetPointerv(((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramiv(uint program, GetProgramivPname pname, int* @params)
        {
            GlNative.GetProgramiv(program, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramBinary(uint program, int bufSize, int* length, uint* binaryFormat, void* binary)
        {
            GlNative.GetProgramBinary(program, bufSize, length, binaryFormat, binary);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramInfoLog(uint program, int maxLength, int* length, System.Text.StringBuilder infoLog)
        {
            GlNative.GetProgramInfoLog(program, maxLength, length, infoLog);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramInterfaceiv(uint program, uint programInterface, uint pname, int* @params)
        {
            GlNative.GetProgramInterfaceiv(program, programInterface, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramPipelineiv(uint pipeline, uint pname, int* @params)
        {
            GlNative.GetProgramPipelineiv(pipeline, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, System.Text.StringBuilder infoLog)
        {
            GlNative.GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, uint* props, int bufSize, int* length, int* @params)
        {
            GlNative.GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetProgramResourceIndex(uint program, uint programInterface, string name)
        {
            return GlNative.GetProgramResourceIndex(program, programInterface, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetProgramResourceLocation(uint program, uint programInterface, string name)
        {
            return GlNative.GetProgramResourceLocation(program, programInterface, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetProgramResourceLocationIndex(uint program, uint programInterface, string name)
        {
            return GlNative.GetProgramResourceLocationIndex(program, programInterface, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, int* length, System.Text.StringBuilder name)
        {
            GlNative.GetProgramResourceName(program, programInterface, index, bufSize, length, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetProgramStageiv(uint program, GetProgramStageivShadertype shadertype, GetProgramStageivPname pname, int* values)
        {
            GlNative.GetProgramStageiv(program, ((uint)(shadertype)), ((uint)(pname)), values);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryIndexediv(GetQueryIndexedivTarget target, uint index, GetQueryIndexedivPname pname, int* @params)
        {
            GlNative.GetQueryIndexediv(((uint)(target)), index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryiv(GetQueryivTarget target, GetQueryivPname pname, int* @params)
        {
            GlNative.GetQueryiv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryObjectiv(uint id, GetQueryObjectivPname pname, int* @params)
        {
            GlNative.GetQueryObjectiv(id, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryObjectuiv(uint id, GetQueryObjectuivPname pname, uint* @params)
        {
            GlNative.GetQueryObjectuiv(id, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryObjecti64v(uint id, GetQueryObjecti64vPname pname, long* @params)
        {
            GlNative.GetQueryObjecti64v(id, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryObjectui64v(uint id, GetQueryObjectui64vPname pname, ulong* @params)
        {
            GlNative.GetQueryObjectui64v(id, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryBufferObjectiv(uint id, uint buffer, GetQueryBufferObjectivPname pname, long offset)
        {
            GlNative.GetQueryBufferObjectiv(id, buffer, ((uint)(pname)), offset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryBufferObjectuiv(uint id, uint buffer, GetQueryBufferObjectuivPname pname, long offset)
        {
            GlNative.GetQueryBufferObjectuiv(id, buffer, ((uint)(pname)), offset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryBufferObjecti64v(uint id, uint buffer, GetQueryBufferObjecti64vPname pname, long offset)
        {
            GlNative.GetQueryBufferObjecti64v(id, buffer, ((uint)(pname)), offset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetQueryBufferObjectui64v(uint id, uint buffer, GetQueryBufferObjectui64vPname pname, long offset)
        {
            GlNative.GetQueryBufferObjectui64v(id, buffer, ((uint)(pname)), offset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetRenderbufferParameteriv(GetRenderbufferParameterivTarget target, uint pname, int* @params)
        {
            GlNative.GetRenderbufferParameteriv(((uint)(target)), pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, int* @params)
        {
            GlNative.GetNamedRenderbufferParameteriv(renderbuffer, pname, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetSamplerParameterfv(uint sampler, GetSamplerParameterfvPname pname, float* @params)
        {
            GlNative.GetSamplerParameterfv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetSamplerParameteriv(uint sampler, GetSamplerParameterivPname pname, int* @params)
        {
            GlNative.GetSamplerParameteriv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetSamplerParameterIiv(uint sampler, GetSamplerParameterIivPname pname, int* @params)
        {
            GlNative.GetSamplerParameterIiv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetSamplerParameterIuiv(uint sampler, GetSamplerParameterIuivPname pname, uint* @params)
        {
            GlNative.GetSamplerParameterIuiv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetShaderiv(uint shader, GetShaderivPname pname, int* @params)
        {
            GlNative.GetShaderiv(shader, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetShaderInfoLog(uint shader, int maxLength, int* length, System.Text.StringBuilder infoLog)
        {
            GlNative.GetShaderInfoLog(shader, maxLength, length, infoLog);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetShaderPrecisionFormat(GetShaderPrecisionFormatShaderType shaderType, uint precisionType, int* range, int* precision)
        {
            GlNative.GetShaderPrecisionFormat(((uint)(shaderType)), precisionType, range, precision);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetShaderSource(uint shader, int bufSize, int* length, System.Text.StringBuilder source)
        {
            GlNative.GetShaderSource(shader, bufSize, length, source);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static byte* GetString(GetStringName name)
        {
            return GlNative.GetString(((uint)(name)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static byte* GetStringi(GetStringiName name, uint index)
        {
            return GlNative.GetStringi(((uint)(name)), index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetSubroutineIndex(uint program, GetSubroutineIndexShadertype shadertype, string name)
        {
            return GlNative.GetSubroutineIndex(program, ((uint)(shadertype)), name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetSubroutineUniformLocation(uint program, GetSubroutineUniformLocationShadertype shadertype, string name)
        {
            return GlNative.GetSubroutineUniformLocation(program, ((uint)(shadertype)), name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetSynciv(System.IntPtr sync, uint pname, int bufSize, int* length, int* values)
        {
            GlNative.GetSynciv(sync, pname, bufSize, length, values);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexImage(GetTexImageTarget target, int level, GetTexImageFormat format, GetTexImageType type, void* pixels)
        {
            GlNative.GetTexImage(((uint)(target)), level, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnTexImage(GetnTexImageTarget target, int level, GetnTexImageFormat format, GetnTexImageType type, int bufSize, void* pixels)
        {
            GlNative.GetnTexImage(((uint)(target)), level, ((uint)(format)), ((uint)(type)), bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureImage(uint texture, int level, GetTextureImageFormat format, GetTextureImageType type, int bufSize, void* pixels)
        {
            GlNative.GetTextureImage(texture, level, ((uint)(format)), ((uint)(type)), bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexLevelParameterfv(GetTexLevelParameterfvTarget target, int level, GetTexLevelParameterfvPname pname, float* @params)
        {
            GlNative.GetTexLevelParameterfv(((uint)(target)), level, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexLevelParameteriv(GetTexLevelParameterivTarget target, int level, GetTexLevelParameterivPname pname, int* @params)
        {
            GlNative.GetTexLevelParameteriv(((uint)(target)), level, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureLevelParameterfv(uint texture, int level, GetTextureLevelParameterfvPname pname, float* @params)
        {
            GlNative.GetTextureLevelParameterfv(texture, level, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureLevelParameteriv(uint texture, int level, GetTextureLevelParameterivPname pname, int* @params)
        {
            GlNative.GetTextureLevelParameteriv(texture, level, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexParameterfv(GetTexParameterfvTarget target, GetTexParameterfvPname pname, float* @params)
        {
            GlNative.GetTexParameterfv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexParameteriv(GetTexParameterivTarget target, GetTexParameterivPname pname, int* @params)
        {
            GlNative.GetTexParameteriv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexParameterIiv(GetTexParameterIivTarget target, GetTexParameterIivPname pname, int* @params)
        {
            GlNative.GetTexParameterIiv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTexParameterIuiv(GetTexParameterIuivTarget target, GetTexParameterIuivPname pname, uint* @params)
        {
            GlNative.GetTexParameterIuiv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureParameterfv(uint texture, GetTextureParameterfvPname pname, float* @params)
        {
            GlNative.GetTextureParameterfv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureParameteriv(uint texture, GetTextureParameterivPname pname, int* @params)
        {
            GlNative.GetTextureParameteriv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureParameterIiv(uint texture, GetTextureParameterIivPname pname, int* @params)
        {
            GlNative.GetTextureParameterIiv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureParameterIuiv(uint texture, GetTextureParameterIuivPname pname, uint* @params)
        {
            GlNative.GetTextureParameterIuiv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GetTextureSubImageFormat format, GetTextureSubImageType type, int bufSize, void* pixels)
        {
            GlNative.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, ((uint)(format)), ((uint)(type)), bufSize, pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTransformFeedbackiv(uint xfb, GetTransformFeedbackivPname pname, int* param)
        {
            GlNative.GetTransformFeedbackiv(xfb, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTransformFeedbacki_v(uint xfb, GetTransformFeedbacki_vPname pname, uint index, int* param)
        {
            GlNative.GetTransformFeedbacki_v(xfb, ((uint)(pname)), index, param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTransformFeedbacki64_v(uint xfb, GetTransformFeedbacki64_vPname pname, uint index, long* param)
        {
            GlNative.GetTransformFeedbacki64_v(xfb, ((uint)(pname)), index, param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, uint* type, System.Text.StringBuilder name)
        {
            GlNative.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformfv(uint program, int location, float* @params)
        {
            GlNative.GetUniformfv(program, location, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformiv(uint program, int location, int* @params)
        {
            GlNative.GetUniformiv(program, location, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformuiv(uint program, int location, uint* @params)
        {
            GlNative.GetUniformuiv(program, location, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformdv(uint program, int location, double* @params)
        {
            GlNative.GetUniformdv(program, location, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnUniformfv(uint program, int location, int bufSize, float* @params)
        {
            GlNative.GetnUniformfv(program, location, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnUniformiv(uint program, int location, int bufSize, int* @params)
        {
            GlNative.GetnUniformiv(program, location, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnUniformuiv(uint program, int location, int bufSize, uint* @params)
        {
            GlNative.GetnUniformuiv(program, location, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetnUniformdv(uint program, int location, int bufSize, double* @params)
        {
            GlNative.GetnUniformdv(program, location, bufSize, @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static uint GetUniformBlockIndex(uint program, string uniformBlockName)
        {
            return GlNative.GetUniformBlockIndex(program, uniformBlockName);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint* uniformIndices)
        {
            GlNative.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static int GetUniformLocation(uint program, string name)
        {
            return GlNative.GetUniformLocation(program, name);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetUniformSubroutineuiv(GetUniformSubroutineuivShadertype shadertype, int location, uint* values)
        {
            GlNative.GetUniformSubroutineuiv(((uint)(shadertype)), location, values);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexArrayIndexed64iv(uint vaobj, uint index, GetVertexArrayIndexed64ivPname pname, long* param)
        {
            GlNative.GetVertexArrayIndexed64iv(vaobj, index, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexArrayIndexediv(uint vaobj, uint index, GetVertexArrayIndexedivPname pname, int* param)
        {
            GlNative.GetVertexArrayIndexediv(vaobj, index, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexArrayiv(uint vaobj, GetVertexArrayivPname pname, int* param)
        {
            GlNative.GetVertexArrayiv(vaobj, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribdv(uint index, GetVertexAttribdvPname pname, double* @params)
        {
            GlNative.GetVertexAttribdv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribfv(uint index, GetVertexAttribfvPname pname, float* @params)
        {
            GlNative.GetVertexAttribfv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribiv(uint index, GetVertexAttribivPname pname, int* @params)
        {
            GlNative.GetVertexAttribiv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribIiv(uint index, GetVertexAttribIivPname pname, int* @params)
        {
            GlNative.GetVertexAttribIiv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribIuiv(uint index, GetVertexAttribIuivPname pname, uint* @params)
        {
            GlNative.GetVertexAttribIuiv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribLdv(uint index, GetVertexAttribLdvPname pname, double* @params)
        {
            GlNative.GetVertexAttribLdv(index, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void GetVertexAttribPointerv(uint index, GetVertexAttribPointervPname pname, void* pointer)
        {
            GlNative.GetVertexAttribPointerv(index, ((uint)(pname)), pointer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Hint(HintTarget target, HintMode mode)
        {
            GlNative.Hint(((uint)(target)), ((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateBufferData(uint buffer)
        {
            GlNative.InvalidateBufferData(buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateBufferSubData(uint buffer, long offset, long length)
        {
            GlNative.InvalidateBufferSubData(buffer, offset, length);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateFramebuffer(uint target, int numAttachments, uint* attachments)
        {
            GlNative.InvalidateFramebuffer(target, numAttachments, attachments);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments)
        {
            GlNative.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateSubFramebuffer(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            GlNative.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            GlNative.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateTexImage(uint texture, int level)
        {
            GlNative.InvalidateTexImage(texture, level);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            GlNative.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsBuffer(uint buffer)
        {
            return GlNative.IsBuffer(buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsEnabled(uint cap)
        {
            return GlNative.IsEnabled(cap);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsEnabledi(uint cap, uint index)
        {
            return GlNative.IsEnabledi(cap, index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsFramebuffer(uint framebuffer)
        {
            return GlNative.IsFramebuffer(framebuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsProgram(uint program)
        {
            return GlNative.IsProgram(program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsProgramPipeline(uint pipeline)
        {
            return GlNative.IsProgramPipeline(pipeline);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsQuery(uint id)
        {
            return GlNative.IsQuery(id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsRenderbuffer(uint renderbuffer)
        {
            return GlNative.IsRenderbuffer(renderbuffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsSampler(uint id)
        {
            return GlNative.IsSampler(id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsShader(uint shader)
        {
            return GlNative.IsShader(shader);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsSync(System.IntPtr sync)
        {
            return GlNative.IsSync(sync);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsTexture(uint texture)
        {
            return GlNative.IsTexture(texture);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsTransformFeedback(uint id)
        {
            return GlNative.IsTransformFeedback(id);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool IsVertexArray(uint array)
        {
            return GlNative.IsVertexArray(array);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void LineWidth(float width)
        {
            GlNative.LineWidth(width);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void LinkProgram(uint program)
        {
            GlNative.LinkProgram(program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void LogicOp(LogicOpOpcode opcode)
        {
            GlNative.LogicOp(((uint)(opcode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void* MapBuffer(uint target, MapBufferAccess access)
        {
            return GlNative.MapBuffer(target, ((uint)(access)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void* MapNamedBuffer(uint buffer, MapNamedBufferAccess access)
        {
            return GlNative.MapNamedBuffer(buffer, ((uint)(access)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void* MapBufferRange(uint target, long offset, long length, uint access)
        {
            return GlNative.MapBufferRange(target, offset, length, access);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void* MapNamedBufferRange(uint buffer, long offset, long length, uint access)
        {
            return GlNative.MapNamedBufferRange(buffer, offset, length, access);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MemoryBarrier(MemoryBarrierBarriers barriers)
        {
            GlNative.MemoryBarrier(((uint)(barriers)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MemoryBarrierByRegion(MemoryBarrierByRegionBarriers barriers)
        {
            GlNative.MemoryBarrierByRegion(((uint)(barriers)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MinSampleShading(float value)
        {
            GlNative.MinSampleShading(value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MultiDrawArrays(MultiDrawArraysMode mode, int* first, int* count, int drawcount)
        {
            GlNative.MultiDrawArrays(((uint)(mode)), first, count, drawcount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MultiDrawArraysIndirect(MultiDrawArraysIndirectMode mode, void* indirect, int drawcount, int stride)
        {
            GlNative.MultiDrawArraysIndirect(((uint)(mode)), indirect, drawcount, stride);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MultiDrawElements(MultiDrawElementsMode mode, int* count, MultiDrawElementsType type, void* indices, int drawcount)
        {
            GlNative.MultiDrawElements(((uint)(mode)), count, ((uint)(type)), indices, drawcount);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MultiDrawElementsBaseVertex(MultiDrawElementsBaseVertexMode mode, int* count, MultiDrawElementsBaseVertexType type, void* indices, int drawcount, int* basevertex)
        {
            GlNative.MultiDrawElementsBaseVertex(((uint)(mode)), count, ((uint)(type)), indices, drawcount, basevertex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void MultiDrawElementsIndirect(MultiDrawElementsIndirectMode mode, MultiDrawElementsIndirectType type, void* indirect, int drawcount, int stride)
        {
            GlNative.MultiDrawElementsIndirect(((uint)(mode)), ((uint)(type)), indirect, drawcount, stride);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ObjectLabel(uint identifier, uint name, int length, string label)
        {
            GlNative.ObjectLabel(identifier, name, length, label);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ObjectPtrLabel(void* ptr, int length, string label)
        {
            GlNative.ObjectPtrLabel(ptr, length, label);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PatchParameteri(PatchParameteriPname pname, int value)
        {
            GlNative.PatchParameteri(((uint)(pname)), value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PatchParameterfv(PatchParameterfvPname pname, float* values)
        {
            GlNative.PatchParameterfv(((uint)(pname)), values);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PauseTransformFeedback()
        {
            GlNative.PauseTransformFeedback();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PixelStoref(PixelStorefPname pname, float param)
        {
            GlNative.PixelStoref(((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PixelStorei(PixelStoreiPname pname, int param)
        {
            GlNative.PixelStorei(((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PointParameterf(PointParameterfPname pname, float param)
        {
            GlNative.PointParameterf(((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PointParameteri(PointParameteriPname pname, int param)
        {
            GlNative.PointParameteri(((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PointParameterfv(PointParameterfvPname pname, float* @params)
        {
            GlNative.PointParameterfv(((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PointParameteriv(PointParameterivPname pname, int* @params)
        {
            GlNative.PointParameteriv(((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PointSize(float size)
        {
            GlNative.PointSize(size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PolygonMode(PolygonModeFace face, PolygonModeMode mode)
        {
            GlNative.PolygonMode(((uint)(face)), ((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PolygonOffset(float factor, float units)
        {
            GlNative.PolygonOffset(factor, units);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PopDebugGroup()
        {
            GlNative.PopDebugGroup();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PrimitiveRestartIndex(uint index)
        {
            GlNative.PrimitiveRestartIndex(index);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramBinary(uint program, uint binaryFormat, void* binary, int length)
        {
            GlNative.ProgramBinary(program, binaryFormat, binary, length);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramParameteri(uint program, uint pname, int value)
        {
            GlNative.ProgramParameteri(program, pname, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform1f(uint program, int location, float v0)
        {
            GlNative.ProgramUniform1f(program, location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform2f(uint program, int location, float v0, float v1)
        {
            GlNative.ProgramUniform2f(program, location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2)
        {
            GlNative.ProgramUniform3f(program, location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
        {
            GlNative.ProgramUniform4f(program, location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform1i(uint program, int location, int v0)
        {
            GlNative.ProgramUniform1i(program, location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform2i(uint program, int location, int v0, int v1)
        {
            GlNative.ProgramUniform2i(program, location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2)
        {
            GlNative.ProgramUniform3i(program, location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
        {
            GlNative.ProgramUniform4i(program, location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform1ui(uint program, int location, uint v0)
        {
            GlNative.ProgramUniform1ui(program, location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform2ui(uint program, int location, int v0, uint v1)
        {
            GlNative.ProgramUniform2ui(program, location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform3ui(uint program, int location, int v0, int v1, uint v2)
        {
            GlNative.ProgramUniform3ui(program, location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform4ui(uint program, int location, int v0, int v1, int v2, uint v3)
        {
            GlNative.ProgramUniform4ui(program, location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform1iv(uint program, int location, int count, int* value)
        {
            GlNative.ProgramUniform1iv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform2iv(uint program, int location, int count, int* value)
        {
            GlNative.ProgramUniform2iv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform3iv(uint program, int location, int count, int* value)
        {
            GlNative.ProgramUniform3iv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform4iv(uint program, int location, int count, int* value)
        {
            GlNative.ProgramUniform4iv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform1uiv(uint program, int location, int count, uint* value)
        {
            GlNative.ProgramUniform1uiv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform2uiv(uint program, int location, int count, uint* value)
        {
            GlNative.ProgramUniform2uiv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform3uiv(uint program, int location, int count, uint* value)
        {
            GlNative.ProgramUniform3uiv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniform4uiv(uint program, int location, int count, uint* value)
        {
            GlNative.ProgramUniform4uiv(program, location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix2fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix3fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix2x3fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix3x2fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix2x4fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix4x2fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix3x4fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value)
        {
            GlNative.ProgramUniformMatrix4x3fv(program, location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ProvokingVertex(uint provokeMode)
        {
            GlNative.ProvokingVertex(provokeMode);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void PushDebugGroup(uint source, uint id, int length, string message)
        {
            GlNative.PushDebugGroup(source, id, length, message);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void QueryCounter(uint id, QueryCounterTarget target)
        {
            GlNative.QueryCounter(id, ((uint)(target)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ReadBuffer(ReadBufferMode mode)
        {
            GlNative.ReadBuffer(((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedFramebufferReadBuffer(uint framebuffer, NamedFramebufferReadBufferMode mode)
        {
            GlNative.NamedFramebufferReadBuffer(framebuffer, ((uint)(mode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ReadPixels(int x, int y, int width, int height, ReadPixelsFormat format, ReadPixelsType type, void* data)
        {
            GlNative.ReadPixels(x, y, width, height, ((uint)(format)), ((uint)(type)), data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ReadnPixels(int x, int y, int width, int height, ReadnPixelsFormat format, ReadnPixelsType type, int bufSize, void* data)
        {
            GlNative.ReadnPixels(x, y, width, height, ((uint)(format)), ((uint)(type)), bufSize, data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ReleaseShaderCompiler()
        {
            GlNative.ReleaseShaderCompiler();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void RenderbufferStorage(RenderbufferStorageTarget target, uint internalformat, int width, int height)
        {
            GlNative.RenderbufferStorage(((uint)(target)), internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height)
        {
            GlNative.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void RenderbufferStorageMultisample(RenderbufferStorageMultisampleTarget target, int samples, uint internalformat, int width, int height)
        {
            GlNative.RenderbufferStorageMultisample(((uint)(target)), samples, internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height)
        {
            GlNative.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ResumeTransformFeedback()
        {
            GlNative.ResumeTransformFeedback();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SampleCoverage(float value, bool invert)
        {
            GlNative.SampleCoverage(value, invert);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SampleMaski(uint maskNumber, uint mask)
        {
            GlNative.SampleMaski(maskNumber, mask);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameterf(uint sampler, SamplerParameterfPname pname, float param)
        {
            GlNative.SamplerParameterf(sampler, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameteri(uint sampler, SamplerParameteriPname pname, int param)
        {
            GlNative.SamplerParameteri(sampler, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameterfv(uint sampler, SamplerParameterfvPname pname, float* @params)
        {
            GlNative.SamplerParameterfv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameteriv(uint sampler, SamplerParameterivPname pname, int* @params)
        {
            GlNative.SamplerParameteriv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameterIiv(uint sampler, SamplerParameterIivPname pname, int* @params)
        {
            GlNative.SamplerParameterIiv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void SamplerParameterIuiv(uint sampler, SamplerParameterIuivPname pname, uint* @params)
        {
            GlNative.SamplerParameterIuiv(sampler, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Scissor(int x, int y, int width, int height)
        {
            GlNative.Scissor(x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ScissorArrayv(uint first, int count, int* v)
        {
            GlNative.ScissorArrayv(first, count, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            GlNative.ScissorIndexed(index, left, bottom, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ScissorIndexedv(uint index, int* v)
        {
            GlNative.ScissorIndexedv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ShaderBinary(int count, uint* shaders, uint binaryFormat, void* binary, int length)
        {
            GlNative.ShaderBinary(count, shaders, binaryFormat, binary, length);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            GlNative.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilFunc(StencilFuncFunc func, int @ref, uint mask)
        {
            GlNative.StencilFunc(((uint)(func)), @ref, mask);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilFuncSeparate(StencilFuncSeparateFace face, StencilFuncSeparateFunc func, int @ref, uint mask)
        {
            GlNative.StencilFuncSeparate(((uint)(face)), ((uint)(func)), @ref, mask);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilMask(uint mask)
        {
            GlNative.StencilMask(mask);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilMaskSeparate(StencilMaskSeparateFace face, uint mask)
        {
            GlNative.StencilMaskSeparate(((uint)(face)), mask);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilOp(StencilOpSfail sfail, StencilOpDpfail dpfail, StencilOpDppass dppass)
        {
            GlNative.StencilOp(((uint)(sfail)), ((uint)(dpfail)), ((uint)(dppass)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void StencilOpSeparate(StencilOpSeparateFace face, StencilOpSeparateSfail sfail, StencilOpSeparateDpfail dpfail, StencilOpSeparateDppass dppass)
        {
            GlNative.StencilOpSeparate(((uint)(face)), ((uint)(sfail)), ((uint)(dpfail)), ((uint)(dppass)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexBuffer(TexBufferTarget target, uint internalformat, uint buffer)
        {
            GlNative.TexBuffer(((uint)(target)), internalformat, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureBuffer(uint texture, uint internalformat, uint buffer)
        {
            GlNative.TextureBuffer(texture, internalformat, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexBufferRange(TexBufferRangeTarget target, uint internalformat, uint buffer, long offset, long size)
        {
            GlNative.TexBufferRange(((uint)(target)), internalformat, buffer, offset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureBufferRange(uint texture, uint internalformat, uint buffer, long offset, int size)
        {
            GlNative.TextureBufferRange(texture, internalformat, buffer, offset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexImage1D(TexImage1DTarget target, int level, int internalformat, int width, int border, TexImage1DFormat format, TexImage1DType type, void* data)
        {
            GlNative.TexImage1D(((uint)(target)), level, internalformat, width, border, ((uint)(format)), ((uint)(type)), data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexImage2D(TexImage2DTarget target, int level, int internalformat, int width, int height, int border, TexImage2DFormat format, TexImage2DType type, void* data)
        {
            GlNative.TexImage2D(((uint)(target)), level, internalformat, width, height, border, ((uint)(format)), ((uint)(type)), data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexImage2DMultisample(TexImage2DMultisampleTarget target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            GlNative.TexImage2DMultisample(((uint)(target)), samples, internalformat, width, height, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexImage3D(TexImage3DTarget target, int level, int internalformat, int width, int height, int depth, int border, TexImage3DFormat format, TexImage3DType type, void* data)
        {
            GlNative.TexImage3D(((uint)(target)), level, internalformat, width, height, depth, border, ((uint)(format)), ((uint)(type)), data);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexImage3DMultisample(TexImage3DMultisampleTarget target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            GlNative.TexImage3DMultisample(((uint)(target)), samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameterf(TexParameterfTarget target, TexParameterfPname pname, float param)
        {
            GlNative.TexParameterf(((uint)(target)), ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameteri(TexParameteriTarget target, TexParameteriPname pname, int param)
        {
            GlNative.TexParameteri(((uint)(target)), ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameterf(uint texture, TextureParameterfPname pname, float param)
        {
            GlNative.TextureParameterf(texture, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameteri(uint texture, TextureParameteriPname pname, int param)
        {
            GlNative.TextureParameteri(texture, ((uint)(pname)), param);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameterfv(TexParameterfvTarget target, TexParameterfvPname pname, float* @params)
        {
            GlNative.TexParameterfv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameteriv(TexParameterivTarget target, TexParameterivPname pname, int* @params)
        {
            GlNative.TexParameteriv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameterIiv(TexParameterIivTarget target, TexParameterIivPname pname, int* @params)
        {
            GlNative.TexParameterIiv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexParameterIuiv(TexParameterIuivTarget target, TexParameterIuivPname pname, uint* @params)
        {
            GlNative.TexParameterIuiv(((uint)(target)), ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameterfv(uint texture, TextureParameterfvPname pname, float* @params)
        {
            GlNative.TextureParameterfv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameteriv(uint texture, TextureParameterivPname pname, int* @params)
        {
            GlNative.TextureParameteriv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameterIiv(uint texture, TextureParameterIivPname pname, int* @params)
        {
            GlNative.TextureParameterIiv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureParameterIuiv(uint texture, TextureParameterIuivPname pname, uint* @params)
        {
            GlNative.TextureParameterIuiv(texture, ((uint)(pname)), @params);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexStorage1D(TexStorage1DTarget target, int levels, uint internalformat, int width)
        {
            GlNative.TexStorage1D(((uint)(target)), levels, internalformat, width);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureStorage1D(uint texture, int levels, uint internalformat, int width)
        {
            GlNative.TextureStorage1D(texture, levels, internalformat, width);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexStorage2D(TexStorage2DTarget target, int levels, uint internalformat, int width, int height)
        {
            GlNative.TexStorage2D(((uint)(target)), levels, internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureStorage2D(uint texture, int levels, uint internalformat, int width, int height)
        {
            GlNative.TextureStorage2D(texture, levels, internalformat, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexStorage2DMultisample(TexStorage2DMultisampleTarget target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            GlNative.TexStorage2DMultisample(((uint)(target)), samples, internalformat, width, height, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, bool fixedsamplelocations)
        {
            GlNative.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexStorage3D(TexStorage3DTarget target, int levels, uint internalformat, int width, int height, int depth)
        {
            GlNative.TexStorage3D(((uint)(target)), levels, internalformat, width, height, depth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth)
        {
            GlNative.TextureStorage3D(texture, levels, internalformat, width, height, depth);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexStorage3DMultisample(TexStorage3DMultisampleTarget target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            GlNative.TexStorage3DMultisample(((uint)(target)), samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            GlNative.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexSubImage1D(TexSubImage1DTarget target, int level, int xoffset, int width, TexSubImage1DFormat format, TexSubImage1DType type, void* pixels)
        {
            GlNative.TexSubImage1D(((uint)(target)), level, xoffset, width, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, TextureSubImage1DFormat format, TextureSubImage1DType type, void* pixels)
        {
            GlNative.TextureSubImage1D(texture, level, xoffset, width, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexSubImage2D(TexSubImage2DTarget target, int level, int xoffset, int yoffset, int width, int height, TexSubImage2DFormat format, TexSubImage2DType type, void* pixels)
        {
            GlNative.TexSubImage2D(((uint)(target)), level, xoffset, yoffset, width, height, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, TextureSubImage2DFormat format, TextureSubImage2DType type, void* pixels)
        {
            GlNative.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TexSubImage3D(TexSubImage3DTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, TexSubImage3DFormat format, TexSubImage3DType type, void* pixels)
        {
            GlNative.TexSubImage3D(((uint)(target)), level, xoffset, yoffset, zoffset, width, height, depth, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, TextureSubImage3DFormat format, TextureSubImage3DType type, void* pixels)
        {
            GlNative.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, ((uint)(format)), ((uint)(type)), pixels);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureBarrier()
        {
            GlNative.TextureBarrier();
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            GlNative.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            GlNative.TransformFeedbackBufferBase(xfb, index, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, long offset, int size)
        {
            GlNative.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackVaryingsBufferMode bufferMode)
        {
            GlNative.TransformFeedbackVaryings(program, count, varyings, ((uint)(bufferMode)));
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform1f(int location, float v0)
        {
            GlNative.Uniform1f(location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform2f(int location, float v0, float v1)
        {
            GlNative.Uniform2f(location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform3f(int location, float v0, float v1, float v2)
        {
            GlNative.Uniform3f(location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform4f(int location, float v0, float v1, float v2, float v3)
        {
            GlNative.Uniform4f(location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform1i(int location, int v0)
        {
            GlNative.Uniform1i(location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform2i(int location, int v0, int v1)
        {
            GlNative.Uniform2i(location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform3i(int location, int v0, int v1, int v2)
        {
            GlNative.Uniform3i(location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform4i(int location, int v0, int v1, int v2, int v3)
        {
            GlNative.Uniform4i(location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform1ui(int location, uint v0)
        {
            GlNative.Uniform1ui(location, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform2ui(int location, uint v0, uint v1)
        {
            GlNative.Uniform2ui(location, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform3ui(int location, uint v0, uint v1, uint v2)
        {
            GlNative.Uniform3ui(location, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            GlNative.Uniform4ui(location, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform1iv(int location, int count, int* value)
        {
            GlNative.Uniform1iv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform2iv(int location, int count, int* value)
        {
            GlNative.Uniform2iv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform3iv(int location, int count, int* value)
        {
            GlNative.Uniform3iv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform4iv(int location, int count, int* value)
        {
            GlNative.Uniform4iv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform1uiv(int location, int count, uint* value)
        {
            GlNative.Uniform1uiv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform2uiv(int location, int count, uint* value)
        {
            GlNative.Uniform2uiv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform3uiv(int location, int count, uint* value)
        {
            GlNative.Uniform3uiv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Uniform4uiv(int location, int count, uint* value)
        {
            GlNative.Uniform4uiv(location, count, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix2fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix2fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix3fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix3fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix2x3fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix2x3fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix3x2fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix3x2fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix2x4fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix2x4fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix4x2fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix4x2fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix3x4fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix3x4fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformMatrix4x3fv(int location, int count, bool transpose, float* value)
        {
            GlNative.UniformMatrix4x3fv(location, count, transpose, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            GlNative.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UniformSubroutinesuiv(UniformSubroutinesuivShadertype shadertype, int count, uint* indices)
        {
            GlNative.UniformSubroutinesuiv(((uint)(shadertype)), count, indices);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool UnmapBuffer(uint target)
        {
            return GlNative.UnmapBuffer(target);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static bool UnmapNamedBuffer(uint buffer)
        {
            return GlNative.UnmapNamedBuffer(buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UseProgram(uint program)
        {
            GlNative.UseProgram(program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void UseProgramStages(uint pipeline, uint stages, uint program)
        {
            GlNative.UseProgramStages(pipeline, stages, program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ValidateProgram(uint program)
        {
            GlNative.ValidateProgram(program);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ValidateProgramPipeline(uint pipeline)
        {
            GlNative.ValidateProgramPipeline(pipeline);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            GlNative.VertexArrayElementBuffer(vaobj, buffer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1f(uint index, float v0)
        {
            GlNative.VertexAttrib1f(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1s(uint index, short v0)
        {
            GlNative.VertexAttrib1s(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1d(uint index, double v0)
        {
            GlNative.VertexAttrib1d(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI1i(uint index, int v0)
        {
            GlNative.VertexAttribI1i(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI1ui(uint index, uint v0)
        {
            GlNative.VertexAttribI1ui(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2f(uint index, float v0, float v1)
        {
            GlNative.VertexAttrib2f(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2s(uint index, short v0, short v1)
        {
            GlNative.VertexAttrib2s(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2d(uint index, double v0, double v1)
        {
            GlNative.VertexAttrib2d(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI2i(uint index, int v0, int v1)
        {
            GlNative.VertexAttribI2i(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI2ui(uint index, uint v0, uint v1)
        {
            GlNative.VertexAttribI2ui(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3f(uint index, float v0, float v1, float v2)
        {
            GlNative.VertexAttrib3f(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3s(uint index, short v0, short v1, short v2)
        {
            GlNative.VertexAttrib3s(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3d(uint index, double v0, double v1, double v2)
        {
            GlNative.VertexAttrib3d(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI3i(uint index, int v0, int v1, int v2)
        {
            GlNative.VertexAttribI3i(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI3ui(uint index, uint v0, uint v1, uint v2)
        {
            GlNative.VertexAttribI3ui(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4f(uint index, float v0, float v1, float v2, float v3)
        {
            GlNative.VertexAttrib4f(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4s(uint index, short v0, short v1, short v2, short v3)
        {
            GlNative.VertexAttrib4s(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4d(uint index, double v0, double v1, double v2, double v3)
        {
            GlNative.VertexAttrib4d(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nub(uint index, byte v0, byte v1, byte v2, byte v3)
        {
            GlNative.VertexAttrib4Nub(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4i(uint index, int v0, int v1, int v2, int v3)
        {
            GlNative.VertexAttribI4i(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4ui(uint index, uint v0, uint v1, uint v2, uint v3)
        {
            GlNative.VertexAttribI4ui(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL1d(uint index, double v0)
        {
            GlNative.VertexAttribL1d(index, v0);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL2d(uint index, double v0, double v1)
        {
            GlNative.VertexAttribL2d(index, v0, v1);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL3d(uint index, double v0, double v1, double v2)
        {
            GlNative.VertexAttribL3d(index, v0, v1, v2);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL4d(uint index, double v0, double v1, double v2, double v3)
        {
            GlNative.VertexAttribL4d(index, v0, v1, v2, v3);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1fv(uint index, float* v)
        {
            GlNative.VertexAttrib1fv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1sv(uint index, short* v)
        {
            GlNative.VertexAttrib1sv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib1dv(uint index, double* v)
        {
            GlNative.VertexAttrib1dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI1iv(uint index, int* v)
        {
            GlNative.VertexAttribI1iv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI1uiv(uint index, uint* v)
        {
            GlNative.VertexAttribI1uiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2fv(uint index, float* v)
        {
            GlNative.VertexAttrib2fv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2sv(uint index, short* v)
        {
            GlNative.VertexAttrib2sv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib2dv(uint index, double* v)
        {
            GlNative.VertexAttrib2dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI2iv(uint index, int* v)
        {
            GlNative.VertexAttribI2iv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI2uiv(uint index, uint* v)
        {
            GlNative.VertexAttribI2uiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3fv(uint index, float* v)
        {
            GlNative.VertexAttrib3fv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3sv(uint index, short* v)
        {
            GlNative.VertexAttrib3sv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib3dv(uint index, double* v)
        {
            GlNative.VertexAttrib3dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI3iv(uint index, int* v)
        {
            GlNative.VertexAttribI3iv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI3uiv(uint index, uint* v)
        {
            GlNative.VertexAttribI3uiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4fv(uint index, float* v)
        {
            GlNative.VertexAttrib4fv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4sv(uint index, short* v)
        {
            GlNative.VertexAttrib4sv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4dv(uint index, double* v)
        {
            GlNative.VertexAttrib4dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4iv(uint index, int* v)
        {
            GlNative.VertexAttrib4iv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4bv(uint index, sbyte* v)
        {
            GlNative.VertexAttrib4bv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4ubv(uint index, byte* v)
        {
            GlNative.VertexAttrib4ubv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4usv(uint index, ushort* v)
        {
            GlNative.VertexAttrib4usv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4uiv(uint index, uint* v)
        {
            GlNative.VertexAttrib4uiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nbv(uint index, sbyte* v)
        {
            GlNative.VertexAttrib4Nbv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nsv(uint index, short* v)
        {
            GlNative.VertexAttrib4Nsv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Niv(uint index, int* v)
        {
            GlNative.VertexAttrib4Niv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nubv(uint index, byte* v)
        {
            GlNative.VertexAttrib4Nubv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nusv(uint index, ushort* v)
        {
            GlNative.VertexAttrib4Nusv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttrib4Nuiv(uint index, uint* v)
        {
            GlNative.VertexAttrib4Nuiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4bv(uint index, sbyte* v)
        {
            GlNative.VertexAttribI4bv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4ubv(uint index, byte* v)
        {
            GlNative.VertexAttribI4ubv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4sv(uint index, short* v)
        {
            GlNative.VertexAttribI4sv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4usv(uint index, ushort* v)
        {
            GlNative.VertexAttribI4usv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4iv(uint index, int* v)
        {
            GlNative.VertexAttribI4iv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribI4uiv(uint index, uint* v)
        {
            GlNative.VertexAttribI4uiv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL1dv(uint index, double* v)
        {
            GlNative.VertexAttribL1dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL2dv(uint index, double* v)
        {
            GlNative.VertexAttribL2dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL3dv(uint index, double* v)
        {
            GlNative.VertexAttribL3dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribL4dv(uint index, double* v)
        {
            GlNative.VertexAttribL4dv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribP1ui(uint index, VertexAttribP1uiType type, bool normalized, uint value)
        {
            GlNative.VertexAttribP1ui(index, ((uint)(type)), normalized, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribP2ui(uint index, VertexAttribP2uiType type, bool normalized, uint value)
        {
            GlNative.VertexAttribP2ui(index, ((uint)(type)), normalized, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribP3ui(uint index, VertexAttribP3uiType type, bool normalized, uint value)
        {
            GlNative.VertexAttribP3ui(index, ((uint)(type)), normalized, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribP4ui(uint index, VertexAttribP4uiType type, bool normalized, uint value)
        {
            GlNative.VertexAttribP4ui(index, ((uint)(type)), normalized, value);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            GlNative.VertexAttribBinding(attribindex, bindingindex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            GlNative.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribDivisor(uint index, uint divisor)
        {
            GlNative.VertexAttribDivisor(index, divisor);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribFormat(uint attribindex, int size, uint type, bool normalized, uint relativeoffset)
        {
            GlNative.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            GlNative.VertexAttribIFormat(attribindex, size, type, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset)
        {
            GlNative.VertexAttribLFormat(attribindex, size, type, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, uint type, bool normalized, uint relativeoffset)
        {
            GlNative.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            GlNative.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            GlNative.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, void* pointer)
        {
            GlNative.VertexAttribPointer(index, size, ((uint)(type)), normalized, stride, pointer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribIPointer(uint index, int size, VertexAttribIPointerType type, int stride, void* pointer)
        {
            GlNative.VertexAttribIPointer(index, size, ((uint)(type)), stride, pointer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexAttribLPointer(uint index, int size, VertexAttribLPointerType type, int stride, void* pointer)
        {
            GlNative.VertexAttribLPointer(index, size, ((uint)(type)), stride, pointer);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            GlNative.VertexBindingDivisor(bindingindex, divisor);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            GlNative.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void Viewport(int x, int y, int width, int height)
        {
            GlNative.Viewport(x, y, width, height);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ViewportArrayv(uint first, int count, float* v)
        {
            GlNative.ViewportArrayv(first, count, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ViewportIndexedf(uint index, float x, float y, float w, float h)
        {
            GlNative.ViewportIndexedf(index, x, y, w, h);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void ViewportIndexedfv(uint index, float* v)
        {
            GlNative.ViewportIndexedfv(index, v);
        }
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public static void WaitSync(System.IntPtr sync, uint flags, ulong timeout)
        {
            GlNative.WaitSync(sync, flags, timeout);
        }
    }
    
    public class GlConsts
    {
        
        public const uint GL_VERSION_1_0 = 1u;
        
        public const uint GL_DEPTH_BUFFER_BIT = 256u;
        
        public const uint GL_STENCIL_BUFFER_BIT = 1024u;
        
        public const uint GL_COLOR_BUFFER_BIT = 16384u;
        
        public const uint GL_FALSE = 0u;
        
        public const uint GL_TRUE = 1u;
        
        public const uint GL_POINTS = 0u;
        
        public const uint GL_LINES = 1u;
        
        public const uint GL_LINE_LOOP = 2u;
        
        public const uint GL_LINE_STRIP = 3u;
        
        public const uint GL_TRIANGLES = 4u;
        
        public const uint GL_TRIANGLE_STRIP = 5u;
        
        public const uint GL_TRIANGLE_FAN = 6u;
        
        public const uint GL_QUADS = 7u;
        
        public const uint GL_NEVER = 512u;
        
        public const uint GL_LESS = 513u;
        
        public const uint GL_EQUAL = 514u;
        
        public const uint GL_LEQUAL = 515u;
        
        public const uint GL_GREATER = 516u;
        
        public const uint GL_NOTEQUAL = 517u;
        
        public const uint GL_GEQUAL = 518u;
        
        public const uint GL_ALWAYS = 519u;
        
        public const uint GL_ZERO = 0u;
        
        public const uint GL_ONE = 1u;
        
        public const uint GL_SRC_COLOR = 768u;
        
        public const uint GL_ONE_MINUS_SRC_COLOR = 769u;
        
        public const uint GL_SRC_ALPHA = 770u;
        
        public const uint GL_ONE_MINUS_SRC_ALPHA = 771u;
        
        public const uint GL_DST_ALPHA = 772u;
        
        public const uint GL_ONE_MINUS_DST_ALPHA = 773u;
        
        public const uint GL_DST_COLOR = 774u;
        
        public const uint GL_ONE_MINUS_DST_COLOR = 775u;
        
        public const uint GL_SRC_ALPHA_SATURATE = 776u;
        
        public const uint GL_NONE = 0u;
        
        public const uint GL_FRONT_LEFT = 1024u;
        
        public const uint GL_FRONT_RIGHT = 1025u;
        
        public const uint GL_BACK_LEFT = 1026u;
        
        public const uint GL_BACK_RIGHT = 1027u;
        
        public const uint GL_FRONT = 1028u;
        
        public const uint GL_BACK = 1029u;
        
        public const uint GL_LEFT = 1030u;
        
        public const uint GL_RIGHT = 1031u;
        
        public const uint GL_FRONT_AND_BACK = 1032u;
        
        public const uint GL_NO_ERROR = 0u;
        
        public const uint GL_INVALID_ENUM = 1280u;
        
        public const uint GL_INVALID_VALUE = 1281u;
        
        public const uint GL_INVALID_OPERATION = 1282u;
        
        public const uint GL_OUT_OF_MEMORY = 1285u;
        
        public const uint GL_CW = 2304u;
        
        public const uint GL_CCW = 2305u;
        
        public const uint GL_POINT_SIZE = 2833u;
        
        public const uint GL_POINT_SIZE_RANGE = 2834u;
        
        public const uint GL_POINT_SIZE_GRANULARITY = 2835u;
        
        public const uint GL_LINE_SMOOTH = 2848u;
        
        public const uint GL_LINE_WIDTH = 2849u;
        
        public const uint GL_LINE_WIDTH_RANGE = 2850u;
        
        public const uint GL_LINE_WIDTH_GRANULARITY = 2851u;
        
        public const uint GL_POLYGON_MODE = 2880u;
        
        public const uint GL_POLYGON_SMOOTH = 2881u;
        
        public const uint GL_CULL_FACE = 2884u;
        
        public const uint GL_CULL_FACE_MODE = 2885u;
        
        public const uint GL_FRONT_FACE = 2886u;
        
        public const uint GL_DEPTH_RANGE = 2928u;
        
        public const uint GL_DEPTH_TEST = 2929u;
        
        public const uint GL_DEPTH_WRITEMASK = 2930u;
        
        public const uint GL_DEPTH_CLEAR_VALUE = 2931u;
        
        public const uint GL_DEPTH_FUNC = 2932u;
        
        public const uint GL_STENCIL_TEST = 2960u;
        
        public const uint GL_STENCIL_CLEAR_VALUE = 2961u;
        
        public const uint GL_STENCIL_FUNC = 2962u;
        
        public const uint GL_STENCIL_VALUE_MASK = 2963u;
        
        public const uint GL_STENCIL_FAIL = 2964u;
        
        public const uint GL_STENCIL_PASS_DEPTH_FAIL = 2965u;
        
        public const uint GL_STENCIL_PASS_DEPTH_PASS = 2966u;
        
        public const uint GL_STENCIL_REF = 2967u;
        
        public const uint GL_STENCIL_WRITEMASK = 2968u;
        
        public const uint GL_VIEWPORT = 2978u;
        
        public const uint GL_DITHER = 3024u;
        
        public const uint GL_BLEND_DST = 3040u;
        
        public const uint GL_BLEND_SRC = 3041u;
        
        public const uint GL_BLEND = 3042u;
        
        public const uint GL_LOGIC_OP_MODE = 3056u;
        
        public const uint GL_DRAW_BUFFER = 3073u;
        
        public const uint GL_READ_BUFFER = 3074u;
        
        public const uint GL_SCISSOR_BOX = 3088u;
        
        public const uint GL_SCISSOR_TEST = 3089u;
        
        public const uint GL_COLOR_CLEAR_VALUE = 3106u;
        
        public const uint GL_COLOR_WRITEMASK = 3107u;
        
        public const uint GL_DOUBLEBUFFER = 3122u;
        
        public const uint GL_STEREO = 3123u;
        
        public const uint GL_LINE_SMOOTH_HINT = 3154u;
        
        public const uint GL_POLYGON_SMOOTH_HINT = 3155u;
        
        public const uint GL_UNPACK_SWAP_BYTES = 3312u;
        
        public const uint GL_UNPACK_LSB_FIRST = 3313u;
        
        public const uint GL_UNPACK_ROW_LENGTH = 3314u;
        
        public const uint GL_UNPACK_SKIP_ROWS = 3315u;
        
        public const uint GL_UNPACK_SKIP_PIXELS = 3316u;
        
        public const uint GL_UNPACK_ALIGNMENT = 3317u;
        
        public const uint GL_PACK_SWAP_BYTES = 3328u;
        
        public const uint GL_PACK_LSB_FIRST = 3329u;
        
        public const uint GL_PACK_ROW_LENGTH = 3330u;
        
        public const uint GL_PACK_SKIP_ROWS = 3331u;
        
        public const uint GL_PACK_SKIP_PIXELS = 3332u;
        
        public const uint GL_PACK_ALIGNMENT = 3333u;
        
        public const uint GL_MAX_TEXTURE_SIZE = 3379u;
        
        public const uint GL_MAX_VIEWPORT_DIMS = 3386u;
        
        public const uint GL_SUBPIXEL_BITS = 3408u;
        
        public const uint GL_TEXTURE_1D = 3552u;
        
        public const uint GL_TEXTURE_2D = 3553u;
        
        public const uint GL_TEXTURE_WIDTH = 4096u;
        
        public const uint GL_TEXTURE_HEIGHT = 4097u;
        
        public const uint GL_TEXTURE_BORDER_COLOR = 4100u;
        
        public const uint GL_DONT_CARE = 4352u;
        
        public const uint GL_FASTEST = 4353u;
        
        public const uint GL_NICEST = 4354u;
        
        public const uint GL_BYTE = 5120u;
        
        public const uint GL_UNSIGNED_BYTE = 5121u;
        
        public const uint GL_SHORT = 5122u;
        
        public const uint GL_UNSIGNED_SHORT = 5123u;
        
        public const uint GL_INT = 5124u;
        
        public const uint GL_UNSIGNED_INT = 5125u;
        
        public const uint GL_FLOAT = 5126u;
        
        public const uint GL_STACK_OVERFLOW = 1283u;
        
        public const uint GL_STACK_UNDERFLOW = 1284u;
        
        public const uint GL_CLEAR = 5376u;
        
        public const uint GL_AND = 5377u;
        
        public const uint GL_AND_REVERSE = 5378u;
        
        public const uint GL_COPY = 5379u;
        
        public const uint GL_AND_INVERTED = 5380u;
        
        public const uint GL_NOOP = 5381u;
        
        public const uint GL_XOR = 5382u;
        
        public const uint GL_OR = 5383u;
        
        public const uint GL_NOR = 5384u;
        
        public const uint GL_EQUIV = 5385u;
        
        public const uint GL_INVERT = 5386u;
        
        public const uint GL_OR_REVERSE = 5387u;
        
        public const uint GL_COPY_INVERTED = 5388u;
        
        public const uint GL_OR_INVERTED = 5389u;
        
        public const uint GL_NAND = 5390u;
        
        public const uint GL_SET = 5391u;
        
        public const uint GL_TEXTURE = 5890u;
        
        public const uint GL_COLOR = 6144u;
        
        public const uint GL_DEPTH = 6145u;
        
        public const uint GL_STENCIL = 6146u;
        
        public const uint GL_STENCIL_INDEX = 6401u;
        
        public const uint GL_DEPTH_COMPONENT = 6402u;
        
        public const uint GL_RED = 6403u;
        
        public const uint GL_GREEN = 6404u;
        
        public const uint GL_BLUE = 6405u;
        
        public const uint GL_ALPHA = 6406u;
        
        public const uint GL_RGB = 6407u;
        
        public const uint GL_RGBA = 6408u;
        
        public const uint GL_POINT = 6912u;
        
        public const uint GL_LINE = 6913u;
        
        public const uint GL_FILL = 6914u;
        
        public const uint GL_KEEP = 7680u;
        
        public const uint GL_REPLACE = 7681u;
        
        public const uint GL_INCR = 7682u;
        
        public const uint GL_DECR = 7683u;
        
        public const uint GL_VENDOR = 7936u;
        
        public const uint GL_RENDERER = 7937u;
        
        public const uint GL_VERSION = 7938u;
        
        public const uint GL_EXTENSIONS = 7939u;
        
        public const uint GL_NEAREST = 9728u;
        
        public const uint GL_LINEAR = 9729u;
        
        public const uint GL_NEAREST_MIPMAP_NEAREST = 9984u;
        
        public const uint GL_LINEAR_MIPMAP_NEAREST = 9985u;
        
        public const uint GL_NEAREST_MIPMAP_LINEAR = 9986u;
        
        public const uint GL_LINEAR_MIPMAP_LINEAR = 9987u;
        
        public const uint GL_TEXTURE_MAG_FILTER = 10240u;
        
        public const uint GL_TEXTURE_MIN_FILTER = 10241u;
        
        public const uint GL_TEXTURE_WRAP_S = 10242u;
        
        public const uint GL_TEXTURE_WRAP_T = 10243u;
        
        public const uint GL_REPEAT = 10497u;
        
        public const uint GL_VERSION_1_1 = 1u;
        
        public const uint GL_COLOR_LOGIC_OP = 3058u;
        
        public const uint GL_POLYGON_OFFSET_UNITS = 10752u;
        
        public const uint GL_POLYGON_OFFSET_POINT = 10753u;
        
        public const uint GL_POLYGON_OFFSET_LINE = 10754u;
        
        public const uint GL_POLYGON_OFFSET_FILL = 32823u;
        
        public const uint GL_POLYGON_OFFSET_FACTOR = 32824u;
        
        public const uint GL_TEXTURE_BINDING_1D = 32872u;
        
        public const uint GL_TEXTURE_BINDING_2D = 32873u;
        
        public const uint GL_TEXTURE_INTERNAL_FORMAT = 4099u;
        
        public const uint GL_TEXTURE_RED_SIZE = 32860u;
        
        public const uint GL_TEXTURE_GREEN_SIZE = 32861u;
        
        public const uint GL_TEXTURE_BLUE_SIZE = 32862u;
        
        public const uint GL_TEXTURE_ALPHA_SIZE = 32863u;
        
        public const uint GL_DOUBLE = 5130u;
        
        public const uint GL_PROXY_TEXTURE_1D = 32867u;
        
        public const uint GL_PROXY_TEXTURE_2D = 32868u;
        
        public const uint GL_R3_G3_B2 = 10768u;
        
        public const uint GL_RGB4 = 32847u;
        
        public const uint GL_RGB5 = 32848u;
        
        public const uint GL_RGB8 = 32849u;
        
        public const uint GL_RGB10 = 32850u;
        
        public const uint GL_RGB12 = 32851u;
        
        public const uint GL_RGB16 = 32852u;
        
        public const uint GL_RGBA2 = 32853u;
        
        public const uint GL_RGBA4 = 32854u;
        
        public const uint GL_RGB5_A1 = 32855u;
        
        public const uint GL_RGBA8 = 32856u;
        
        public const uint GL_RGB10_A2 = 32857u;
        
        public const uint GL_RGBA12 = 32858u;
        
        public const uint GL_RGBA16 = 32859u;
        
        public const uint GL_VERTEX_ARRAY = 32884u;
        
        public const uint GL_VERSION_1_2 = 1u;
        
        public const uint GL_UNSIGNED_BYTE_3_3_2 = 32818u;
        
        public const uint GL_UNSIGNED_SHORT_4_4_4_4 = 32819u;
        
        public const uint GL_UNSIGNED_SHORT_5_5_5_1 = 32820u;
        
        public const uint GL_UNSIGNED_INT_8_8_8_8 = 32821u;
        
        public const uint GL_UNSIGNED_INT_10_10_10_2 = 32822u;
        
        public const uint GL_TEXTURE_BINDING_3D = 32874u;
        
        public const uint GL_PACK_SKIP_IMAGES = 32875u;
        
        public const uint GL_PACK_IMAGE_HEIGHT = 32876u;
        
        public const uint GL_UNPACK_SKIP_IMAGES = 32877u;
        
        public const uint GL_UNPACK_IMAGE_HEIGHT = 32878u;
        
        public const uint GL_TEXTURE_3D = 32879u;
        
        public const uint GL_PROXY_TEXTURE_3D = 32880u;
        
        public const uint GL_TEXTURE_DEPTH = 32881u;
        
        public const uint GL_TEXTURE_WRAP_R = 32882u;
        
        public const uint GL_MAX_3D_TEXTURE_SIZE = 32883u;
        
        public const uint GL_UNSIGNED_BYTE_2_3_3_REV = 33634u;
        
        public const uint GL_UNSIGNED_SHORT_5_6_5 = 33635u;
        
        public const uint GL_UNSIGNED_SHORT_5_6_5_REV = 33636u;
        
        public const uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637u;
        
        public const uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638u;
        
        public const uint GL_UNSIGNED_INT_8_8_8_8_REV = 33639u;
        
        public const uint GL_UNSIGNED_INT_2_10_10_10_REV = 33640u;
        
        public const uint GL_BGR = 32992u;
        
        public const uint GL_BGRA = 32993u;
        
        public const uint GL_MAX_ELEMENTS_VERTICES = 33000u;
        
        public const uint GL_MAX_ELEMENTS_INDICES = 33001u;
        
        public const uint GL_CLAMP_TO_EDGE = 33071u;
        
        public const uint GL_TEXTURE_MIN_LOD = 33082u;
        
        public const uint GL_TEXTURE_MAX_LOD = 33083u;
        
        public const uint GL_TEXTURE_BASE_LEVEL = 33084u;
        
        public const uint GL_TEXTURE_MAX_LEVEL = 33085u;
        
        public const uint GL_SMOOTH_POINT_SIZE_RANGE = 2834u;
        
        public const uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835u;
        
        public const uint GL_SMOOTH_LINE_WIDTH_RANGE = 2850u;
        
        public const uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851u;
        
        public const uint GL_ALIASED_LINE_WIDTH_RANGE = 33902u;
        
        public const uint GL_VERSION_1_3 = 1u;
        
        public const uint GL_TEXTURE0 = 33984u;
        
        public const uint GL_TEXTURE1 = 33985u;
        
        public const uint GL_TEXTURE2 = 33986u;
        
        public const uint GL_TEXTURE3 = 33987u;
        
        public const uint GL_TEXTURE4 = 33988u;
        
        public const uint GL_TEXTURE5 = 33989u;
        
        public const uint GL_TEXTURE6 = 33990u;
        
        public const uint GL_TEXTURE7 = 33991u;
        
        public const uint GL_TEXTURE8 = 33992u;
        
        public const uint GL_TEXTURE9 = 33993u;
        
        public const uint GL_TEXTURE10 = 33994u;
        
        public const uint GL_TEXTURE11 = 33995u;
        
        public const uint GL_TEXTURE12 = 33996u;
        
        public const uint GL_TEXTURE13 = 33997u;
        
        public const uint GL_TEXTURE14 = 33998u;
        
        public const uint GL_TEXTURE15 = 33999u;
        
        public const uint GL_TEXTURE16 = 34000u;
        
        public const uint GL_TEXTURE17 = 34001u;
        
        public const uint GL_TEXTURE18 = 34002u;
        
        public const uint GL_TEXTURE19 = 34003u;
        
        public const uint GL_TEXTURE20 = 34004u;
        
        public const uint GL_TEXTURE21 = 34005u;
        
        public const uint GL_TEXTURE22 = 34006u;
        
        public const uint GL_TEXTURE23 = 34007u;
        
        public const uint GL_TEXTURE24 = 34008u;
        
        public const uint GL_TEXTURE25 = 34009u;
        
        public const uint GL_TEXTURE26 = 34010u;
        
        public const uint GL_TEXTURE27 = 34011u;
        
        public const uint GL_TEXTURE28 = 34012u;
        
        public const uint GL_TEXTURE29 = 34013u;
        
        public const uint GL_TEXTURE30 = 34014u;
        
        public const uint GL_TEXTURE31 = 34015u;
        
        public const uint GL_ACTIVE_TEXTURE = 34016u;
        
        public const uint GL_MULTISAMPLE = 32925u;
        
        public const uint GL_SAMPLE_ALPHA_TO_COVERAGE = 32926u;
        
        public const uint GL_SAMPLE_ALPHA_TO_ONE = 32927u;
        
        public const uint GL_SAMPLE_COVERAGE = 32928u;
        
        public const uint GL_SAMPLE_BUFFERS = 32936u;
        
        public const uint GL_SAMPLES = 32937u;
        
        public const uint GL_SAMPLE_COVERAGE_VALUE = 32938u;
        
        public const uint GL_SAMPLE_COVERAGE_INVERT = 32939u;
        
        public const uint GL_TEXTURE_CUBE_MAP = 34067u;
        
        public const uint GL_TEXTURE_BINDING_CUBE_MAP = 34068u;
        
        public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069u;
        
        public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070u;
        
        public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071u;
        
        public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072u;
        
        public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073u;
        
        public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074u;
        
        public const uint GL_PROXY_TEXTURE_CUBE_MAP = 34075u;
        
        public const uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076u;
        
        public const uint GL_COMPRESSED_RGB = 34029u;
        
        public const uint GL_COMPRESSED_RGBA = 34030u;
        
        public const uint GL_TEXTURE_COMPRESSION_HINT = 34031u;
        
        public const uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464u;
        
        public const uint GL_TEXTURE_COMPRESSED = 34465u;
        
        public const uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466u;
        
        public const uint GL_COMPRESSED_TEXTURE_FORMATS = 34467u;
        
        public const uint GL_CLAMP_TO_BORDER = 33069u;
        
        public const uint GL_VERSION_1_4 = 1u;
        
        public const uint GL_BLEND_DST_RGB = 32968u;
        
        public const uint GL_BLEND_SRC_RGB = 32969u;
        
        public const uint GL_BLEND_DST_ALPHA = 32970u;
        
        public const uint GL_BLEND_SRC_ALPHA = 32971u;
        
        public const uint GL_POINT_FADE_THRESHOLD_SIZE = 33064u;
        
        public const uint GL_DEPTH_COMPONENT16 = 33189u;
        
        public const uint GL_DEPTH_COMPONENT24 = 33190u;
        
        public const uint GL_DEPTH_COMPONENT32 = 33191u;
        
        public const uint GL_MIRRORED_REPEAT = 33648u;
        
        public const uint GL_MAX_TEXTURE_LOD_BIAS = 34045u;
        
        public const uint GL_TEXTURE_LOD_BIAS = 34049u;
        
        public const uint GL_INCR_WRAP = 34055u;
        
        public const uint GL_DECR_WRAP = 34056u;
        
        public const uint GL_TEXTURE_DEPTH_SIZE = 34890u;
        
        public const uint GL_TEXTURE_COMPARE_MODE = 34892u;
        
        public const uint GL_TEXTURE_COMPARE_FUNC = 34893u;
        
        public const uint GL_BLEND_COLOR = 32773u;
        
        public const uint GL_BLEND_EQUATION = 32777u;
        
        public const uint GL_CONSTANT_COLOR = 32769u;
        
        public const uint GL_ONE_MINUS_CONSTANT_COLOR = 32770u;
        
        public const uint GL_CONSTANT_ALPHA = 32771u;
        
        public const uint GL_ONE_MINUS_CONSTANT_ALPHA = 32772u;
        
        public const uint GL_FUNC_ADD = 32774u;
        
        public const uint GL_FUNC_REVERSE_SUBTRACT = 32779u;
        
        public const uint GL_FUNC_SUBTRACT = 32778u;
        
        public const uint GL_MIN = 32775u;
        
        public const uint GL_MAX = 32776u;
        
        public const uint GL_VERSION_1_5 = 1u;
        
        public const uint GL_BUFFER_SIZE = 34660u;
        
        public const uint GL_BUFFER_USAGE = 34661u;
        
        public const uint GL_QUERY_COUNTER_BITS = 34916u;
        
        public const uint GL_CURRENT_QUERY = 34917u;
        
        public const uint GL_QUERY_RESULT = 34918u;
        
        public const uint GL_QUERY_RESULT_AVAILABLE = 34919u;
        
        public const uint GL_ARRAY_BUFFER = 34962u;
        
        public const uint GL_ELEMENT_ARRAY_BUFFER = 34963u;
        
        public const uint GL_ARRAY_BUFFER_BINDING = 34964u;
        
        public const uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975u;
        
        public const uint GL_READ_ONLY = 35000u;
        
        public const uint GL_WRITE_ONLY = 35001u;
        
        public const uint GL_READ_WRITE = 35002u;
        
        public const uint GL_BUFFER_ACCESS = 35003u;
        
        public const uint GL_BUFFER_MAPPED = 35004u;
        
        public const uint GL_BUFFER_MAP_POINTER = 35005u;
        
        public const uint GL_STREAM_DRAW = 35040u;
        
        public const uint GL_STREAM_READ = 35041u;
        
        public const uint GL_STREAM_COPY = 35042u;
        
        public const uint GL_STATIC_DRAW = 35044u;
        
        public const uint GL_STATIC_READ = 35045u;
        
        public const uint GL_STATIC_COPY = 35046u;
        
        public const uint GL_DYNAMIC_DRAW = 35048u;
        
        public const uint GL_DYNAMIC_READ = 35049u;
        
        public const uint GL_DYNAMIC_COPY = 35050u;
        
        public const uint GL_SAMPLES_PASSED = 35092u;
        
        public const uint GL_SRC1_ALPHA = 34185u;
        
        public const uint GL_VERSION_2_0 = 1u;
        
        public const uint GL_BLEND_EQUATION_RGB = 32777u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341u;
        
        public const uint GL_CURRENT_VERTEX_ATTRIB = 34342u;
        
        public const uint GL_VERTEX_PROGRAM_POINT_SIZE = 34370u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373u;
        
        public const uint GL_STENCIL_BACK_FUNC = 34816u;
        
        public const uint GL_STENCIL_BACK_FAIL = 34817u;
        
        public const uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818u;
        
        public const uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819u;
        
        public const uint GL_MAX_DRAW_BUFFERS = 34852u;
        
        public const uint GL_DRAW_BUFFER0 = 34853u;
        
        public const uint GL_DRAW_BUFFER1 = 34854u;
        
        public const uint GL_DRAW_BUFFER2 = 34855u;
        
        public const uint GL_DRAW_BUFFER3 = 34856u;
        
        public const uint GL_DRAW_BUFFER4 = 34857u;
        
        public const uint GL_DRAW_BUFFER5 = 34858u;
        
        public const uint GL_DRAW_BUFFER6 = 34859u;
        
        public const uint GL_DRAW_BUFFER7 = 34860u;
        
        public const uint GL_DRAW_BUFFER8 = 34861u;
        
        public const uint GL_DRAW_BUFFER9 = 34862u;
        
        public const uint GL_DRAW_BUFFER10 = 34863u;
        
        public const uint GL_DRAW_BUFFER11 = 34864u;
        
        public const uint GL_DRAW_BUFFER12 = 34865u;
        
        public const uint GL_DRAW_BUFFER13 = 34866u;
        
        public const uint GL_DRAW_BUFFER14 = 34867u;
        
        public const uint GL_DRAW_BUFFER15 = 34868u;
        
        public const uint GL_BLEND_EQUATION_ALPHA = 34877u;
        
        public const uint GL_MAX_VERTEX_ATTRIBS = 34921u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922u;
        
        public const uint GL_MAX_TEXTURE_IMAGE_UNITS = 34930u;
        
        public const uint GL_FRAGMENT_SHADER = 35632u;
        
        public const uint GL_VERTEX_SHADER = 35633u;
        
        public const uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657u;
        
        public const uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658u;
        
        public const uint GL_MAX_VARYING_FLOATS = 35659u;
        
        public const uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660u;
        
        public const uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661u;
        
        public const uint GL_SHADER_TYPE = 35663u;
        
        public const uint GL_FLOAT_VEC2 = 35664u;
        
        public const uint GL_FLOAT_VEC3 = 35665u;
        
        public const uint GL_FLOAT_VEC4 = 35666u;
        
        public const uint GL_INT_VEC2 = 35667u;
        
        public const uint GL_INT_VEC3 = 35668u;
        
        public const uint GL_INT_VEC4 = 35669u;
        
        public const uint GL_BOOL = 35670u;
        
        public const uint GL_BOOL_VEC2 = 35671u;
        
        public const uint GL_BOOL_VEC3 = 35672u;
        
        public const uint GL_BOOL_VEC4 = 35673u;
        
        public const uint GL_FLOAT_MAT2 = 35674u;
        
        public const uint GL_FLOAT_MAT3 = 35675u;
        
        public const uint GL_FLOAT_MAT4 = 35676u;
        
        public const uint GL_SAMPLER_1D = 35677u;
        
        public const uint GL_SAMPLER_2D = 35678u;
        
        public const uint GL_SAMPLER_3D = 35679u;
        
        public const uint GL_SAMPLER_CUBE = 35680u;
        
        public const uint GL_SAMPLER_1D_SHADOW = 35681u;
        
        public const uint GL_SAMPLER_2D_SHADOW = 35682u;
        
        public const uint GL_DELETE_STATUS = 35712u;
        
        public const uint GL_COMPILE_STATUS = 35713u;
        
        public const uint GL_LINK_STATUS = 35714u;
        
        public const uint GL_VALIDATE_STATUS = 35715u;
        
        public const uint GL_INFO_LOG_LENGTH = 35716u;
        
        public const uint GL_ATTACHED_SHADERS = 35717u;
        
        public const uint GL_ACTIVE_UNIFORMS = 35718u;
        
        public const uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719u;
        
        public const uint GL_SHADER_SOURCE_LENGTH = 35720u;
        
        public const uint GL_ACTIVE_ATTRIBUTES = 35721u;
        
        public const uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722u;
        
        public const uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723u;
        
        public const uint GL_SHADING_LANGUAGE_VERSION = 35724u;
        
        public const uint GL_CURRENT_PROGRAM = 35725u;
        
        public const uint GL_POINT_SPRITE_COORD_ORIGIN = 36000u;
        
        public const uint GL_LOWER_LEFT = 36001u;
        
        public const uint GL_UPPER_LEFT = 36002u;
        
        public const uint GL_STENCIL_BACK_REF = 36003u;
        
        public const uint GL_STENCIL_BACK_VALUE_MASK = 36004u;
        
        public const uint GL_STENCIL_BACK_WRITEMASK = 36005u;
        
        public const uint GL_VERSION_2_1 = 1u;
        
        public const uint GL_PIXEL_PACK_BUFFER = 35051u;
        
        public const uint GL_PIXEL_UNPACK_BUFFER = 35052u;
        
        public const uint GL_PIXEL_PACK_BUFFER_BINDING = 35053u;
        
        public const uint GL_PIXEL_UNPACK_BUFFER_BINDING = 35055u;
        
        public const uint GL_FLOAT_MAT2x3 = 35685u;
        
        public const uint GL_FLOAT_MAT2x4 = 35686u;
        
        public const uint GL_FLOAT_MAT3x2 = 35687u;
        
        public const uint GL_FLOAT_MAT3x4 = 35688u;
        
        public const uint GL_FLOAT_MAT4x2 = 35689u;
        
        public const uint GL_FLOAT_MAT4x3 = 35690u;
        
        public const uint GL_SRGB = 35904u;
        
        public const uint GL_SRGB8 = 35905u;
        
        public const uint GL_SRGB_ALPHA = 35906u;
        
        public const uint GL_SRGB8_ALPHA8 = 35907u;
        
        public const uint GL_COMPRESSED_SRGB = 35912u;
        
        public const uint GL_COMPRESSED_SRGB_ALPHA = 35913u;
        
        public const uint GL_VERSION_3_0 = 1u;
        
        public const uint GL_COMPARE_REF_TO_TEXTURE = 34894u;
        
        public const uint GL_CLIP_DISTANCE0 = 12288u;
        
        public const uint GL_CLIP_DISTANCE1 = 12289u;
        
        public const uint GL_CLIP_DISTANCE2 = 12290u;
        
        public const uint GL_CLIP_DISTANCE3 = 12291u;
        
        public const uint GL_CLIP_DISTANCE4 = 12292u;
        
        public const uint GL_CLIP_DISTANCE5 = 12293u;
        
        public const uint GL_CLIP_DISTANCE6 = 12294u;
        
        public const uint GL_CLIP_DISTANCE7 = 12295u;
        
        public const uint GL_MAX_CLIP_DISTANCES = 3378u;
        
        public const uint GL_MAJOR_VERSION = 33307u;
        
        public const uint GL_MINOR_VERSION = 33308u;
        
        public const uint GL_NUM_EXTENSIONS = 33309u;
        
        public const uint GL_CONTEXT_FLAGS = 33310u;
        
        public const uint GL_COMPRESSED_RED = 33317u;
        
        public const uint GL_COMPRESSED_RG = 33318u;
        
        public const uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1u;
        
        public const uint GL_RGBA32F = 34836u;
        
        public const uint GL_RGB32F = 34837u;
        
        public const uint GL_RGBA16F = 34842u;
        
        public const uint GL_RGB16F = 34843u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069u;
        
        public const uint GL_MAX_ARRAY_TEXTURE_LAYERS = 35071u;
        
        public const uint GL_MIN_PROGRAM_TEXEL_OFFSET = 35076u;
        
        public const uint GL_MAX_PROGRAM_TEXEL_OFFSET = 35077u;
        
        public const uint GL_CLAMP_READ_COLOR = 35100u;
        
        public const uint GL_FIXED_ONLY = 35101u;
        
        public const uint GL_MAX_VARYING_COMPONENTS = 35659u;
        
        public const uint GL_TEXTURE_1D_ARRAY = 35864u;
        
        public const uint GL_PROXY_TEXTURE_1D_ARRAY = 35865u;
        
        public const uint GL_TEXTURE_2D_ARRAY = 35866u;
        
        public const uint GL_PROXY_TEXTURE_2D_ARRAY = 35867u;
        
        public const uint GL_TEXTURE_BINDING_1D_ARRAY = 35868u;
        
        public const uint GL_TEXTURE_BINDING_2D_ARRAY = 35869u;
        
        public const uint GL_R11F_G11F_B10F = 35898u;
        
        public const uint GL_UNSIGNED_INT_10F_11F_11F_REV = 35899u;
        
        public const uint GL_RGB9_E5 = 35901u;
        
        public const uint GL_UNSIGNED_INT_5_9_9_9_REV = 35902u;
        
        public const uint GL_TEXTURE_SHARED_SIZE = 35903u;
        
        public const uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967u;
        
        public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968u;
        
        public const uint GL_TRANSFORM_FEEDBACK_VARYINGS = 35971u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973u;
        
        public const uint GL_PRIMITIVES_GENERATED = 35975u;
        
        public const uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976u;
        
        public const uint GL_RASTERIZER_DISCARD = 35977u;
        
        public const uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978u;
        
        public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979u;
        
        public const uint GL_INTERLEAVED_ATTRIBS = 35980u;
        
        public const uint GL_SEPARATE_ATTRIBS = 35981u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER = 35982u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983u;
        
        public const uint GL_RGBA32UI = 36208u;
        
        public const uint GL_RGB32UI = 36209u;
        
        public const uint GL_RGBA16UI = 36214u;
        
        public const uint GL_RGB16UI = 36215u;
        
        public const uint GL_RGBA8UI = 36220u;
        
        public const uint GL_RGB8UI = 36221u;
        
        public const uint GL_RGBA32I = 36226u;
        
        public const uint GL_RGB32I = 36227u;
        
        public const uint GL_RGBA16I = 36232u;
        
        public const uint GL_RGB16I = 36233u;
        
        public const uint GL_RGBA8I = 36238u;
        
        public const uint GL_RGB8I = 36239u;
        
        public const uint GL_RED_INTEGER = 36244u;
        
        public const uint GL_GREEN_INTEGER = 36245u;
        
        public const uint GL_BLUE_INTEGER = 36246u;
        
        public const uint GL_RGB_INTEGER = 36248u;
        
        public const uint GL_RGBA_INTEGER = 36249u;
        
        public const uint GL_BGR_INTEGER = 36250u;
        
        public const uint GL_BGRA_INTEGER = 36251u;
        
        public const uint GL_SAMPLER_1D_ARRAY = 36288u;
        
        public const uint GL_SAMPLER_2D_ARRAY = 36289u;
        
        public const uint GL_SAMPLER_1D_ARRAY_SHADOW = 36291u;
        
        public const uint GL_SAMPLER_2D_ARRAY_SHADOW = 36292u;
        
        public const uint GL_SAMPLER_CUBE_SHADOW = 36293u;
        
        public const uint GL_UNSIGNED_INT_VEC2 = 36294u;
        
        public const uint GL_UNSIGNED_INT_VEC3 = 36295u;
        
        public const uint GL_UNSIGNED_INT_VEC4 = 36296u;
        
        public const uint GL_INT_SAMPLER_1D = 36297u;
        
        public const uint GL_INT_SAMPLER_2D = 36298u;
        
        public const uint GL_INT_SAMPLER_3D = 36299u;
        
        public const uint GL_INT_SAMPLER_CUBE = 36300u;
        
        public const uint GL_INT_SAMPLER_1D_ARRAY = 36302u;
        
        public const uint GL_INT_SAMPLER_2D_ARRAY = 36303u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_1D = 36305u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_2D = 36306u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_3D = 36307u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_CUBE = 36308u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311u;
        
        public const uint GL_QUERY_WAIT = 36371u;
        
        public const uint GL_QUERY_NO_WAIT = 36372u;
        
        public const uint GL_QUERY_BY_REGION_WAIT = 36373u;
        
        public const uint GL_QUERY_BY_REGION_NO_WAIT = 36374u;
        
        public const uint GL_BUFFER_ACCESS_FLAGS = 37151u;
        
        public const uint GL_BUFFER_MAP_LENGTH = 37152u;
        
        public const uint GL_BUFFER_MAP_OFFSET = 37153u;
        
        public const uint GL_DEPTH_COMPONENT32F = 36012u;
        
        public const uint GL_DEPTH32F_STENCIL8 = 36013u;
        
        public const uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269u;
        
        public const uint GL_INVALID_FRAMEBUFFER_OPERATION = 1286u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT = 33304u;
        
        public const uint GL_FRAMEBUFFER_UNDEFINED = 33305u;
        
        public const uint GL_DEPTH_STENCIL_ATTACHMENT = 33306u;
        
        public const uint GL_MAX_RENDERBUFFER_SIZE = 34024u;
        
        public const uint GL_DEPTH_STENCIL = 34041u;
        
        public const uint GL_UNSIGNED_INT_24_8 = 34042u;
        
        public const uint GL_DEPTH24_STENCIL8 = 35056u;
        
        public const uint GL_TEXTURE_STENCIL_SIZE = 35057u;
        
        public const uint GL_TEXTURE_RED_TYPE = 35856u;
        
        public const uint GL_TEXTURE_GREEN_TYPE = 35857u;
        
        public const uint GL_TEXTURE_BLUE_TYPE = 35858u;
        
        public const uint GL_TEXTURE_ALPHA_TYPE = 35859u;
        
        public const uint GL_TEXTURE_DEPTH_TYPE = 35862u;
        
        public const uint GL_UNSIGNED_NORMALIZED = 35863u;
        
        public const uint GL_FRAMEBUFFER_BINDING = 36006u;
        
        public const uint GL_DRAW_FRAMEBUFFER_BINDING = 36006u;
        
        public const uint GL_RENDERBUFFER_BINDING = 36007u;
        
        public const uint GL_READ_FRAMEBUFFER = 36008u;
        
        public const uint GL_DRAW_FRAMEBUFFER = 36009u;
        
        public const uint GL_READ_FRAMEBUFFER_BINDING = 36010u;
        
        public const uint GL_RENDERBUFFER_SAMPLES = 36011u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052u;
        
        public const uint GL_FRAMEBUFFER_COMPLETE = 36053u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060u;
        
        public const uint GL_FRAMEBUFFER_UNSUPPORTED = 36061u;
        
        public const uint GL_MAX_COLOR_ATTACHMENTS = 36063u;
        
        public const uint GL_COLOR_ATTACHMENT0 = 36064u;
        
        public const uint GL_COLOR_ATTACHMENT1 = 36065u;
        
        public const uint GL_COLOR_ATTACHMENT2 = 36066u;
        
        public const uint GL_COLOR_ATTACHMENT3 = 36067u;
        
        public const uint GL_COLOR_ATTACHMENT4 = 36068u;
        
        public const uint GL_COLOR_ATTACHMENT5 = 36069u;
        
        public const uint GL_COLOR_ATTACHMENT6 = 36070u;
        
        public const uint GL_COLOR_ATTACHMENT7 = 36071u;
        
        public const uint GL_COLOR_ATTACHMENT8 = 36072u;
        
        public const uint GL_COLOR_ATTACHMENT9 = 36073u;
        
        public const uint GL_COLOR_ATTACHMENT10 = 36074u;
        
        public const uint GL_COLOR_ATTACHMENT11 = 36075u;
        
        public const uint GL_COLOR_ATTACHMENT12 = 36076u;
        
        public const uint GL_COLOR_ATTACHMENT13 = 36077u;
        
        public const uint GL_COLOR_ATTACHMENT14 = 36078u;
        
        public const uint GL_COLOR_ATTACHMENT15 = 36079u;
        
        public const uint GL_COLOR_ATTACHMENT16 = 36080u;
        
        public const uint GL_COLOR_ATTACHMENT17 = 36081u;
        
        public const uint GL_COLOR_ATTACHMENT18 = 36082u;
        
        public const uint GL_COLOR_ATTACHMENT19 = 36083u;
        
        public const uint GL_COLOR_ATTACHMENT20 = 36084u;
        
        public const uint GL_COLOR_ATTACHMENT21 = 36085u;
        
        public const uint GL_COLOR_ATTACHMENT22 = 36086u;
        
        public const uint GL_COLOR_ATTACHMENT23 = 36087u;
        
        public const uint GL_COLOR_ATTACHMENT24 = 36088u;
        
        public const uint GL_COLOR_ATTACHMENT25 = 36089u;
        
        public const uint GL_COLOR_ATTACHMENT26 = 36090u;
        
        public const uint GL_COLOR_ATTACHMENT27 = 36091u;
        
        public const uint GL_COLOR_ATTACHMENT28 = 36092u;
        
        public const uint GL_COLOR_ATTACHMENT29 = 36093u;
        
        public const uint GL_COLOR_ATTACHMENT30 = 36094u;
        
        public const uint GL_COLOR_ATTACHMENT31 = 36095u;
        
        public const uint GL_DEPTH_ATTACHMENT = 36096u;
        
        public const uint GL_STENCIL_ATTACHMENT = 36128u;
        
        public const uint GL_FRAMEBUFFER = 36160u;
        
        public const uint GL_RENDERBUFFER = 36161u;
        
        public const uint GL_RENDERBUFFER_WIDTH = 36162u;
        
        public const uint GL_RENDERBUFFER_HEIGHT = 36163u;
        
        public const uint GL_RENDERBUFFER_INTERNAL_FORMAT = 36164u;
        
        public const uint GL_STENCIL_INDEX1 = 36166u;
        
        public const uint GL_STENCIL_INDEX4 = 36167u;
        
        public const uint GL_STENCIL_INDEX8 = 36168u;
        
        public const uint GL_STENCIL_INDEX16 = 36169u;
        
        public const uint GL_RENDERBUFFER_RED_SIZE = 36176u;
        
        public const uint GL_RENDERBUFFER_GREEN_SIZE = 36177u;
        
        public const uint GL_RENDERBUFFER_BLUE_SIZE = 36178u;
        
        public const uint GL_RENDERBUFFER_ALPHA_SIZE = 36179u;
        
        public const uint GL_RENDERBUFFER_DEPTH_SIZE = 36180u;
        
        public const uint GL_RENDERBUFFER_STENCIL_SIZE = 36181u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182u;
        
        public const uint GL_MAX_SAMPLES = 36183u;
        
        public const uint GL_FRAMEBUFFER_SRGB = 36281u;
        
        public const uint GL_HALF_FLOAT = 5131u;
        
        public const uint GL_MAP_READ_BIT = 1u;
        
        public const uint GL_MAP_WRITE_BIT = 2u;
        
        public const uint GL_MAP_INVALIDATE_RANGE_BIT = 4u;
        
        public const uint GL_MAP_INVALIDATE_BUFFER_BIT = 8u;
        
        public const uint GL_MAP_FLUSH_EXPLICIT_BIT = 16u;
        
        public const uint GL_MAP_UNSYNCHRONIZED_BIT = 32u;
        
        public const uint GL_COMPRESSED_RED_RGTC1 = 36283u;
        
        public const uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284u;
        
        public const uint GL_COMPRESSED_RG_RGTC2 = 36285u;
        
        public const uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286u;
        
        public const uint GL_RG = 33319u;
        
        public const uint GL_RG_INTEGER = 33320u;
        
        public const uint GL_R8 = 33321u;
        
        public const uint GL_R16 = 33322u;
        
        public const uint GL_RG8 = 33323u;
        
        public const uint GL_RG16 = 33324u;
        
        public const uint GL_R16F = 33325u;
        
        public const uint GL_R32F = 33326u;
        
        public const uint GL_RG16F = 33327u;
        
        public const uint GL_RG32F = 33328u;
        
        public const uint GL_R8I = 33329u;
        
        public const uint GL_R8UI = 33330u;
        
        public const uint GL_R16I = 33331u;
        
        public const uint GL_R16UI = 33332u;
        
        public const uint GL_R32I = 33333u;
        
        public const uint GL_R32UI = 33334u;
        
        public const uint GL_RG8I = 33335u;
        
        public const uint GL_RG8UI = 33336u;
        
        public const uint GL_RG16I = 33337u;
        
        public const uint GL_RG16UI = 33338u;
        
        public const uint GL_RG32I = 33339u;
        
        public const uint GL_RG32UI = 33340u;
        
        public const uint GL_VERTEX_ARRAY_BINDING = 34229u;
        
        public const uint GL_VERSION_3_1 = 1u;
        
        public const uint GL_SAMPLER_2D_RECT = 35683u;
        
        public const uint GL_SAMPLER_2D_RECT_SHADOW = 35684u;
        
        public const uint GL_SAMPLER_BUFFER = 36290u;
        
        public const uint GL_INT_SAMPLER_2D_RECT = 36301u;
        
        public const uint GL_INT_SAMPLER_BUFFER = 36304u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312u;
        
        public const uint GL_TEXTURE_BUFFER = 35882u;
        
        public const uint GL_MAX_TEXTURE_BUFFER_SIZE = 35883u;
        
        public const uint GL_TEXTURE_BINDING_BUFFER = 35884u;
        
        public const uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885u;
        
        public const uint GL_TEXTURE_RECTANGLE = 34037u;
        
        public const uint GL_TEXTURE_BINDING_RECTANGLE = 34038u;
        
        public const uint GL_PROXY_TEXTURE_RECTANGLE = 34039u;
        
        public const uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040u;
        
        public const uint GL_R8_SNORM = 36756u;
        
        public const uint GL_RG8_SNORM = 36757u;
        
        public const uint GL_RGB8_SNORM = 36758u;
        
        public const uint GL_RGBA8_SNORM = 36759u;
        
        public const uint GL_R16_SNORM = 36760u;
        
        public const uint GL_RG16_SNORM = 36761u;
        
        public const uint GL_RGB16_SNORM = 36762u;
        
        public const uint GL_RGBA16_SNORM = 36763u;
        
        public const uint GL_SIGNED_NORMALIZED = 36764u;
        
        public const uint GL_PRIMITIVE_RESTART = 36765u;
        
        public const uint GL_PRIMITIVE_RESTART_INDEX = 36766u;
        
        public const uint GL_COPY_READ_BUFFER = 36662u;
        
        public const uint GL_COPY_WRITE_BUFFER = 36663u;
        
        public const uint GL_UNIFORM_BUFFER = 35345u;
        
        public const uint GL_UNIFORM_BUFFER_BINDING = 35368u;
        
        public const uint GL_UNIFORM_BUFFER_START = 35369u;
        
        public const uint GL_UNIFORM_BUFFER_SIZE = 35370u;
        
        public const uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371u;
        
        public const uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372u;
        
        public const uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373u;
        
        public const uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374u;
        
        public const uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375u;
        
        public const uint GL_MAX_UNIFORM_BLOCK_SIZE = 35376u;
        
        public const uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377u;
        
        public const uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378u;
        
        public const uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379u;
        
        public const uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380u;
        
        public const uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381u;
        
        public const uint GL_ACTIVE_UNIFORM_BLOCKS = 35382u;
        
        public const uint GL_UNIFORM_TYPE = 35383u;
        
        public const uint GL_UNIFORM_SIZE = 35384u;
        
        public const uint GL_UNIFORM_NAME_LENGTH = 35385u;
        
        public const uint GL_UNIFORM_BLOCK_INDEX = 35386u;
        
        public const uint GL_UNIFORM_OFFSET = 35387u;
        
        public const uint GL_UNIFORM_ARRAY_STRIDE = 35388u;
        
        public const uint GL_UNIFORM_MATRIX_STRIDE = 35389u;
        
        public const uint GL_UNIFORM_IS_ROW_MAJOR = 35390u;
        
        public const uint GL_UNIFORM_BLOCK_BINDING = 35391u;
        
        public const uint GL_UNIFORM_BLOCK_DATA_SIZE = 35392u;
        
        public const uint GL_UNIFORM_BLOCK_NAME_LENGTH = 35393u;
        
        public const uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394u;
        
        public const uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398u;
        
        public const uint GL_VERSION_3_2 = 1u;
        
        public const uint GL_CONTEXT_CORE_PROFILE_BIT = 1u;
        
        public const uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2u;
        
        public const uint GL_LINES_ADJACENCY = 10u;
        
        public const uint GL_LINE_STRIP_ADJACENCY = 11u;
        
        public const uint GL_TRIANGLES_ADJACENCY = 12u;
        
        public const uint GL_TRIANGLE_STRIP_ADJACENCY = 13u;
        
        public const uint GL_PROGRAM_POINT_SIZE = 34370u;
        
        public const uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264u;
        
        public const uint GL_GEOMETRY_SHADER = 36313u;
        
        public const uint GL_GEOMETRY_VERTICES_OUT = 35094u;
        
        public const uint GL_GEOMETRY_INPUT_TYPE = 35095u;
        
        public const uint GL_GEOMETRY_OUTPUT_TYPE = 35096u;
        
        public const uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319u;
        
        public const uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320u;
        
        public const uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321u;
        
        public const uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154u;
        
        public const uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155u;
        
        public const uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156u;
        
        public const uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157u;
        
        public const uint GL_CONTEXT_PROFILE_MASK = 37158u;
        
        public const uint GL_DEPTH_CLAMP = 34383u;
        
        public const uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428u;
        
        public const uint GL_FIRST_VERTEX_CONVENTION = 36429u;
        
        public const uint GL_LAST_VERTEX_CONVENTION = 36430u;
        
        public const uint GL_PROVOKING_VERTEX = 36431u;
        
        public const uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895u;
        
        public const uint GL_MAX_SERVER_WAIT_TIMEOUT = 37137u;
        
        public const uint GL_OBJECT_TYPE = 37138u;
        
        public const uint GL_SYNC_CONDITION = 37139u;
        
        public const uint GL_SYNC_STATUS = 37140u;
        
        public const uint GL_SYNC_FLAGS = 37141u;
        
        public const uint GL_SYNC_FENCE = 37142u;
        
        public const uint GL_SYNC_GPU_COMMANDS_COMPLETE = 37143u;
        
        public const uint GL_UNSIGNALED = 37144u;
        
        public const uint GL_SIGNALED = 37145u;
        
        public const uint GL_ALREADY_SIGNALED = 37146u;
        
        public const uint GL_TIMEOUT_EXPIRED = 37147u;
        
        public const uint GL_CONDITION_SATISFIED = 37148u;
        
        public const uint GL_WAIT_FAILED = 37149u;
        
        public const uint GL_SYNC_FLUSH_COMMANDS_BIT = 1u;
        
        public const uint GL_SAMPLE_POSITION = 36432u;
        
        public const uint GL_SAMPLE_MASK = 36433u;
        
        public const uint GL_SAMPLE_MASK_VALUE = 36434u;
        
        public const uint GL_MAX_SAMPLE_MASK_WORDS = 36441u;
        
        public const uint GL_TEXTURE_2D_MULTISAMPLE = 37120u;
        
        public const uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121u;
        
        public const uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122u;
        
        public const uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123u;
        
        public const uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124u;
        
        public const uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125u;
        
        public const uint GL_TEXTURE_SAMPLES = 37126u;
        
        public const uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127u;
        
        public const uint GL_SAMPLER_2D_MULTISAMPLE = 37128u;
        
        public const uint GL_INT_SAMPLER_2D_MULTISAMPLE = 37129u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130u;
        
        public const uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131u;
        
        public const uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133u;
        
        public const uint GL_MAX_COLOR_TEXTURE_SAMPLES = 37134u;
        
        public const uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135u;
        
        public const uint GL_MAX_INTEGER_SAMPLES = 37136u;
        
        public const uint GL_VERSION_3_3 = 1u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070u;
        
        public const uint GL_SRC1_COLOR = 35065u;
        
        public const uint GL_ONE_MINUS_SRC1_COLOR = 35066u;
        
        public const uint GL_ONE_MINUS_SRC1_ALPHA = 35067u;
        
        public const uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068u;
        
        public const uint GL_ANY_SAMPLES_PASSED = 35887u;
        
        public const uint GL_SAMPLER_BINDING = 35097u;
        
        public const uint GL_RGB10_A2UI = 36975u;
        
        public const uint GL_TEXTURE_SWIZZLE_R = 36418u;
        
        public const uint GL_TEXTURE_SWIZZLE_G = 36419u;
        
        public const uint GL_TEXTURE_SWIZZLE_B = 36420u;
        
        public const uint GL_TEXTURE_SWIZZLE_A = 36421u;
        
        public const uint GL_TEXTURE_SWIZZLE_RGBA = 36422u;
        
        public const uint GL_TIME_ELAPSED = 35007u;
        
        public const uint GL_TIMESTAMP = 36392u;
        
        public const uint GL_INT_2_10_10_10_REV = 36255u;
        
        public const uint GL_VERSION_4_0 = 1u;
        
        public const uint GL_SAMPLE_SHADING = 35894u;
        
        public const uint GL_MIN_SAMPLE_SHADING_VALUE = 35895u;
        
        public const uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446u;
        
        public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447u;
        
        public const uint GL_TEXTURE_CUBE_MAP_ARRAY = 36873u;
        
        public const uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874u;
        
        public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875u;
        
        public const uint GL_SAMPLER_CUBE_MAP_ARRAY = 36876u;
        
        public const uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877u;
        
        public const uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879u;
        
        public const uint GL_DRAW_INDIRECT_BUFFER = 36671u;
        
        public const uint GL_DRAW_INDIRECT_BUFFER_BINDING = 36675u;
        
        public const uint GL_GEOMETRY_SHADER_INVOCATIONS = 34943u;
        
        public const uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442u;
        
        public const uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443u;
        
        public const uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444u;
        
        public const uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445u;
        
        public const uint GL_MAX_VERTEX_STREAMS = 36465u;
        
        public const uint GL_DOUBLE_VEC2 = 36860u;
        
        public const uint GL_DOUBLE_VEC3 = 36861u;
        
        public const uint GL_DOUBLE_VEC4 = 36862u;
        
        public const uint GL_DOUBLE_MAT2 = 36678u;
        
        public const uint GL_DOUBLE_MAT3 = 36679u;
        
        public const uint GL_DOUBLE_MAT4 = 36680u;
        
        public const uint GL_DOUBLE_MAT2x3 = 36681u;
        
        public const uint GL_DOUBLE_MAT2x4 = 36682u;
        
        public const uint GL_DOUBLE_MAT3x2 = 36683u;
        
        public const uint GL_DOUBLE_MAT3x4 = 36684u;
        
        public const uint GL_DOUBLE_MAT4x2 = 36685u;
        
        public const uint GL_DOUBLE_MAT4x3 = 36686u;
        
        public const uint GL_ACTIVE_SUBROUTINES = 36325u;
        
        public const uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326u;
        
        public const uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423u;
        
        public const uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424u;
        
        public const uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425u;
        
        public const uint GL_MAX_SUBROUTINES = 36327u;
        
        public const uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328u;
        
        public const uint GL_NUM_COMPATIBLE_SUBROUTINES = 36426u;
        
        public const uint GL_COMPATIBLE_SUBROUTINES = 36427u;
        
        public const uint GL_PATCHES = 14u;
        
        public const uint GL_PATCH_VERTICES = 36466u;
        
        public const uint GL_PATCH_DEFAULT_INNER_LEVEL = 36467u;
        
        public const uint GL_PATCH_DEFAULT_OUTER_LEVEL = 36468u;
        
        public const uint GL_TESS_CONTROL_OUTPUT_VERTICES = 36469u;
        
        public const uint GL_TESS_GEN_MODE = 36470u;
        
        public const uint GL_TESS_GEN_SPACING = 36471u;
        
        public const uint GL_TESS_GEN_VERTEX_ORDER = 36472u;
        
        public const uint GL_TESS_GEN_POINT_MODE = 36473u;
        
        public const uint GL_ISOLINES = 36474u;
        
        public const uint GL_FRACTIONAL_ODD = 36475u;
        
        public const uint GL_FRACTIONAL_EVEN = 36476u;
        
        public const uint GL_MAX_PATCH_VERTICES = 36477u;
        
        public const uint GL_MAX_TESS_GEN_LEVEL = 36478u;
        
        public const uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479u;
        
        public const uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480u;
        
        public const uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481u;
        
        public const uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482u;
        
        public const uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483u;
        
        public const uint GL_MAX_TESS_PATCH_COMPONENTS = 36484u;
        
        public const uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485u;
        
        public const uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486u;
        
        public const uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489u;
        
        public const uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490u;
        
        public const uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924u;
        
        public const uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925u;
        
        public const uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382u;
        
        public const uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033u;
        
        public const uint GL_TESS_EVALUATION_SHADER = 36487u;
        
        public const uint GL_TESS_CONTROL_SHADER = 36488u;
        
        public const uint GL_TRANSFORM_FEEDBACK = 36386u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BINDING = 36389u;
        
        public const uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464u;
        
        public const uint GL_VERSION_4_1 = 1u;
        
        public const uint GL_FIXED = 5132u;
        
        public const uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738u;
        
        public const uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739u;
        
        public const uint GL_LOW_FLOAT = 36336u;
        
        public const uint GL_MEDIUM_FLOAT = 36337u;
        
        public const uint GL_HIGH_FLOAT = 36338u;
        
        public const uint GL_LOW_INT = 36339u;
        
        public const uint GL_MEDIUM_INT = 36340u;
        
        public const uint GL_HIGH_INT = 36341u;
        
        public const uint GL_SHADER_COMPILER = 36346u;
        
        public const uint GL_SHADER_BINARY_FORMATS = 36344u;
        
        public const uint GL_NUM_SHADER_BINARY_FORMATS = 36345u;
        
        public const uint GL_MAX_VERTEX_UNIFORM_VECTORS = 36347u;
        
        public const uint GL_MAX_VARYING_VECTORS = 36348u;
        
        public const uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349u;
        
        public const uint GL_RGB565 = 36194u;
        
        public const uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367u;
        
        public const uint GL_PROGRAM_BINARY_LENGTH = 34625u;
        
        public const uint GL_NUM_PROGRAM_BINARY_FORMATS = 34814u;
        
        public const uint GL_PROGRAM_BINARY_FORMATS = 34815u;
        
        public const uint GL_VERTEX_SHADER_BIT = 1u;
        
        public const uint GL_FRAGMENT_SHADER_BIT = 2u;
        
        public const uint GL_GEOMETRY_SHADER_BIT = 4u;
        
        public const uint GL_TESS_CONTROL_SHADER_BIT = 8u;
        
        public const uint GL_TESS_EVALUATION_SHADER_BIT = 16u;
        
        public const uint GL_ALL_SHADER_BITS = 4294967295u;
        
        public const uint GL_PROGRAM_SEPARABLE = 33368u;
        
        public const uint GL_ACTIVE_PROGRAM = 33369u;
        
        public const uint GL_PROGRAM_PIPELINE_BINDING = 33370u;
        
        public const uint GL_MAX_VIEWPORTS = 33371u;
        
        public const uint GL_VIEWPORT_SUBPIXEL_BITS = 33372u;
        
        public const uint GL_VIEWPORT_BOUNDS_RANGE = 33373u;
        
        public const uint GL_LAYER_PROVOKING_VERTEX = 33374u;
        
        public const uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375u;
        
        public const uint GL_UNDEFINED_VERTEX = 33376u;
        
        public const uint GL_VERSION_4_2 = 1u;
        
        public const uint GL_COPY_READ_BUFFER_BINDING = 36662u;
        
        public const uint GL_COPY_WRITE_BUFFER_BINDING = 36663u;
        
        public const uint GL_TRANSFORM_FEEDBACK_ACTIVE = 36388u;
        
        public const uint GL_TRANSFORM_FEEDBACK_PAUSED = 36387u;
        
        public const uint GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159u;
        
        public const uint GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160u;
        
        public const uint GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161u;
        
        public const uint GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162u;
        
        public const uint GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163u;
        
        public const uint GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164u;
        
        public const uint GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165u;
        
        public const uint GL_PACK_COMPRESSED_BLOCK_SIZE = 37166u;
        
        public const uint GL_NUM_SAMPLE_COUNTS = 37760u;
        
        public const uint GL_MIN_MAP_BUFFER_ALIGNMENT = 37052u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER = 37568u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_START = 37570u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579u;
        
        public const uint GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580u;
        
        public const uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581u;
        
        public const uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582u;
        
        public const uint GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583u;
        
        public const uint GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584u;
        
        public const uint GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585u;
        
        public const uint GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586u;
        
        public const uint GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587u;
        
        public const uint GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588u;
        
        public const uint GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589u;
        
        public const uint GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590u;
        
        public const uint GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591u;
        
        public const uint GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592u;
        
        public const uint GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596u;
        
        public const uint GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593u;
        
        public const uint GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594u;
        
        public const uint GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1u;
        
        public const uint GL_ELEMENT_ARRAY_BARRIER_BIT = 2u;
        
        public const uint GL_UNIFORM_BARRIER_BIT = 4u;
        
        public const uint GL_TEXTURE_FETCH_BARRIER_BIT = 8u;
        
        public const uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32u;
        
        public const uint GL_COMMAND_BARRIER_BIT = 64u;
        
        public const uint GL_PIXEL_BUFFER_BARRIER_BIT = 128u;
        
        public const uint GL_TEXTURE_UPDATE_BARRIER_BIT = 256u;
        
        public const uint GL_BUFFER_UPDATE_BARRIER_BIT = 512u;
        
        public const uint GL_FRAMEBUFFER_BARRIER_BIT = 1024u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048u;
        
        public const uint GL_ATOMIC_COUNTER_BARRIER_BIT = 4096u;
        
        public const uint GL_ALL_BARRIER_BITS = 4294967295u;
        
        public const uint GL_MAX_IMAGE_UNITS = 36664u;
        
        public const uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665u;
        
        public const uint GL_IMAGE_BINDING_NAME = 36666u;
        
        public const uint GL_IMAGE_BINDING_LEVEL = 36667u;
        
        public const uint GL_IMAGE_BINDING_LAYERED = 36668u;
        
        public const uint GL_IMAGE_BINDING_LAYER = 36669u;
        
        public const uint GL_IMAGE_BINDING_ACCESS = 36670u;
        
        public const uint GL_IMAGE_1D = 36940u;
        
        public const uint GL_IMAGE_2D = 36941u;
        
        public const uint GL_IMAGE_3D = 36942u;
        
        public const uint GL_IMAGE_2D_RECT = 36943u;
        
        public const uint GL_IMAGE_CUBE = 36944u;
        
        public const uint GL_IMAGE_BUFFER = 36945u;
        
        public const uint GL_IMAGE_1D_ARRAY = 36946u;
        
        public const uint GL_IMAGE_2D_ARRAY = 36947u;
        
        public const uint GL_IMAGE_CUBE_MAP_ARRAY = 36948u;
        
        public const uint GL_IMAGE_2D_MULTISAMPLE = 36949u;
        
        public const uint GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950u;
        
        public const uint GL_INT_IMAGE_1D = 36951u;
        
        public const uint GL_INT_IMAGE_2D = 36952u;
        
        public const uint GL_INT_IMAGE_3D = 36953u;
        
        public const uint GL_INT_IMAGE_2D_RECT = 36954u;
        
        public const uint GL_INT_IMAGE_CUBE = 36955u;
        
        public const uint GL_INT_IMAGE_BUFFER = 36956u;
        
        public const uint GL_INT_IMAGE_1D_ARRAY = 36957u;
        
        public const uint GL_INT_IMAGE_2D_ARRAY = 36958u;
        
        public const uint GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959u;
        
        public const uint GL_INT_IMAGE_2D_MULTISAMPLE = 36960u;
        
        public const uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_1D = 36962u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_2D = 36963u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_3D = 36964u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_CUBE = 36966u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_BUFFER = 36967u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971u;
        
        public const uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972u;
        
        public const uint GL_MAX_IMAGE_SAMPLES = 36973u;
        
        public const uint GL_IMAGE_BINDING_FORMAT = 36974u;
        
        public const uint GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063u;
        
        public const uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064u;
        
        public const uint GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065u;
        
        public const uint GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066u;
        
        public const uint GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067u;
        
        public const uint GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068u;
        
        public const uint GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069u;
        
        public const uint GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070u;
        
        public const uint GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071u;
        
        public const uint GL_COMPRESSED_RGBA_BPTC_UNORM = 36492u;
        
        public const uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493u;
        
        public const uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494u;
        
        public const uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495u;
        
        public const uint GL_TEXTURE_IMMUTABLE_FORMAT = 37167u;
        
        public const uint GL_VERSION_4_3 = 1u;
        
        public const uint GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_LONG = 34638u;
        
        public const uint GL_COMPRESSED_RGB8_ETC2 = 37492u;
        
        public const uint GL_COMPRESSED_SRGB8_ETC2 = 37493u;
        
        public const uint GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494u;
        
        public const uint GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495u;
        
        public const uint GL_COMPRESSED_RGBA8_ETC2_EAC = 37496u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497u;
        
        public const uint GL_COMPRESSED_R11_EAC = 37488u;
        
        public const uint GL_COMPRESSED_SIGNED_R11_EAC = 37489u;
        
        public const uint GL_COMPRESSED_RG11_EAC = 37490u;
        
        public const uint GL_COMPRESSED_SIGNED_RG11_EAC = 37491u;
        
        public const uint GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201u;
        
        public const uint GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202u;
        
        public const uint GL_MAX_ELEMENT_INDEX = 36203u;
        
        public const uint GL_COMPUTE_SHADER = 37305u;
        
        public const uint GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307u;
        
        public const uint GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308u;
        
        public const uint GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309u;
        
        public const uint GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378u;
        
        public const uint GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379u;
        
        public const uint GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380u;
        
        public const uint GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381u;
        
        public const uint GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382u;
        
        public const uint GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099u;
        
        public const uint GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310u;
        
        public const uint GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311u;
        
        public const uint GL_COMPUTE_WORK_GROUP_SIZE = 33383u;
        
        public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101u;
        
        public const uint GL_DISPATCH_INDIRECT_BUFFER = 37102u;
        
        public const uint GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103u;
        
        public const uint GL_COMPUTE_SHADER_BIT = 32u;
        
        public const uint GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346u;
        
        public const uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347u;
        
        public const uint GL_DEBUG_CALLBACK_FUNCTION = 33348u;
        
        public const uint GL_DEBUG_CALLBACK_USER_PARAM = 33349u;
        
        public const uint GL_DEBUG_SOURCE_API = 33350u;
        
        public const uint GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351u;
        
        public const uint GL_DEBUG_SOURCE_SHADER_COMPILER = 33352u;
        
        public const uint GL_DEBUG_SOURCE_THIRD_PARTY = 33353u;
        
        public const uint GL_DEBUG_SOURCE_APPLICATION = 33354u;
        
        public const uint GL_DEBUG_SOURCE_OTHER = 33355u;
        
        public const uint GL_DEBUG_TYPE_ERROR = 33356u;
        
        public const uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357u;
        
        public const uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358u;
        
        public const uint GL_DEBUG_TYPE_PORTABILITY = 33359u;
        
        public const uint GL_DEBUG_TYPE_PERFORMANCE = 33360u;
        
        public const uint GL_DEBUG_TYPE_OTHER = 33361u;
        
        public const uint GL_MAX_DEBUG_MESSAGE_LENGTH = 37187u;
        
        public const uint GL_MAX_DEBUG_LOGGED_MESSAGES = 37188u;
        
        public const uint GL_DEBUG_LOGGED_MESSAGES = 37189u;
        
        public const uint GL_DEBUG_SEVERITY_HIGH = 37190u;
        
        public const uint GL_DEBUG_SEVERITY_MEDIUM = 37191u;
        
        public const uint GL_DEBUG_SEVERITY_LOW = 37192u;
        
        public const uint GL_DEBUG_TYPE_MARKER = 33384u;
        
        public const uint GL_DEBUG_TYPE_PUSH_GROUP = 33385u;
        
        public const uint GL_DEBUG_TYPE_POP_GROUP = 33386u;
        
        public const uint GL_DEBUG_SEVERITY_NOTIFICATION = 33387u;
        
        public const uint GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388u;
        
        public const uint GL_DEBUG_GROUP_STACK_DEPTH = 33389u;
        
        public const uint GL_BUFFER = 33504u;
        
        public const uint GL_SHADER = 33505u;
        
        public const uint GL_PROGRAM = 33506u;
        
        public const uint GL_QUERY = 33507u;
        
        public const uint GL_PROGRAM_PIPELINE = 33508u;
        
        public const uint GL_SAMPLER = 33510u;
        
        public const uint GL_MAX_LABEL_LENGTH = 33512u;
        
        public const uint GL_DEBUG_OUTPUT = 37600u;
        
        public const uint GL_CONTEXT_FLAG_DEBUG_BIT = 2u;
        
        public const uint GL_MAX_UNIFORM_LOCATIONS = 33390u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651u;
        
        public const uint GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652u;
        
        public const uint GL_MAX_FRAMEBUFFER_WIDTH = 37653u;
        
        public const uint GL_MAX_FRAMEBUFFER_HEIGHT = 37654u;
        
        public const uint GL_MAX_FRAMEBUFFER_LAYERS = 37655u;
        
        public const uint GL_MAX_FRAMEBUFFER_SAMPLES = 37656u;
        
        public const uint GL_INTERNALFORMAT_SUPPORTED = 33391u;
        
        public const uint GL_INTERNALFORMAT_PREFERRED = 33392u;
        
        public const uint GL_INTERNALFORMAT_RED_SIZE = 33393u;
        
        public const uint GL_INTERNALFORMAT_GREEN_SIZE = 33394u;
        
        public const uint GL_INTERNALFORMAT_BLUE_SIZE = 33395u;
        
        public const uint GL_INTERNALFORMAT_ALPHA_SIZE = 33396u;
        
        public const uint GL_INTERNALFORMAT_DEPTH_SIZE = 33397u;
        
        public const uint GL_INTERNALFORMAT_STENCIL_SIZE = 33398u;
        
        public const uint GL_INTERNALFORMAT_SHARED_SIZE = 33399u;
        
        public const uint GL_INTERNALFORMAT_RED_TYPE = 33400u;
        
        public const uint GL_INTERNALFORMAT_GREEN_TYPE = 33401u;
        
        public const uint GL_INTERNALFORMAT_BLUE_TYPE = 33402u;
        
        public const uint GL_INTERNALFORMAT_ALPHA_TYPE = 33403u;
        
        public const uint GL_INTERNALFORMAT_DEPTH_TYPE = 33404u;
        
        public const uint GL_INTERNALFORMAT_STENCIL_TYPE = 33405u;
        
        public const uint GL_MAX_WIDTH = 33406u;
        
        public const uint GL_MAX_HEIGHT = 33407u;
        
        public const uint GL_MAX_DEPTH = 33408u;
        
        public const uint GL_MAX_LAYERS = 33409u;
        
        public const uint GL_MAX_COMBINED_DIMENSIONS = 33410u;
        
        public const uint GL_COLOR_COMPONENTS = 33411u;
        
        public const uint GL_DEPTH_COMPONENTS = 33412u;
        
        public const uint GL_STENCIL_COMPONENTS = 33413u;
        
        public const uint GL_COLOR_RENDERABLE = 33414u;
        
        public const uint GL_DEPTH_RENDERABLE = 33415u;
        
        public const uint GL_STENCIL_RENDERABLE = 33416u;
        
        public const uint GL_FRAMEBUFFER_RENDERABLE = 33417u;
        
        public const uint GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418u;
        
        public const uint GL_FRAMEBUFFER_BLEND = 33419u;
        
        public const uint GL_READ_PIXELS = 33420u;
        
        public const uint GL_READ_PIXELS_FORMAT = 33421u;
        
        public const uint GL_READ_PIXELS_TYPE = 33422u;
        
        public const uint GL_TEXTURE_IMAGE_FORMAT = 33423u;
        
        public const uint GL_TEXTURE_IMAGE_TYPE = 33424u;
        
        public const uint GL_GET_TEXTURE_IMAGE_FORMAT = 33425u;
        
        public const uint GL_GET_TEXTURE_IMAGE_TYPE = 33426u;
        
        public const uint GL_MIPMAP = 33427u;
        
        public const uint GL_MANUAL_GENERATE_MIPMAP = 33428u;
        
        public const uint GL_AUTO_GENERATE_MIPMAP = 33429u;
        
        public const uint GL_COLOR_ENCODING = 33430u;
        
        public const uint GL_SRGB_READ = 33431u;
        
        public const uint GL_SRGB_WRITE = 33432u;
        
        public const uint GL_FILTER = 33434u;
        
        public const uint GL_VERTEX_TEXTURE = 33435u;
        
        public const uint GL_TESS_CONTROL_TEXTURE = 33436u;
        
        public const uint GL_TESS_EVALUATION_TEXTURE = 33437u;
        
        public const uint GL_GEOMETRY_TEXTURE = 33438u;
        
        public const uint GL_FRAGMENT_TEXTURE = 33439u;
        
        public const uint GL_COMPUTE_TEXTURE = 33440u;
        
        public const uint GL_TEXTURE_SHADOW = 33441u;
        
        public const uint GL_TEXTURE_GATHER = 33442u;
        
        public const uint GL_TEXTURE_GATHER_SHADOW = 33443u;
        
        public const uint GL_SHADER_IMAGE_LOAD = 33444u;
        
        public const uint GL_SHADER_IMAGE_STORE = 33445u;
        
        public const uint GL_SHADER_IMAGE_ATOMIC = 33446u;
        
        public const uint GL_IMAGE_TEXEL_SIZE = 33447u;
        
        public const uint GL_IMAGE_COMPATIBILITY_CLASS = 33448u;
        
        public const uint GL_IMAGE_PIXEL_FORMAT = 33449u;
        
        public const uint GL_IMAGE_PIXEL_TYPE = 33450u;
        
        public const uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452u;
        
        public const uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453u;
        
        public const uint GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454u;
        
        public const uint GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455u;
        
        public const uint GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457u;
        
        public const uint GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458u;
        
        public const uint GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459u;
        
        public const uint GL_CLEAR_BUFFER = 33460u;
        
        public const uint GL_TEXTURE_VIEW = 33461u;
        
        public const uint GL_VIEW_COMPATIBILITY_CLASS = 33462u;
        
        public const uint GL_FULL_SUPPORT = 33463u;
        
        public const uint GL_CAVEAT_SUPPORT = 33464u;
        
        public const uint GL_IMAGE_CLASS_4_X_32 = 33465u;
        
        public const uint GL_IMAGE_CLASS_2_X_32 = 33466u;
        
        public const uint GL_IMAGE_CLASS_1_X_32 = 33467u;
        
        public const uint GL_IMAGE_CLASS_4_X_16 = 33468u;
        
        public const uint GL_IMAGE_CLASS_2_X_16 = 33469u;
        
        public const uint GL_IMAGE_CLASS_1_X_16 = 33470u;
        
        public const uint GL_IMAGE_CLASS_4_X_8 = 33471u;
        
        public const uint GL_IMAGE_CLASS_2_X_8 = 33472u;
        
        public const uint GL_IMAGE_CLASS_1_X_8 = 33473u;
        
        public const uint GL_IMAGE_CLASS_11_11_10 = 33474u;
        
        public const uint GL_IMAGE_CLASS_10_10_10_2 = 33475u;
        
        public const uint GL_VIEW_CLASS_128_BITS = 33476u;
        
        public const uint GL_VIEW_CLASS_96_BITS = 33477u;
        
        public const uint GL_VIEW_CLASS_64_BITS = 33478u;
        
        public const uint GL_VIEW_CLASS_48_BITS = 33479u;
        
        public const uint GL_VIEW_CLASS_32_BITS = 33480u;
        
        public const uint GL_VIEW_CLASS_24_BITS = 33481u;
        
        public const uint GL_VIEW_CLASS_16_BITS = 33482u;
        
        public const uint GL_VIEW_CLASS_8_BITS = 33483u;
        
        public const uint GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484u;
        
        public const uint GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485u;
        
        public const uint GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486u;
        
        public const uint GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487u;
        
        public const uint GL_VIEW_CLASS_RGTC1_RED = 33488u;
        
        public const uint GL_VIEW_CLASS_RGTC2_RG = 33489u;
        
        public const uint GL_VIEW_CLASS_BPTC_UNORM = 33490u;
        
        public const uint GL_VIEW_CLASS_BPTC_FLOAT = 33491u;
        
        public const uint GL_UNIFORM = 37601u;
        
        public const uint GL_UNIFORM_BLOCK = 37602u;
        
        public const uint GL_PROGRAM_INPUT = 37603u;
        
        public const uint GL_PROGRAM_OUTPUT = 37604u;
        
        public const uint GL_BUFFER_VARIABLE = 37605u;
        
        public const uint GL_SHADER_STORAGE_BLOCK = 37606u;
        
        public const uint GL_VERTEX_SUBROUTINE = 37608u;
        
        public const uint GL_TESS_CONTROL_SUBROUTINE = 37609u;
        
        public const uint GL_TESS_EVALUATION_SUBROUTINE = 37610u;
        
        public const uint GL_GEOMETRY_SUBROUTINE = 37611u;
        
        public const uint GL_FRAGMENT_SUBROUTINE = 37612u;
        
        public const uint GL_COMPUTE_SUBROUTINE = 37613u;
        
        public const uint GL_VERTEX_SUBROUTINE_UNIFORM = 37614u;
        
        public const uint GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615u;
        
        public const uint GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616u;
        
        public const uint GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617u;
        
        public const uint GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618u;
        
        public const uint GL_COMPUTE_SUBROUTINE_UNIFORM = 37619u;
        
        public const uint GL_TRANSFORM_FEEDBACK_VARYING = 37620u;
        
        public const uint GL_ACTIVE_RESOURCES = 37621u;
        
        public const uint GL_MAX_NAME_LENGTH = 37622u;
        
        public const uint GL_MAX_NUM_ACTIVE_VARIABLES = 37623u;
        
        public const uint GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624u;
        
        public const uint GL_NAME_LENGTH = 37625u;
        
        public const uint GL_TYPE = 37626u;
        
        public const uint GL_ARRAY_SIZE = 37627u;
        
        public const uint GL_OFFSET = 37628u;
        
        public const uint GL_BLOCK_INDEX = 37629u;
        
        public const uint GL_ARRAY_STRIDE = 37630u;
        
        public const uint GL_MATRIX_STRIDE = 37631u;
        
        public const uint GL_IS_ROW_MAJOR = 37632u;
        
        public const uint GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633u;
        
        public const uint GL_BUFFER_BINDING = 37634u;
        
        public const uint GL_BUFFER_DATA_SIZE = 37635u;
        
        public const uint GL_NUM_ACTIVE_VARIABLES = 37636u;
        
        public const uint GL_ACTIVE_VARIABLES = 37637u;
        
        public const uint GL_REFERENCED_BY_VERTEX_SHADER = 37638u;
        
        public const uint GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639u;
        
        public const uint GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640u;
        
        public const uint GL_REFERENCED_BY_GEOMETRY_SHADER = 37641u;
        
        public const uint GL_REFERENCED_BY_FRAGMENT_SHADER = 37642u;
        
        public const uint GL_REFERENCED_BY_COMPUTE_SHADER = 37643u;
        
        public const uint GL_TOP_LEVEL_ARRAY_SIZE = 37644u;
        
        public const uint GL_TOP_LEVEL_ARRAY_STRIDE = 37645u;
        
        public const uint GL_LOCATION = 37646u;
        
        public const uint GL_LOCATION_INDEX = 37647u;
        
        public const uint GL_IS_PER_PATCH = 37607u;
        
        public const uint GL_SHADER_STORAGE_BUFFER = 37074u;
        
        public const uint GL_SHADER_STORAGE_BUFFER_BINDING = 37075u;
        
        public const uint GL_SHADER_STORAGE_BUFFER_START = 37076u;
        
        public const uint GL_SHADER_STORAGE_BUFFER_SIZE = 37077u;
        
        public const uint GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078u;
        
        public const uint GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079u;
        
        public const uint GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080u;
        
        public const uint GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081u;
        
        public const uint GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082u;
        
        public const uint GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083u;
        
        public const uint GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084u;
        
        public const uint GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085u;
        
        public const uint GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086u;
        
        public const uint GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087u;
        
        public const uint GL_SHADER_STORAGE_BARRIER_BIT = 8192u;
        
        public const uint GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665u;
        
        public const uint GL_DEPTH_STENCIL_TEXTURE_MODE = 37098u;
        
        public const uint GL_TEXTURE_BUFFER_OFFSET = 37277u;
        
        public const uint GL_TEXTURE_BUFFER_SIZE = 37278u;
        
        public const uint GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279u;
        
        public const uint GL_TEXTURE_VIEW_MIN_LEVEL = 33499u;
        
        public const uint GL_TEXTURE_VIEW_NUM_LEVELS = 33500u;
        
        public const uint GL_TEXTURE_VIEW_MIN_LAYER = 33501u;
        
        public const uint GL_TEXTURE_VIEW_NUM_LAYERS = 33502u;
        
        public const uint GL_TEXTURE_IMMUTABLE_LEVELS = 33503u;
        
        public const uint GL_VERTEX_ATTRIB_BINDING = 33492u;
        
        public const uint GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493u;
        
        public const uint GL_VERTEX_BINDING_DIVISOR = 33494u;
        
        public const uint GL_VERTEX_BINDING_OFFSET = 33495u;
        
        public const uint GL_VERTEX_BINDING_STRIDE = 33496u;
        
        public const uint GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497u;
        
        public const uint GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498u;
        
        public const uint GL_VERTEX_BINDING_BUFFER = 36687u;
        
        public const uint GL_VERSION_4_4 = 1u;
        
        public const uint GL_MAX_VERTEX_ATTRIB_STRIDE = 33509u;
        
        public const uint GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313u;
        
        public const uint GL_TEXTURE_BUFFER_BINDING = 35882u;
        
        public const uint GL_MAP_PERSISTENT_BIT = 64u;
        
        public const uint GL_MAP_COHERENT_BIT = 128u;
        
        public const uint GL_DYNAMIC_STORAGE_BIT = 256u;
        
        public const uint GL_CLIENT_STORAGE_BIT = 512u;
        
        public const uint GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384u;
        
        public const uint GL_BUFFER_IMMUTABLE_STORAGE = 33311u;
        
        public const uint GL_BUFFER_STORAGE_FLAGS = 33312u;
        
        public const uint GL_CLEAR_TEXTURE = 37733u;
        
        public const uint GL_LOCATION_COMPONENT = 37706u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707u;
        
        public const uint GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708u;
        
        public const uint GL_QUERY_BUFFER = 37266u;
        
        public const uint GL_QUERY_BUFFER_BARRIER_BIT = 32768u;
        
        public const uint GL_QUERY_BUFFER_BINDING = 37267u;
        
        public const uint GL_QUERY_RESULT_NO_WAIT = 37268u;
        
        public const uint GL_MIRROR_CLAMP_TO_EDGE = 34627u;
        
        public const uint GL_VERSION_4_5 = 1u;
        
        public const uint GL_CONTEXT_LOST = 1287u;
        
        public const uint GL_NEGATIVE_ONE_TO_ONE = 37726u;
        
        public const uint GL_ZERO_TO_ONE = 37727u;
        
        public const uint GL_CLIP_ORIGIN = 37724u;
        
        public const uint GL_CLIP_DEPTH_MODE = 37725u;
        
        public const uint GL_QUERY_WAIT_INVERTED = 36375u;
        
        public const uint GL_QUERY_NO_WAIT_INVERTED = 36376u;
        
        public const uint GL_QUERY_BY_REGION_WAIT_INVERTED = 36377u;
        
        public const uint GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 36378u;
        
        public const uint GL_MAX_CULL_DISTANCES = 33529u;
        
        public const uint GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530u;
        
        public const uint GL_TEXTURE_TARGET = 4102u;
        
        public const uint GL_QUERY_TARGET = 33514u;
        
        public const uint GL_GUILTY_CONTEXT_RESET = 33363u;
        
        public const uint GL_INNOCENT_CONTEXT_RESET = 33364u;
        
        public const uint GL_UNKNOWN_CONTEXT_RESET = 33365u;
        
        public const uint GL_RESET_NOTIFICATION_STRATEGY = 33366u;
        
        public const uint GL_LOSE_CONTEXT_ON_RESET = 33362u;
        
        public const uint GL_NO_RESET_NOTIFICATION = 33377u;
        
        public const uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4u;
        
        public const uint GL_CONTEXT_RELEASE_BEHAVIOR = 33531u;
        
        public const uint GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532u;
        
        public const uint GL_VERSION_4_6 = 1u;
        
        public const uint GL_SHADER_BINARY_FORMAT_SPIR_V = 38225u;
        
        public const uint GL_SPIR_V_BINARY = 38226u;
        
        public const uint GL_PARAMETER_BUFFER = 33006u;
        
        public const uint GL_PARAMETER_BUFFER_BINDING = 33007u;
        
        public const uint GL_CONTEXT_FLAG_NO_ERROR_BIT = 8u;
        
        public const uint GL_VERTICES_SUBMITTED = 33518u;
        
        public const uint GL_PRIMITIVES_SUBMITTED = 33519u;
        
        public const uint GL_VERTEX_SHADER_INVOCATIONS = 33520u;
        
        public const uint GL_TESS_CONTROL_SHADER_PATCHES = 33521u;
        
        public const uint GL_TESS_EVALUATION_SHADER_INVOCATIONS = 33522u;
        
        public const uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523u;
        
        public const uint GL_FRAGMENT_SHADER_INVOCATIONS = 33524u;
        
        public const uint GL_COMPUTE_SHADER_INVOCATIONS = 33525u;
        
        public const uint GL_CLIPPING_INPUT_PRIMITIVES = 33526u;
        
        public const uint GL_CLIPPING_OUTPUT_PRIMITIVES = 33527u;
        
        public const uint GL_POLYGON_OFFSET_CLAMP = 36379u;
        
        public const uint GL_SPIR_V_EXTENSIONS = 38227u;
        
        public const uint GL_NUM_SPIR_V_EXTENSIONS = 38228u;
        
        public const uint GL_TEXTURE_MAX_ANISOTROPY = 34046u;
        
        public const uint GL_MAX_TEXTURE_MAX_ANISOTROPY = 34047u;
        
        public const uint GL_TRANSFORM_FEEDBACK_OVERFLOW = 33516u;
        
        public const uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517u;
        
        public const uint GL_ARB_ES2_compatibility = 1u;
        
        public const uint GL_ARB_ES3_1_compatibility = 1u;
        
        public const uint GL_ARB_ES3_2_compatibility = 1u;
        
        public const uint GL_PRIMITIVE_BOUNDING_BOX_ARB = 37566u;
        
        public const uint GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 37761u;
        
        public const uint GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 37762u;
        
        public const uint GL_ARB_ES3_compatibility = 1u;
        
        public const uint GL_ARB_arrays_of_arrays = 1u;
        
        public const uint GL_ARB_base_instance = 1u;
        
        public const uint GL_ARB_bindless_texture = 1u;
        
        public const uint GL_UNSIGNED_INT64_ARB = 5135u;
        
        public const uint GL_ARB_blend_func_extended = 1u;
        
        public const uint GL_ARB_buffer_storage = 1u;
        
        public const uint GL_ARB_cl_event = 1u;
        
        public const uint GL_SYNC_CL_EVENT_ARB = 33344u;
        
        public const uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345u;
        
        public const uint GL_ARB_clear_buffer_object = 1u;
        
        public const uint GL_ARB_clear_texture = 1u;
        
        public const uint GL_ARB_clip_control = 1u;
        
        public const uint GL_ARB_compressed_texture_pixel_storage = 1u;
        
        public const uint GL_ARB_compute_shader = 1u;
        
        public const uint GL_ARB_compute_variable_group_size = 1u;
        
        public const uint GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700u;
        
        public const uint GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099u;
        
        public const uint GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701u;
        
        public const uint GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311u;
        
        public const uint GL_ARB_conditional_render_inverted = 1u;
        
        public const uint GL_ARB_conservative_depth = 1u;
        
        public const uint GL_ARB_copy_buffer = 1u;
        
        public const uint GL_ARB_copy_image = 1u;
        
        public const uint GL_ARB_cull_distance = 1u;
        
        public const uint GL_ARB_debug_output = 1u;
        
        public const uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346u;
        
        public const uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347u;
        
        public const uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348u;
        
        public const uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349u;
        
        public const uint GL_DEBUG_SOURCE_API_ARB = 33350u;
        
        public const uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351u;
        
        public const uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352u;
        
        public const uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353u;
        
        public const uint GL_DEBUG_SOURCE_APPLICATION_ARB = 33354u;
        
        public const uint GL_DEBUG_SOURCE_OTHER_ARB = 33355u;
        
        public const uint GL_DEBUG_TYPE_ERROR_ARB = 33356u;
        
        public const uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357u;
        
        public const uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358u;
        
        public const uint GL_DEBUG_TYPE_PORTABILITY_ARB = 33359u;
        
        public const uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360u;
        
        public const uint GL_DEBUG_TYPE_OTHER_ARB = 33361u;
        
        public const uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187u;
        
        public const uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188u;
        
        public const uint GL_DEBUG_LOGGED_MESSAGES_ARB = 37189u;
        
        public const uint GL_DEBUG_SEVERITY_HIGH_ARB = 37190u;
        
        public const uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191u;
        
        public const uint GL_DEBUG_SEVERITY_LOW_ARB = 37192u;
        
        public const uint GL_ARB_depth_buffer_float = 1u;
        
        public const uint GL_ARB_depth_clamp = 1u;
        
        public const uint GL_ARB_derivative_control = 1u;
        
        public const uint GL_ARB_direct_state_access = 1u;
        
        public const uint GL_ARB_draw_buffers_blend = 1u;
        
        public const uint GL_ARB_draw_elements_base_vertex = 1u;
        
        public const uint GL_ARB_draw_indirect = 1u;
        
        public const uint GL_ARB_draw_instanced = 1u;
        
        public const uint GL_ARB_enhanced_layouts = 1u;
        
        public const uint GL_ARB_explicit_attrib_location = 1u;
        
        public const uint GL_ARB_explicit_uniform_location = 1u;
        
        public const uint GL_ARB_fragment_coord_conventions = 1u;
        
        public const uint GL_ARB_fragment_layer_viewport = 1u;
        
        public const uint GL_ARB_fragment_shader_interlock = 1u;
        
        public const uint GL_ARB_framebuffer_no_attachments = 1u;
        
        public const uint GL_ARB_framebuffer_object = 1u;
        
        public const uint GL_ARB_framebuffer_sRGB = 1u;
        
        public const uint GL_ARB_geometry_shader4 = 1u;
        
        public const uint GL_LINES_ADJACENCY_ARB = 10u;
        
        public const uint GL_LINE_STRIP_ADJACENCY_ARB = 11u;
        
        public const uint GL_TRIANGLES_ADJACENCY_ARB = 12u;
        
        public const uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13u;
        
        public const uint GL_PROGRAM_POINT_SIZE_ARB = 34370u;
        
        public const uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265u;
        
        public const uint GL_GEOMETRY_SHADER_ARB = 36313u;
        
        public const uint GL_GEOMETRY_VERTICES_OUT_ARB = 36314u;
        
        public const uint GL_GEOMETRY_INPUT_TYPE_ARB = 36315u;
        
        public const uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316u;
        
        public const uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317u;
        
        public const uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318u;
        
        public const uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319u;
        
        public const uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320u;
        
        public const uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321u;
        
        public const uint GL_ARB_get_program_binary = 1u;
        
        public const uint GL_ARB_get_texture_sub_image = 1u;
        
        public const uint GL_ARB_gl_spirv = 1u;
        
        public const uint GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 38225u;
        
        public const uint GL_SPIR_V_BINARY_ARB = 38226u;
        
        public const uint GL_ARB_gpu_shader5 = 1u;
        
        public const uint GL_ARB_gpu_shader_fp64 = 1u;
        
        public const uint GL_ARB_gpu_shader_int64 = 1u;
        
        public const uint GL_INT64_ARB = 5134u;
        
        public const uint GL_INT64_VEC2_ARB = 36841u;
        
        public const uint GL_INT64_VEC3_ARB = 36842u;
        
        public const uint GL_INT64_VEC4_ARB = 36843u;
        
        public const uint GL_UNSIGNED_INT64_VEC2_ARB = 36853u;
        
        public const uint GL_UNSIGNED_INT64_VEC3_ARB = 36854u;
        
        public const uint GL_UNSIGNED_INT64_VEC4_ARB = 36855u;
        
        public const uint GL_ARB_half_float_vertex = 1u;
        
        public const uint GL_ARB_imaging = 1u;
        
        public const uint GL_ARB_indirect_parameters = 1u;
        
        public const uint GL_PARAMETER_BUFFER_ARB = 33006u;
        
        public const uint GL_PARAMETER_BUFFER_BINDING_ARB = 33007u;
        
        public const uint GL_ARB_instanced_arrays = 1u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070u;
        
        public const uint GL_ARB_internalformat_query = 1u;
        
        public const uint GL_ARB_internalformat_query2 = 1u;
        
        public const uint GL_SRGB_DECODE_ARB = 33433u;
        
        public const uint GL_ARB_invalidate_subdata = 1u;
        
        public const uint GL_ARB_map_buffer_alignment = 1u;
        
        public const uint GL_ARB_map_buffer_range = 1u;
        
        public const uint GL_ARB_multi_bind = 1u;
        
        public const uint GL_ARB_multi_draw_indirect = 1u;
        
        public const uint GL_ARB_occlusion_query2 = 1u;
        
        public const uint GL_ARB_parallel_shader_compile = 1u;
        
        public const uint GL_MAX_SHADER_COMPILER_THREADS_ARB = 37296u;
        
        public const uint GL_COMPLETION_STATUS_ARB = 37297u;
        
        public const uint GL_ARB_pipeline_statistics_query = 1u;
        
        public const uint GL_VERTICES_SUBMITTED_ARB = 33518u;
        
        public const uint GL_PRIMITIVES_SUBMITTED_ARB = 33519u;
        
        public const uint GL_VERTEX_SHADER_INVOCATIONS_ARB = 33520u;
        
        public const uint GL_TESS_CONTROL_SHADER_PATCHES_ARB = 33521u;
        
        public const uint GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 33522u;
        
        public const uint GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 33523u;
        
        public const uint GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 33524u;
        
        public const uint GL_COMPUTE_SHADER_INVOCATIONS_ARB = 33525u;
        
        public const uint GL_CLIPPING_INPUT_PRIMITIVES_ARB = 33526u;
        
        public const uint GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 33527u;
        
        public const uint GL_ARB_pixel_buffer_object = 1u;
        
        public const uint GL_PIXEL_PACK_BUFFER_ARB = 35051u;
        
        public const uint GL_PIXEL_UNPACK_BUFFER_ARB = 35052u;
        
        public const uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053u;
        
        public const uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055u;
        
        public const uint GL_ARB_polygon_offset_clamp = 1u;
        
        public const uint GL_ARB_post_depth_coverage = 1u;
        
        public const uint GL_ARB_program_interface_query = 1u;
        
        public const uint GL_ARB_provoking_vertex = 1u;
        
        public const uint GL_ARB_query_buffer_object = 1u;
        
        public const uint GL_ARB_robust_buffer_access_behavior = 1u;
        
        public const uint GL_ARB_robustness = 1u;
        
        public const uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4u;
        
        public const uint GL_LOSE_CONTEXT_ON_RESET_ARB = 33362u;
        
        public const uint GL_GUILTY_CONTEXT_RESET_ARB = 33363u;
        
        public const uint GL_INNOCENT_CONTEXT_RESET_ARB = 33364u;
        
        public const uint GL_UNKNOWN_CONTEXT_RESET_ARB = 33365u;
        
        public const uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366u;
        
        public const uint GL_NO_RESET_NOTIFICATION_ARB = 33377u;
        
        public const uint GL_ARB_robustness_isolation = 1u;
        
        public const uint GL_ARB_sample_locations = 1u;
        
        public const uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693u;
        
        public const uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694u;
        
        public const uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695u;
        
        public const uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696u;
        
        public const uint GL_SAMPLE_LOCATION_ARB = 36432u;
        
        public const uint GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697u;
        
        public const uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698u;
        
        public const uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699u;
        
        public const uint GL_ARB_sample_shading = 1u;
        
        public const uint GL_SAMPLE_SHADING_ARB = 35894u;
        
        public const uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 35895u;
        
        public const uint GL_ARB_sampler_objects = 1u;
        
        public const uint GL_ARB_seamless_cube_map = 1u;
        
        public const uint GL_ARB_seamless_cubemap_per_texture = 1u;
        
        public const uint GL_ARB_separate_shader_objects = 1u;
        
        public const uint GL_ARB_shader_atomic_counter_ops = 1u;
        
        public const uint GL_ARB_shader_atomic_counters = 1u;
        
        public const uint GL_ARB_shader_ballot = 1u;
        
        public const uint GL_ARB_shader_bit_encoding = 1u;
        
        public const uint GL_ARB_shader_clock = 1u;
        
        public const uint GL_ARB_shader_draw_parameters = 1u;
        
        public const uint GL_ARB_shader_group_vote = 1u;
        
        public const uint GL_ARB_shader_image_load_store = 1u;
        
        public const uint GL_ARB_shader_image_size = 1u;
        
        public const uint GL_ARB_shader_precision = 1u;
        
        public const uint GL_ARB_shader_stencil_export = 1u;
        
        public const uint GL_ARB_shader_storage_buffer_object = 1u;
        
        public const uint GL_ARB_shader_subroutine = 1u;
        
        public const uint GL_ARB_shader_texture_image_samples = 1u;
        
        public const uint GL_ARB_shader_viewport_layer_array = 1u;
        
        public const uint GL_ARB_shading_language_420pack = 1u;
        
        public const uint GL_ARB_shading_language_include = 1u;
        
        public const uint GL_SHADER_INCLUDE_ARB = 36270u;
        
        public const uint GL_NAMED_STRING_LENGTH_ARB = 36329u;
        
        public const uint GL_NAMED_STRING_TYPE_ARB = 36330u;
        
        public const uint GL_ARB_shading_language_packing = 1u;
        
        public const uint GL_ARB_sparse_buffer = 1u;
        
        public const uint GL_SPARSE_STORAGE_BIT_ARB = 1024u;
        
        public const uint GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 33528u;
        
        public const uint GL_ARB_sparse_texture = 1u;
        
        public const uint GL_TEXTURE_SPARSE_ARB = 37286u;
        
        public const uint GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287u;
        
        public const uint GL_NUM_SPARSE_LEVELS_ARB = 37290u;
        
        public const uint GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288u;
        
        public const uint GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269u;
        
        public const uint GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270u;
        
        public const uint GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271u;
        
        public const uint GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272u;
        
        public const uint GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273u;
        
        public const uint GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274u;
        
        public const uint GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289u;
        
        public const uint GL_ARB_sparse_texture2 = 1u;
        
        public const uint GL_ARB_sparse_texture_clamp = 1u;
        
        public const uint GL_ARB_spirv_extensions = 1u;
        
        public const uint GL_ARB_stencil_texturing = 1u;
        
        public const uint GL_ARB_sync = 1u;
        
        public const uint GL_ARB_tessellation_shader = 1u;
        
        public const uint GL_ARB_texture_barrier = 1u;
        
        public const uint GL_ARB_texture_border_clamp = 1u;
        
        public const uint GL_CLAMP_TO_BORDER_ARB = 33069u;
        
        public const uint GL_ARB_texture_buffer_object = 1u;
        
        public const uint GL_TEXTURE_BUFFER_ARB = 35882u;
        
        public const uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883u;
        
        public const uint GL_TEXTURE_BINDING_BUFFER_ARB = 35884u;
        
        public const uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885u;
        
        public const uint GL_TEXTURE_BUFFER_FORMAT_ARB = 35886u;
        
        public const uint GL_ARB_texture_buffer_object_rgb32 = 1u;
        
        public const uint GL_ARB_texture_buffer_range = 1u;
        
        public const uint GL_ARB_texture_compression_bptc = 1u;
        
        public const uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492u;
        
        public const uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493u;
        
        public const uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494u;
        
        public const uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495u;
        
        public const uint GL_ARB_texture_compression_rgtc = 1u;
        
        public const uint GL_ARB_texture_cube_map_array = 1u;
        
        public const uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 36873u;
        
        public const uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874u;
        
        public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875u;
        
        public const uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 36876u;
        
        public const uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877u;
        
        public const uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878u;
        
        public const uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879u;
        
        public const uint GL_ARB_texture_filter_anisotropic = 1u;
        
        public const uint GL_ARB_texture_filter_minmax = 1u;
        
        public const uint GL_TEXTURE_REDUCTION_MODE_ARB = 37734u;
        
        public const uint GL_WEIGHTED_AVERAGE_ARB = 37735u;
        
        public const uint GL_ARB_texture_gather = 1u;
        
        public const uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446u;
        
        public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447u;
        
        public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767u;
        
        public const uint GL_ARB_texture_mirror_clamp_to_edge = 1u;
        
        public const uint GL_ARB_texture_mirrored_repeat = 1u;
        
        public const uint GL_MIRRORED_REPEAT_ARB = 33648u;
        
        public const uint GL_ARB_texture_multisample = 1u;
        
        public const uint GL_ARB_texture_non_power_of_two = 1u;
        
        public const uint GL_ARB_texture_query_levels = 1u;
        
        public const uint GL_ARB_texture_query_lod = 1u;
        
        public const uint GL_ARB_texture_rg = 1u;
        
        public const uint GL_ARB_texture_rgb10_a2ui = 1u;
        
        public const uint GL_ARB_texture_stencil8 = 1u;
        
        public const uint GL_ARB_texture_storage = 1u;
        
        public const uint GL_ARB_texture_storage_multisample = 1u;
        
        public const uint GL_ARB_texture_swizzle = 1u;
        
        public const uint GL_ARB_texture_view = 1u;
        
        public const uint GL_ARB_timer_query = 1u;
        
        public const uint GL_ARB_transform_feedback2 = 1u;
        
        public const uint GL_ARB_transform_feedback3 = 1u;
        
        public const uint GL_ARB_transform_feedback_instanced = 1u;
        
        public const uint GL_ARB_transform_feedback_overflow_query = 1u;
        
        public const uint GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 33516u;
        
        public const uint GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 33517u;
        
        public const uint GL_ARB_uniform_buffer_object = 1u;
        
        public const uint GL_ARB_vertex_array_bgra = 1u;
        
        public const uint GL_ARB_vertex_array_object = 1u;
        
        public const uint GL_ARB_vertex_attrib_64bit = 1u;
        
        public const uint GL_ARB_vertex_attrib_binding = 1u;
        
        public const uint GL_ARB_vertex_type_10f_11f_11f_rev = 1u;
        
        public const uint GL_ARB_vertex_type_2_10_10_10_rev = 1u;
        
        public const uint GL_ARB_viewport_array = 1u;
        
        public const uint GL_KHR_blend_equation_advanced = 1u;
        
        public const uint GL_MULTIPLY_KHR = 37524u;
        
        public const uint GL_SCREEN_KHR = 37525u;
        
        public const uint GL_OVERLAY_KHR = 37526u;
        
        public const uint GL_DARKEN_KHR = 37527u;
        
        public const uint GL_LIGHTEN_KHR = 37528u;
        
        public const uint GL_COLORDODGE_KHR = 37529u;
        
        public const uint GL_COLORBURN_KHR = 37530u;
        
        public const uint GL_HARDLIGHT_KHR = 37531u;
        
        public const uint GL_SOFTLIGHT_KHR = 37532u;
        
        public const uint GL_DIFFERENCE_KHR = 37534u;
        
        public const uint GL_EXCLUSION_KHR = 37536u;
        
        public const uint GL_HSL_HUE_KHR = 37549u;
        
        public const uint GL_HSL_SATURATION_KHR = 37550u;
        
        public const uint GL_HSL_COLOR_KHR = 37551u;
        
        public const uint GL_HSL_LUMINOSITY_KHR = 37552u;
        
        public const uint GL_KHR_blend_equation_advanced_coherent = 1u;
        
        public const uint GL_BLEND_ADVANCED_COHERENT_KHR = 37509u;
        
        public const uint GL_KHR_context_flush_control = 1u;
        
        public const uint GL_KHR_debug = 1u;
        
        public const uint GL_KHR_no_error = 1u;
        
        public const uint GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8u;
        
        public const uint GL_KHR_parallel_shader_compile = 1u;
        
        public const uint GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296u;
        
        public const uint GL_COMPLETION_STATUS_KHR = 37297u;
        
        public const uint GL_KHR_robust_buffer_access_behavior = 1u;
        
        public const uint GL_KHR_robustness = 1u;
        
        public const uint GL_CONTEXT_ROBUST_ACCESS = 37107u;
        
        public const uint GL_KHR_texture_compression_astc_hdr = 1u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820u;
        
        public const uint GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852u;
        
        public const uint GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853u;
        
        public const uint GL_KHR_texture_compression_astc_ldr = 1u;
        
        public const uint GL_KHR_texture_compression_astc_sliced_3d = 1u;
        
        public const uint GL_AMD_performance_monitor = 1u;
        
        public const uint GL_COUNTER_TYPE_AMD = 35776u;
        
        public const uint GL_COUNTER_RANGE_AMD = 35777u;
        
        public const uint GL_UNSIGNED_INT64_AMD = 35778u;
        
        public const uint GL_PERCENTAGE_AMD = 35779u;
        
        public const uint GL_PERFMON_RESULT_AVAILABLE_AMD = 35780u;
        
        public const uint GL_PERFMON_RESULT_SIZE_AMD = 35781u;
        
        public const uint GL_PERFMON_RESULT_AMD = 35782u;
        
        public const uint GL_APPLE_rgb_422 = 1u;
        
        public const uint GL_RGB_422_APPLE = 35359u;
        
        public const uint GL_UNSIGNED_SHORT_8_8_APPLE = 34234u;
        
        public const uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235u;
        
        public const uint GL_RGB_RAW_422_APPLE = 35409u;
        
        public const uint GL_EXT_EGL_image_storage = 1u;
        
        public const uint GL_EXT_debug_label = 1u;
        
        public const uint GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407u;
        
        public const uint GL_PROGRAM_OBJECT_EXT = 35648u;
        
        public const uint GL_SHADER_OBJECT_EXT = 35656u;
        
        public const uint GL_BUFFER_OBJECT_EXT = 37201u;
        
        public const uint GL_QUERY_OBJECT_EXT = 37203u;
        
        public const uint GL_VERTEX_ARRAY_OBJECT_EXT = 37204u;
        
        public const uint GL_EXT_debug_marker = 1u;
        
        public const uint GL_EXT_direct_state_access = 1u;
        
        public const uint GL_PROGRAM_MATRIX_EXT = 36397u;
        
        public const uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398u;
        
        public const uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399u;
        
        public const uint GL_EXT_draw_instanced = 1u;
        
        public const uint GL_EXT_polygon_offset_clamp = 1u;
        
        public const uint GL_POLYGON_OFFSET_CLAMP_EXT = 36379u;
        
        public const uint GL_EXT_post_depth_coverage = 1u;
        
        public const uint GL_EXT_raster_multisample = 1u;
        
        public const uint GL_RASTER_MULTISAMPLE_EXT = 37671u;
        
        public const uint GL_RASTER_SAMPLES_EXT = 37672u;
        
        public const uint GL_MAX_RASTER_SAMPLES_EXT = 37673u;
        
        public const uint GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674u;
        
        public const uint GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675u;
        
        public const uint GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676u;
        
        public const uint GL_EXT_separate_shader_objects = 1u;
        
        public const uint GL_ACTIVE_PROGRAM_EXT = 35725u;
        
        public const uint GL_EXT_shader_framebuffer_fetch = 1u;
        
        public const uint GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410u;
        
        public const uint GL_EXT_shader_framebuffer_fetch_non_coherent = 1u;
        
        public const uint GL_EXT_shader_integer_mix = 1u;
        
        public const uint GL_EXT_texture_compression_s3tc = 1u;
        
        public const uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776u;
        
        public const uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777u;
        
        public const uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778u;
        
        public const uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779u;
        
        public const uint GL_EXT_texture_filter_minmax = 1u;
        
        public const uint GL_TEXTURE_REDUCTION_MODE_EXT = 37734u;
        
        public const uint GL_WEIGHTED_AVERAGE_EXT = 37735u;
        
        public const uint GL_EXT_texture_sRGB_decode = 1u;
        
        public const uint GL_TEXTURE_SRGB_DECODE_EXT = 35400u;
        
        public const uint GL_DECODE_EXT = 35401u;
        
        public const uint GL_SKIP_DECODE_EXT = 35402u;
        
        public const uint GL_EXT_window_rectangles = 1u;
        
        public const uint GL_INCLUSIVE_EXT = 36624u;
        
        public const uint GL_EXCLUSIVE_EXT = 36625u;
        
        public const uint GL_WINDOW_RECTANGLE_EXT = 36626u;
        
        public const uint GL_WINDOW_RECTANGLE_MODE_EXT = 36627u;
        
        public const uint GL_MAX_WINDOW_RECTANGLES_EXT = 36628u;
        
        public const uint GL_NUM_WINDOW_RECTANGLES_EXT = 36629u;
        
        public const uint GL_INTEL_blackhole_render = 1u;
        
        public const uint GL_BLACKHOLE_RENDER_INTEL = 33788u;
        
        public const uint GL_INTEL_conservative_rasterization = 1u;
        
        public const uint GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790u;
        
        public const uint GL_INTEL_framebuffer_CMAA = 1u;
        
        public const uint GL_INTEL_performance_query = 1u;
        
        public const uint GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0u;
        
        public const uint GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1u;
        
        public const uint GL_PERFQUERY_WAIT_INTEL = 33787u;
        
        public const uint GL_PERFQUERY_FLUSH_INTEL = 33786u;
        
        public const uint GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785u;
        
        public const uint GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128u;
        
        public const uint GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129u;
        
        public const uint GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130u;
        
        public const uint GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131u;
        
        public const uint GL_PERFQUERY_COUNTER_RAW_INTEL = 38132u;
        
        public const uint GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133u;
        
        public const uint GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136u;
        
        public const uint GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137u;
        
        public const uint GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138u;
        
        public const uint GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139u;
        
        public const uint GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140u;
        
        public const uint GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141u;
        
        public const uint GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142u;
        
        public const uint GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143u;
        
        public const uint GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144u;
        
        public const uint GL_NV_bindless_multi_draw_indirect = 1u;
        
        public const uint GL_NV_bindless_multi_draw_indirect_count = 1u;
        
        public const uint GL_NV_bindless_texture = 1u;
        
        public const uint GL_NV_blend_equation_advanced = 1u;
        
        public const uint GL_BLEND_OVERLAP_NV = 37505u;
        
        public const uint GL_BLEND_PREMULTIPLIED_SRC_NV = 37504u;
        
        public const uint GL_BLUE_NV = 6405u;
        
        public const uint GL_COLORBURN_NV = 37530u;
        
        public const uint GL_COLORDODGE_NV = 37529u;
        
        public const uint GL_CONJOINT_NV = 37508u;
        
        public const uint GL_CONTRAST_NV = 37537u;
        
        public const uint GL_DARKEN_NV = 37527u;
        
        public const uint GL_DIFFERENCE_NV = 37534u;
        
        public const uint GL_DISJOINT_NV = 37507u;
        
        public const uint GL_DST_ATOP_NV = 37519u;
        
        public const uint GL_DST_IN_NV = 37515u;
        
        public const uint GL_DST_NV = 37511u;
        
        public const uint GL_DST_OUT_NV = 37517u;
        
        public const uint GL_DST_OVER_NV = 37513u;
        
        public const uint GL_EXCLUSION_NV = 37536u;
        
        public const uint GL_GREEN_NV = 6404u;
        
        public const uint GL_HARDLIGHT_NV = 37531u;
        
        public const uint GL_HARDMIX_NV = 37545u;
        
        public const uint GL_HSL_COLOR_NV = 37551u;
        
        public const uint GL_HSL_HUE_NV = 37549u;
        
        public const uint GL_HSL_LUMINOSITY_NV = 37552u;
        
        public const uint GL_HSL_SATURATION_NV = 37550u;
        
        public const uint GL_INVERT_OVG_NV = 37556u;
        
        public const uint GL_INVERT_RGB_NV = 37539u;
        
        public const uint GL_LIGHTEN_NV = 37528u;
        
        public const uint GL_LINEARBURN_NV = 37541u;
        
        public const uint GL_LINEARDODGE_NV = 37540u;
        
        public const uint GL_LINEARLIGHT_NV = 37543u;
        
        public const uint GL_MINUS_CLAMPED_NV = 37555u;
        
        public const uint GL_MINUS_NV = 37535u;
        
        public const uint GL_MULTIPLY_NV = 37524u;
        
        public const uint GL_OVERLAY_NV = 37526u;
        
        public const uint GL_PINLIGHT_NV = 37544u;
        
        public const uint GL_PLUS_CLAMPED_ALPHA_NV = 37554u;
        
        public const uint GL_PLUS_CLAMPED_NV = 37553u;
        
        public const uint GL_PLUS_DARKER_NV = 37522u;
        
        public const uint GL_PLUS_NV = 37521u;
        
        public const uint GL_RED_NV = 6403u;
        
        public const uint GL_SCREEN_NV = 37525u;
        
        public const uint GL_SOFTLIGHT_NV = 37532u;
        
        public const uint GL_SRC_ATOP_NV = 37518u;
        
        public const uint GL_SRC_IN_NV = 37514u;
        
        public const uint GL_SRC_NV = 37510u;
        
        public const uint GL_SRC_OUT_NV = 37516u;
        
        public const uint GL_SRC_OVER_NV = 37512u;
        
        public const uint GL_UNCORRELATED_NV = 37506u;
        
        public const uint GL_VIVIDLIGHT_NV = 37542u;
        
        public const uint GL_XOR_NV = 5382u;
        
        public const uint GL_NV_blend_equation_advanced_coherent = 1u;
        
        public const uint GL_BLEND_ADVANCED_COHERENT_NV = 37509u;
        
        public const uint GL_NV_blend_minmax_factor = 1u;
        
        public const uint GL_FACTOR_MIN_AMD = 36892u;
        
        public const uint GL_FACTOR_MAX_AMD = 36893u;
        
        public const uint GL_NV_clip_space_w_scaling = 1u;
        
        public const uint GL_VIEWPORT_POSITION_W_SCALE_NV = 37756u;
        
        public const uint GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757u;
        
        public const uint GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758u;
        
        public const uint GL_NV_command_list = 1u;
        
        public const uint GL_TERMINATE_SEQUENCE_COMMAND_NV = 0u;
        
        public const uint GL_NOP_COMMAND_NV = 1u;
        
        public const uint GL_DRAW_ELEMENTS_COMMAND_NV = 2u;
        
        public const uint GL_DRAW_ARRAYS_COMMAND_NV = 3u;
        
        public const uint GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 4u;
        
        public const uint GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 5u;
        
        public const uint GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6u;
        
        public const uint GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7u;
        
        public const uint GL_ELEMENT_ADDRESS_COMMAND_NV = 8u;
        
        public const uint GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 9u;
        
        public const uint GL_UNIFORM_ADDRESS_COMMAND_NV = 10u;
        
        public const uint GL_BLEND_COLOR_COMMAND_NV = 11u;
        
        public const uint GL_STENCIL_REF_COMMAND_NV = 12u;
        
        public const uint GL_LINE_WIDTH_COMMAND_NV = 13u;
        
        public const uint GL_POLYGON_OFFSET_COMMAND_NV = 14u;
        
        public const uint GL_ALPHA_REF_COMMAND_NV = 15u;
        
        public const uint GL_VIEWPORT_COMMAND_NV = 16u;
        
        public const uint GL_SCISSOR_COMMAND_NV = 17u;
        
        public const uint GL_FRONT_FACE_COMMAND_NV = 18u;
        
        public const uint GL_NV_conditional_render = 1u;
        
        public const uint GL_QUERY_WAIT_NV = 36371u;
        
        public const uint GL_QUERY_NO_WAIT_NV = 36372u;
        
        public const uint GL_QUERY_BY_REGION_WAIT_NV = 36373u;
        
        public const uint GL_QUERY_BY_REGION_NO_WAIT_NV = 36374u;
        
        public const uint GL_NV_conservative_raster = 1u;
        
        public const uint GL_CONSERVATIVE_RASTERIZATION_NV = 37702u;
        
        public const uint GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703u;
        
        public const uint GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704u;
        
        public const uint GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705u;
        
        public const uint GL_NV_conservative_raster_dilate = 1u;
        
        public const uint GL_CONSERVATIVE_RASTER_DILATE_NV = 37753u;
        
        public const uint GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754u;
        
        public const uint GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755u;
        
        public const uint GL_NV_conservative_raster_pre_snap = 1u;
        
        public const uint GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 38224u;
        
        public const uint GL_NV_conservative_raster_pre_snap_triangles = 1u;
        
        public const uint GL_CONSERVATIVE_RASTER_MODE_NV = 38221u;
        
        public const uint GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222u;
        
        public const uint GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223u;
        
        public const uint GL_NV_conservative_raster_underestimation = 1u;
        
        public const uint GL_NV_draw_vulkan_image = 1u;
        
        public const uint GL_NV_fill_rectangle = 1u;
        
        public const uint GL_FILL_RECTANGLE_NV = 37692u;
        
        public const uint GL_NV_fragment_coverage_to_color = 1u;
        
        public const uint GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597u;
        
        public const uint GL_FRAGMENT_COVERAGE_COLOR_NV = 37598u;
        
        public const uint GL_NV_fragment_shader_interlock = 1u;
        
        public const uint GL_NV_framebuffer_mixed_samples = 1u;
        
        public const uint GL_COVERAGE_MODULATION_TABLE_NV = 37681u;
        
        public const uint GL_COLOR_SAMPLES_NV = 36384u;
        
        public const uint GL_DEPTH_SAMPLES_NV = 37677u;
        
        public const uint GL_STENCIL_SAMPLES_NV = 37678u;
        
        public const uint GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679u;
        
        public const uint GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680u;
        
        public const uint GL_COVERAGE_MODULATION_NV = 37682u;
        
        public const uint GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683u;
        
        public const uint GL_NV_framebuffer_multisample_coverage = 1u;
        
        public const uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011u;
        
        public const uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368u;
        
        public const uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369u;
        
        public const uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370u;
        
        public const uint GL_NV_geometry_shader_passthrough = 1u;
        
        public const uint GL_NV_gpu_shader5 = 1u;
        
        public const uint GL_INT64_NV = 5134u;
        
        public const uint GL_UNSIGNED_INT64_NV = 5135u;
        
        public const uint GL_INT8_NV = 36832u;
        
        public const uint GL_INT8_VEC2_NV = 36833u;
        
        public const uint GL_INT8_VEC3_NV = 36834u;
        
        public const uint GL_INT8_VEC4_NV = 36835u;
        
        public const uint GL_INT16_NV = 36836u;
        
        public const uint GL_INT16_VEC2_NV = 36837u;
        
        public const uint GL_INT16_VEC3_NV = 36838u;
        
        public const uint GL_INT16_VEC4_NV = 36839u;
        
        public const uint GL_INT64_VEC2_NV = 36841u;
        
        public const uint GL_INT64_VEC3_NV = 36842u;
        
        public const uint GL_INT64_VEC4_NV = 36843u;
        
        public const uint GL_UNSIGNED_INT8_NV = 36844u;
        
        public const uint GL_UNSIGNED_INT8_VEC2_NV = 36845u;
        
        public const uint GL_UNSIGNED_INT8_VEC3_NV = 36846u;
        
        public const uint GL_UNSIGNED_INT8_VEC4_NV = 36847u;
        
        public const uint GL_UNSIGNED_INT16_NV = 36848u;
        
        public const uint GL_UNSIGNED_INT16_VEC2_NV = 36849u;
        
        public const uint GL_UNSIGNED_INT16_VEC3_NV = 36850u;
        
        public const uint GL_UNSIGNED_INT16_VEC4_NV = 36851u;
        
        public const uint GL_UNSIGNED_INT64_VEC2_NV = 36853u;
        
        public const uint GL_UNSIGNED_INT64_VEC3_NV = 36854u;
        
        public const uint GL_UNSIGNED_INT64_VEC4_NV = 36855u;
        
        public const uint GL_FLOAT16_NV = 36856u;
        
        public const uint GL_FLOAT16_VEC2_NV = 36857u;
        
        public const uint GL_FLOAT16_VEC3_NV = 36858u;
        
        public const uint GL_FLOAT16_VEC4_NV = 36859u;
        
        public const uint GL_NV_internalformat_sample_query = 1u;
        
        public const uint GL_MULTISAMPLES_NV = 37745u;
        
        public const uint GL_SUPERSAMPLE_SCALE_X_NV = 37746u;
        
        public const uint GL_SUPERSAMPLE_SCALE_Y_NV = 37747u;
        
        public const uint GL_CONFORMANT_NV = 37748u;
        
        public const uint GL_NV_path_rendering = 1u;
        
        public const uint GL_PATH_FORMAT_SVG_NV = 36976u;
        
        public const uint GL_PATH_FORMAT_PS_NV = 36977u;
        
        public const uint GL_STANDARD_FONT_NAME_NV = 36978u;
        
        public const uint GL_SYSTEM_FONT_NAME_NV = 36979u;
        
        public const uint GL_FILE_NAME_NV = 36980u;
        
        public const uint GL_PATH_STROKE_WIDTH_NV = 36981u;
        
        public const uint GL_PATH_END_CAPS_NV = 36982u;
        
        public const uint GL_PATH_INITIAL_END_CAP_NV = 36983u;
        
        public const uint GL_PATH_TERMINAL_END_CAP_NV = 36984u;
        
        public const uint GL_PATH_JOIN_STYLE_NV = 36985u;
        
        public const uint GL_PATH_MITER_LIMIT_NV = 36986u;
        
        public const uint GL_PATH_DASH_CAPS_NV = 36987u;
        
        public const uint GL_PATH_INITIAL_DASH_CAP_NV = 36988u;
        
        public const uint GL_PATH_TERMINAL_DASH_CAP_NV = 36989u;
        
        public const uint GL_PATH_DASH_OFFSET_NV = 36990u;
        
        public const uint GL_PATH_CLIENT_LENGTH_NV = 36991u;
        
        public const uint GL_PATH_FILL_MODE_NV = 36992u;
        
        public const uint GL_PATH_FILL_MASK_NV = 36993u;
        
        public const uint GL_PATH_FILL_COVER_MODE_NV = 36994u;
        
        public const uint GL_PATH_STROKE_COVER_MODE_NV = 36995u;
        
        public const uint GL_PATH_STROKE_MASK_NV = 36996u;
        
        public const uint GL_COUNT_UP_NV = 37000u;
        
        public const uint GL_COUNT_DOWN_NV = 37001u;
        
        public const uint GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002u;
        
        public const uint GL_CONVEX_HULL_NV = 37003u;
        
        public const uint GL_BOUNDING_BOX_NV = 37005u;
        
        public const uint GL_TRANSLATE_X_NV = 37006u;
        
        public const uint GL_TRANSLATE_Y_NV = 37007u;
        
        public const uint GL_TRANSLATE_2D_NV = 37008u;
        
        public const uint GL_TRANSLATE_3D_NV = 37009u;
        
        public const uint GL_AFFINE_2D_NV = 37010u;
        
        public const uint GL_AFFINE_3D_NV = 37012u;
        
        public const uint GL_TRANSPOSE_AFFINE_2D_NV = 37014u;
        
        public const uint GL_TRANSPOSE_AFFINE_3D_NV = 37016u;
        
        public const uint GL_UTF8_NV = 37018u;
        
        public const uint GL_UTF16_NV = 37019u;
        
        public const uint GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020u;
        
        public const uint GL_PATH_COMMAND_COUNT_NV = 37021u;
        
        public const uint GL_PATH_COORD_COUNT_NV = 37022u;
        
        public const uint GL_PATH_DASH_ARRAY_COUNT_NV = 37023u;
        
        public const uint GL_PATH_COMPUTED_LENGTH_NV = 37024u;
        
        public const uint GL_PATH_FILL_BOUNDING_BOX_NV = 37025u;
        
        public const uint GL_PATH_STROKE_BOUNDING_BOX_NV = 37026u;
        
        public const uint GL_SQUARE_NV = 37027u;
        
        public const uint GL_ROUND_NV = 37028u;
        
        public const uint GL_TRIANGULAR_NV = 37029u;
        
        public const uint GL_BEVEL_NV = 37030u;
        
        public const uint GL_MITER_REVERT_NV = 37031u;
        
        public const uint GL_MITER_TRUNCATE_NV = 37032u;
        
        public const uint GL_SKIP_MISSING_GLYPH_NV = 37033u;
        
        public const uint GL_USE_MISSING_GLYPH_NV = 37034u;
        
        public const uint GL_PATH_ERROR_POSITION_NV = 37035u;
        
        public const uint GL_ACCUM_ADJACENT_PAIRS_NV = 37037u;
        
        public const uint GL_ADJACENT_PAIRS_NV = 37038u;
        
        public const uint GL_FIRST_TO_REST_NV = 37039u;
        
        public const uint GL_PATH_GEN_MODE_NV = 37040u;
        
        public const uint GL_PATH_GEN_COEFF_NV = 37041u;
        
        public const uint GL_PATH_GEN_COMPONENTS_NV = 37043u;
        
        public const uint GL_PATH_STENCIL_FUNC_NV = 37047u;
        
        public const uint GL_PATH_STENCIL_REF_NV = 37048u;
        
        public const uint GL_PATH_STENCIL_VALUE_MASK_NV = 37049u;
        
        public const uint GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053u;
        
        public const uint GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054u;
        
        public const uint GL_PATH_COVER_DEPTH_FUNC_NV = 37055u;
        
        public const uint GL_PATH_DASH_OFFSET_RESET_NV = 37044u;
        
        public const uint GL_MOVE_TO_RESETS_NV = 37045u;
        
        public const uint GL_MOVE_TO_CONTINUES_NV = 37046u;
        
        public const uint GL_CLOSE_PATH_NV = 0u;
        
        public const uint GL_MOVE_TO_NV = 2u;
        
        public const uint GL_RELATIVE_MOVE_TO_NV = 3u;
        
        public const uint GL_LINE_TO_NV = 4u;
        
        public const uint GL_RELATIVE_LINE_TO_NV = 5u;
        
        public const uint GL_HORIZONTAL_LINE_TO_NV = 6u;
        
        public const uint GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7u;
        
        public const uint GL_VERTICAL_LINE_TO_NV = 8u;
        
        public const uint GL_RELATIVE_VERTICAL_LINE_TO_NV = 9u;
        
        public const uint GL_QUADRATIC_CURVE_TO_NV = 10u;
        
        public const uint GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11u;
        
        public const uint GL_CUBIC_CURVE_TO_NV = 12u;
        
        public const uint GL_RELATIVE_CUBIC_CURVE_TO_NV = 13u;
        
        public const uint GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14u;
        
        public const uint GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15u;
        
        public const uint GL_SMOOTH_CUBIC_CURVE_TO_NV = 16u;
        
        public const uint GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17u;
        
        public const uint GL_SMALL_CCW_ARC_TO_NV = 18u;
        
        public const uint GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19u;
        
        public const uint GL_SMALL_CW_ARC_TO_NV = 20u;
        
        public const uint GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21u;
        
        public const uint GL_LARGE_CCW_ARC_TO_NV = 22u;
        
        public const uint GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23u;
        
        public const uint GL_LARGE_CW_ARC_TO_NV = 24u;
        
        public const uint GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25u;
        
        public const uint GL_RESTART_PATH_NV = 240u;
        
        public const uint GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242u;
        
        public const uint GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244u;
        
        public const uint GL_RECT_NV = 246u;
        
        public const uint GL_CIRCULAR_CCW_ARC_TO_NV = 248u;
        
        public const uint GL_CIRCULAR_CW_ARC_TO_NV = 250u;
        
        public const uint GL_CIRCULAR_TANGENT_ARC_TO_NV = 252u;
        
        public const uint GL_ARC_TO_NV = 254u;
        
        public const uint GL_RELATIVE_ARC_TO_NV = 255u;
        
        public const uint GL_BOLD_BIT_NV = 1u;
        
        public const uint GL_ITALIC_BIT_NV = 2u;
        
        public const uint GL_GLYPH_WIDTH_BIT_NV = 1u;
        
        public const uint GL_GLYPH_HEIGHT_BIT_NV = 2u;
        
        public const uint GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4u;
        
        public const uint GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8u;
        
        public const uint GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16u;
        
        public const uint GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32u;
        
        public const uint GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64u;
        
        public const uint GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128u;
        
        public const uint GL_GLYPH_HAS_KERNING_BIT_NV = 256u;
        
        public const uint GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536u;
        
        public const uint GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072u;
        
        public const uint GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144u;
        
        public const uint GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288u;
        
        public const uint GL_FONT_UNITS_PER_EM_BIT_NV = 1048576u;
        
        public const uint GL_FONT_ASCENDER_BIT_NV = 2097152u;
        
        public const uint GL_FONT_DESCENDER_BIT_NV = 4194304u;
        
        public const uint GL_FONT_HEIGHT_BIT_NV = 8388608u;
        
        public const uint GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216u;
        
        public const uint GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432u;
        
        public const uint GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864u;
        
        public const uint GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728u;
        
        public const uint GL_FONT_HAS_KERNING_BIT_NV = 268435456u;
        
        public const uint GL_ROUNDED_RECT_NV = 232u;
        
        public const uint GL_RELATIVE_ROUNDED_RECT_NV = 233u;
        
        public const uint GL_ROUNDED_RECT2_NV = 234u;
        
        public const uint GL_RELATIVE_ROUNDED_RECT2_NV = 235u;
        
        public const uint GL_ROUNDED_RECT4_NV = 236u;
        
        public const uint GL_RELATIVE_ROUNDED_RECT4_NV = 237u;
        
        public const uint GL_ROUNDED_RECT8_NV = 238u;
        
        public const uint GL_RELATIVE_ROUNDED_RECT8_NV = 239u;
        
        public const uint GL_RELATIVE_RECT_NV = 247u;
        
        public const uint GL_FONT_GLYPHS_AVAILABLE_NV = 37736u;
        
        public const uint GL_FONT_TARGET_UNAVAILABLE_NV = 37737u;
        
        public const uint GL_FONT_UNAVAILABLE_NV = 37738u;
        
        public const uint GL_FONT_UNINTELLIGIBLE_NV = 37739u;
        
        public const uint GL_CONIC_CURVE_TO_NV = 26u;
        
        public const uint GL_RELATIVE_CONIC_CURVE_TO_NV = 27u;
        
        public const uint GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912u;
        
        public const uint GL_STANDARD_FONT_FORMAT_NV = 37740u;
        
        public const uint GL_PATH_PROJECTION_NV = 5889u;
        
        public const uint GL_PATH_MODELVIEW_NV = 5888u;
        
        public const uint GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979u;
        
        public const uint GL_PATH_MODELVIEW_MATRIX_NV = 2982u;
        
        public const uint GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382u;
        
        public const uint GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019u;
        
        public const uint GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980u;
        
        public const uint GL_PATH_PROJECTION_MATRIX_NV = 2983u;
        
        public const uint GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384u;
        
        public const uint GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020u;
        
        public const uint GL_FRAGMENT_INPUT_NV = 37741u;
        
        public const uint GL_NV_path_rendering_shared_edge = 1u;
        
        public const uint GL_SHARED_EDGE_NV = 192u;
        
        public const uint GL_NV_sample_locations = 1u;
        
        public const uint GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693u;
        
        public const uint GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694u;
        
        public const uint GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695u;
        
        public const uint GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696u;
        
        public const uint GL_SAMPLE_LOCATION_NV = 36432u;
        
        public const uint GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697u;
        
        public const uint GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698u;
        
        public const uint GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699u;
        
        public const uint GL_NV_sample_mask_override_coverage = 1u;
        
        public const uint GL_NV_shader_atomic_counters = 1u;
        
        public const uint GL_NV_shader_atomic_float = 1u;
        
        public const uint GL_NV_shader_atomic_float64 = 1u;
        
        public const uint GL_NV_shader_atomic_fp16_vector = 1u;
        
        public const uint GL_NV_shader_atomic_int64 = 1u;
        
        public const uint GL_NV_shader_buffer_load = 1u;
        
        public const uint GL_BUFFER_GPU_ADDRESS_NV = 36637u;
        
        public const uint GL_GPU_ADDRESS_NV = 36660u;
        
        public const uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661u;
        
        public const uint GL_NV_shader_buffer_store = 1u;
        
        public const uint GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16u;
        
        public const uint GL_NV_shader_thread_group = 1u;
        
        public const uint GL_WARP_SIZE_NV = 37689u;
        
        public const uint GL_WARPS_PER_SM_NV = 37690u;
        
        public const uint GL_SM_COUNT_NV = 37691u;
        
        public const uint GL_NV_shader_thread_shuffle = 1u;
        
        public const uint GL_NV_stereo_view_rendering = 1u;
        
        public const uint GL_NV_texture_barrier = 1u;
        
        public const uint GL_NV_texture_rectangle_compressed = 1u;
        
        public const uint GL_NV_uniform_buffer_unified_memory = 1u;
        
        public const uint GL_UNIFORM_BUFFER_UNIFIED_NV = 37742u;
        
        public const uint GL_UNIFORM_BUFFER_ADDRESS_NV = 37743u;
        
        public const uint GL_UNIFORM_BUFFER_LENGTH_NV = 37744u;
        
        public const uint GL_NV_vertex_attrib_integer_64bit = 1u;
        
        public const uint GL_NV_vertex_buffer_unified_memory = 1u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638u;
        
        public const uint GL_ELEMENT_ARRAY_UNIFIED_NV = 36639u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640u;
        
        public const uint GL_VERTEX_ARRAY_ADDRESS_NV = 36641u;
        
        public const uint GL_NORMAL_ARRAY_ADDRESS_NV = 36642u;
        
        public const uint GL_COLOR_ARRAY_ADDRESS_NV = 36643u;
        
        public const uint GL_INDEX_ARRAY_ADDRESS_NV = 36644u;
        
        public const uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645u;
        
        public const uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646u;
        
        public const uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647u;
        
        public const uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648u;
        
        public const uint GL_ELEMENT_ARRAY_ADDRESS_NV = 36649u;
        
        public const uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650u;
        
        public const uint GL_VERTEX_ARRAY_LENGTH_NV = 36651u;
        
        public const uint GL_NORMAL_ARRAY_LENGTH_NV = 36652u;
        
        public const uint GL_COLOR_ARRAY_LENGTH_NV = 36653u;
        
        public const uint GL_INDEX_ARRAY_LENGTH_NV = 36654u;
        
        public const uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655u;
        
        public const uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656u;
        
        public const uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657u;
        
        public const uint GL_FOG_COORD_ARRAY_LENGTH_NV = 36658u;
        
        public const uint GL_ELEMENT_ARRAY_LENGTH_NV = 36659u;
        
        public const uint GL_DRAW_INDIRECT_UNIFIED_NV = 36672u;
        
        public const uint GL_DRAW_INDIRECT_ADDRESS_NV = 36673u;
        
        public const uint GL_DRAW_INDIRECT_LENGTH_NV = 36674u;
        
        public const uint GL_NV_viewport_array2 = 1u;
        
        public const uint GL_NV_viewport_swizzle = 1u;
        
        public const uint GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712u;
        
        public const uint GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713u;
        
        public const uint GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714u;
        
        public const uint GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715u;
        
        public const uint GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716u;
        
        public const uint GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717u;
        
        public const uint GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718u;
        
        public const uint GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719u;
        
        public const uint GL_VIEWPORT_SWIZZLE_X_NV = 37720u;
        
        public const uint GL_VIEWPORT_SWIZZLE_Y_NV = 37721u;
        
        public const uint GL_VIEWPORT_SWIZZLE_Z_NV = 37722u;
        
        public const uint GL_VIEWPORT_SWIZZLE_W_NV = 37723u;
        
        public const uint GL_OVR_multiview = 1u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448u;
        
        public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450u;
        
        public const uint GL_MAX_VIEWS_OVR = 38449u;
        
        public const uint GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451u;
        
        public const uint GL_OVR_multiview2 = 1u;
    }
    
    public enum BeginQueryTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        AnySamplesPassedConservative = 36202u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
    }
    
    public enum EndQueryTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        AnySamplesPassedConservative = 36202u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
    }
    
    public enum BeginQueryIndexedTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
    }
    
    public enum EndQueryIndexedTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
    }
    
    public enum BindBufferBaseTarget : uint
    {
        
        AtomicCounterBuffer = 37568u,
        
        TransformFeedbackBuffer = 35982u,
        
        UniformBuffer = 35345u,
        
        ShaderStorageBuffer = 37074u,
    }
    
    public enum BindBufferRangeTarget : uint
    {
        
        AtomicCounterBuffer = 37568u,
        
        TransformFeedbackBuffer = 35982u,
        
        UniformBuffer = 35345u,
        
        ShaderStorageBuffer = 37074u,
    }
    
    public enum BindBuffersBaseTarget : uint
    {
        
        AtomicCounterBuffer = 37568u,
        
        TransformFeedbackBuffer = 35982u,
        
        UniformBuffer = 35345u,
        
        ShaderStorageBuffer = 37074u,
    }
    
    public enum BindBuffersRangeTarget : uint
    {
        
        AtomicCounterBuffer = 37568u,
        
        TransformFeedbackBuffer = 35982u,
        
        UniformBuffer = 35345u,
        
        ShaderStorageBuffer = 37074u,
    }
    
    public enum BindRenderbufferTarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum BindTextureTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureBuffer = 35882u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
    }
    
    public enum BindTransformFeedbackTarget : uint
    {
        
        TransformFeedback = 36386u,
    }
    
    public enum BlendEquationMode : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendEquationiMode : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendEquationSeparateModeRGB : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendEquationSeparateModeAlpha : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendEquationSeparateiModeRGB : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendEquationSeparateiModeAlpha : uint
    {
        
        FuncAdd = 32774u,
        
        FuncSubtract = 32778u,
        
        FuncReverseSubtract = 32779u,
        
        Min = 32775u,
        
        Max = 32776u,
    }
    
    public enum BlendFuncSeparateSrcRGB : uint
    {
        
        One = 1u,
    }
    
    public enum BlendFuncSeparateDstRGB : uint
    {
        
        Zero = 0u,
    }
    
    public enum BlendFuncSeparateSrcAlpha : uint
    {
        
        One = 1u,
    }
    
    public enum BlendFuncSeparateDstAlpha : uint
    {
        
        Zero = 0u,
    }
    
    public enum BlendFuncSeparateiSrcRGB : uint
    {
        
        One = 1u,
    }
    
    public enum BlendFuncSeparateiDstRGB : uint
    {
        
        Zero = 0u,
    }
    
    public enum BlendFuncSeparateiSrcAlpha : uint
    {
        
        One = 1u,
    }
    
    public enum BlendFuncSeparateiDstAlpha : uint
    {
        
        Zero = 0u,
    }
    
    [FlagsAttribute()]
    public enum BlitFramebufferMask : uint
    {
        
        ColorBufferBit = 16384u,
        
        DepthBufferBit = 256u,
        
        StencilBufferBit = 1024u,
    }
    
    public enum BlitFramebufferFilter : uint
    {
        
        Nearest = 9728u,
        
        Linear = 9729u,
    }
    
    [FlagsAttribute()]
    public enum BlitNamedFramebufferMask : uint
    {
        
        ColorBufferBit = 16384u,
        
        DepthBufferBit = 256u,
        
        StencilBufferBit = 1024u,
    }
    
    public enum BlitNamedFramebufferFilter : uint
    {
        
        Nearest = 9728u,
        
        Linear = 9729u,
    }
    
    [FlagsAttribute()]
    public enum BufferStorageFlags : uint
    {
        
        DynamicStorageBit = 256u,
        
        MapReadBit = 1u,
        
        MapWriteBit = 2u,
        
        MapPersistentBit = 64u,
        
        MapCoherentBit = 128u,
        
        ClientStorageBit = 512u,
    }
    
    [FlagsAttribute()]
    public enum NamedBufferStorageFlags : uint
    {
        
        DynamicStorageBit = 256u,
        
        MapReadBit = 1u,
        
        MapWriteBit = 2u,
        
        MapPersistentBit = 64u,
        
        MapCoherentBit = 128u,
        
        ClientStorageBit = 512u,
    }
    
    public enum ClampColorTarget : uint
    {
        
        ClampReadColor = 35100u,
    }
    
    public enum ClampColorClamp : uint
    {
        
        True = 1u,
        
        False = 0u,
    }
    
    [FlagsAttribute()]
    public enum ClearMask : uint
    {
        
        ColorBufferBit = 16384u,
        
        DepthBufferBit = 256u,
        
        StencilBufferBit = 1024u,
    }
    
    [FlagsAttribute()]
    public enum ClientWaitSyncFlags : uint
    {
        
        SyncFlushCommandsBit = 1u,
    }
    
    public enum ClipControlOrigin : uint
    {
        
        LowerLeft = 36001u,
        
        UpperLeft = 36002u,
    }
    
    public enum ClipControlDepth : uint
    {
        
        NegativeOneToOne = 37726u,
        
        ZeroToOne = 37727u,
    }
    
    public enum CompressedTexImage1DTarget : uint
    {
        
        Texture1d = 3552u,
        
        ProxyTexture1d = 32867u,
    }
    
    public enum CompressedTexImage2DTarget : uint
    {
        
        Texture2d = 3553u,
        
        ProxyTexture2d = 32868u,
        
        Texture1dArray = 35864u,
        
        ProxyTexture1dArray = 35865u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        ProxyTextureCubeMap = 34075u,
    }
    
    public enum CompressedTexImage3DTarget : uint
    {
        
        Texture3d = 32879u,
        
        ProxyTexture3d = 32880u,
        
        Texture2dArray = 35866u,
        
        ProxyTexture2dArray = 35867u,
    }
    
    public enum CompressedTexSubImage1DTarget : uint
    {
        
        Texture1d = 3552u,
    }
    
    public enum CompressedTexSubImage2DTarget : uint
    {
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
    }
    
    public enum CompressedTexSubImage3DTarget : uint
    {
        
        Texture2dArray = 35866u,
        
        Texture3d = 32879u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum CopyTexImage1DTarget : uint
    {
        
        Texture1d = 3552u,
    }
    
    public enum CopyTexImage1DInternalformat : uint
    {
        
        CompressedRed = 33317u,
        
        CompressedRg = 33318u,
        
        CompressedRgb = 34029u,
        
        CompressedRgba = 34030u,
        
        CompressedSrgb = 35912u,
        
        CompressedSrgbAlpha = 35913u,
        
        DepthComponent = 6402u,
        
        DepthComponent16 = 33189u,
        
        DepthComponent24 = 33190u,
        
        DepthComponent32 = 33191u,
        
        StencilIndex8 = 36168u,
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        R3G3B2 = 10768u,
        
        Rgb4 = 32847u,
        
        Rgb5 = 32848u,
        
        Rgb8 = 32849u,
        
        Rgb10 = 32850u,
        
        Rgb12 = 32851u,
        
        Rgb16 = 32852u,
        
        Rgba = 6408u,
        
        Rgba2 = 32853u,
        
        Rgba4 = 32854u,
        
        Rgb5A1 = 32855u,
        
        Rgba8 = 32856u,
        
        Rgb10A2 = 32857u,
        
        Rgba12 = 32858u,
        
        Rgba16 = 32859u,
        
        Srgb = 35904u,
        
        Srgb8 = 35905u,
        
        SrgbAlpha = 35906u,
        
        Srgb8Alpha8 = 35907u,
    }
    
    public enum CopyTexImage2DTarget : uint
    {
        
        Texture2d = 3553u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
    }
    
    public enum CopyTexImage2DInternalformat : uint
    {
        
        CompressedRed = 33317u,
        
        CompressedRg = 33318u,
        
        CompressedRgb = 34029u,
        
        CompressedRgba = 34030u,
        
        CompressedSrgb = 35912u,
        
        CompressedSrgbAlpha = 35913u,
        
        DepthComponent = 6402u,
        
        DepthComponent16 = 33189u,
        
        DepthComponent24 = 33190u,
        
        DepthComponent32 = 33191u,
        
        StencilIndex8 = 36168u,
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        R3G3B2 = 10768u,
        
        Rgb4 = 32847u,
        
        Rgb5 = 32848u,
        
        Rgb8 = 32849u,
        
        Rgb10 = 32850u,
        
        Rgb12 = 32851u,
        
        Rgb16 = 32852u,
        
        Rgba = 6408u,
        
        Rgba2 = 32853u,
        
        Rgba4 = 32854u,
        
        Rgb5A1 = 32855u,
        
        Rgba8 = 32856u,
        
        Rgb10A2 = 32857u,
        
        Rgba12 = 32858u,
        
        Rgba16 = 32859u,
        
        Srgb = 35904u,
        
        Srgb8 = 35905u,
        
        SrgbAlpha = 35906u,
        
        Srgb8Alpha8 = 35907u,
    }
    
    public enum CopyTexSubImage1DTarget : uint
    {
        
        Texture1d = 3552u,
    }
    
    public enum CopyTexSubImage2DTarget : uint
    {
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        TextureRectangle = 34037u,
    }
    
    public enum CopyTexSubImage3DTarget : uint
    {
        
        Texture3d = 32879u,
        
        Texture2dArray = 35866u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum CreateShaderShaderType : uint
    {
        
        ComputeShader = 37305u,
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum CullFaceMode : uint
    {
        
        Front = 1028u,
        
        Back = 1029u,
        
        FrontAndBack = 1032u,
    }
    
    public enum DepthFuncFunc : uint
    {
        
        Never = 512u,
        
        Less = 513u,
        
        Equal = 514u,
        
        Lequal = 515u,
        
        Greater = 516u,
        
        Notequal = 517u,
        
        Gequal = 518u,
        
        Always = 519u,
    }
    
    public enum DrawArraysMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawArraysIndirectMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawArraysInstancedMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawArraysInstancedBaseInstanceMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawBufferBuf : uint
    {
        
        None = 0u,
        
        FrontLeft = 1024u,
        
        FrontRight = 1025u,
        
        BackLeft = 1026u,
        
        BackRight = 1027u,
        
        Front = 1028u,
        
        Back = 1029u,
        
        Left = 1030u,
        
        Right = 1031u,
        
        FrontAndBack = 1032u,
        
        MaxColorAttachments = 36063u,
    }
    
    public enum NamedFramebufferDrawBufferBuf : uint
    {
        
        None = 0u,
        
        FrontLeft = 1024u,
        
        FrontRight = 1025u,
        
        BackLeft = 1026u,
        
        BackRight = 1027u,
        
        Front = 1028u,
        
        Back = 1029u,
        
        Left = 1030u,
        
        Right = 1031u,
        
        FrontAndBack = 1032u,
        
        MaxColorAttachments = 36063u,
    }
    
    public enum DrawElementsMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawElementsBaseVertexMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsBaseVertexType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawElementsIndirectMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsIndirectType : uint
    {
        
        ElementArrayBuffer = 34963u,
    }
    
    public enum DrawElementsInstancedMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsInstancedType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawElementsInstancedBaseInstanceMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsInstancedBaseInstanceType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawElementsInstancedBaseVertexMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsInstancedBaseVertexType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawElementsInstancedBaseVertexBaseInstanceMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawElementsInstancedBaseVertexBaseInstanceType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawRangeElementsMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawRangeElementsType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawRangeElementsBaseVertexMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        LinesAdjacency = 10u,
        
        LineStripAdjacency = 11u,
        
        TrianglesAdjacency = 12u,
        
        TriangleStripAdjacency = 13u,
        
        Patches = 14u,
    }
    
    public enum DrawRangeElementsBaseVertexType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum DrawTransformFeedbackMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawTransformFeedbackInstancedMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawTransformFeedbackStreamMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum DrawTransformFeedbackStreamInstancedMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum FenceSyncCondition : uint
    {
        
        SyncGpuCommandsComplete = 37143u,
    }
    
    public enum FramebufferRenderbufferRenderbuffertarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum NamedFramebufferRenderbufferRenderbuffertarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum FrontFaceMode : uint
    {
        
        Cw = 2304u,
        
        Ccw = 2305u,
    }
    
    public enum GenerateMipmapTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetActiveSubroutineUniformivShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetActiveSubroutineUniformivPname : uint
    {
        
        NumCompatibleSubroutines = 36426u,
        
        CompatibleSubroutines = 36427u,
        
        UniformSize = 35384u,
        
        UniformNameLength = 35385u,
    }
    
    public enum GetActiveSubroutineUniformNameShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetBufferPointervPname : uint
    {
        
        BufferMapPointer = 35005u,
    }
    
    public enum GetNamedBufferPointervPname : uint
    {
        
        BufferMapPointer = 35005u,
    }
    
    public enum GetCompressedTexImageTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture3d = 32879u,
        
        TextureCubeMapArray = 36873u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        TextureRectangle = 34037u,
    }
    
    public enum GetnCompressedTexImageTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture3d = 32879u,
        
        TextureCubeMapArray = 36873u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        TextureRectangle = 34037u,
    }
    
    public enum GetInternalformativTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
        
        TextureBuffer = 35882u,
        
        Renderbuffer = 36161u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
    }
    
    public enum GetInternalformati64vTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
        
        TextureBuffer = 35882u,
        
        Renderbuffer = 36161u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
    }
    
    public enum GetMultisamplefvPname : uint
    {
        
        SamplePosition = 36432u,
    }
    
    public enum GetPointervPname : uint
    {
        
        DebugCallbackFunction = 33348u,
        
        DebugCallbackUserParam = 33349u,
    }
    
    public enum GetProgramivPname : uint
    {
        
        DeleteStatus = 35712u,
        
        LinkStatus = 35714u,
        
        ValidateStatus = 35715u,
        
        InfoLogLength = 35716u,
        
        AttachedShaders = 35717u,
        
        ActiveAtomicCounterBuffers = 37593u,
        
        ActiveAttributes = 35721u,
        
        ActiveAttributeMaxLength = 35722u,
        
        ActiveUniforms = 35718u,
        
        ActiveUniformBlocks = 35382u,
        
        ActiveUniformBlockMaxNameLength = 35381u,
        
        ActiveUniformMaxLength = 35719u,
        
        ComputeWorkGroupSize = 33383u,
        
        ProgramBinaryLength = 34625u,
        
        TransformFeedbackBufferMode = 35967u,
        
        TransformFeedbackVaryings = 35971u,
        
        TransformFeedbackVaryingMaxLength = 35958u,
        
        GeometryVerticesOut = 35094u,
        
        GeometryInputType = 35095u,
        
        GeometryOutputType = 35096u,
    }
    
    public enum GetProgramStageivShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetProgramStageivPname : uint
    {
        
        ActiveSubroutineUniforms = 36326u,
        
        ActiveSubroutineUniformLocations = 36423u,
        
        ActiveSubroutines = 36325u,
        
        ActiveSubroutineUniformMaxLength = 36425u,
        
        ActiveSubroutineMaxLength = 36424u,
    }
    
    public enum GetQueryIndexedivTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        AnySamplesPassedConservative = 36202u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
        
        Timestamp = 36392u,
    }
    
    public enum GetQueryIndexedivPname : uint
    {
        
        CurrentQuery = 34917u,
        
        QueryCounterBits = 34916u,
    }
    
    public enum GetQueryivTarget : uint
    {
        
        SamplesPassed = 35092u,
        
        AnySamplesPassed = 35887u,
        
        AnySamplesPassedConservative = 36202u,
        
        PrimitivesGenerated = 35975u,
        
        TransformFeedbackPrimitivesWritten = 35976u,
        
        TimeElapsed = 35007u,
        
        Timestamp = 36392u,
    }
    
    public enum GetQueryivPname : uint
    {
        
        CurrentQuery = 34917u,
        
        QueryCounterBits = 34916u,
    }
    
    public enum GetQueryObjectivPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryObjectuivPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryObjecti64vPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryObjectui64vPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryBufferObjectivPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryBufferObjectuivPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryBufferObjecti64vPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetQueryBufferObjectui64vPname : uint
    {
        
        QueryResult = 34918u,
        
        QueryResultAvailable = 34919u,
    }
    
    public enum GetRenderbufferParameterivTarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum GetSamplerParameterfvPname : uint
    {
        
        TextureMagFilter = 10240u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum GetSamplerParameterivPname : uint
    {
        
        TextureMagFilter = 10240u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum GetSamplerParameterIivPname : uint
    {
        
        TextureMagFilter = 10240u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum GetSamplerParameterIuivPname : uint
    {
        
        TextureMagFilter = 10240u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum GetShaderivPname : uint
    {
        
        ShaderType = 35663u,
        
        DeleteStatus = 35712u,
        
        CompileStatus = 35713u,
        
        InfoLogLength = 35716u,
        
        ShaderSourceLength = 35720u,
    }
    
    public enum GetShaderPrecisionFormatShaderType : uint
    {
        
        VertexShader = 35633u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetStringName : uint
    {
        
        Vendor = 7936u,
        
        Renderer = 7937u,
        
        Version = 7938u,
        
        ShadingLanguageVersion = 35724u,
        
        Extensions = 7939u,
    }
    
    public enum GetStringiName : uint
    {
        
        Vendor = 7936u,
        
        Renderer = 7937u,
        
        Version = 7938u,
        
        ShadingLanguageVersion = 35724u,
        
        Extensions = 7939u,
    }
    
    public enum GetSubroutineIndexShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetSubroutineUniformLocationShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetTexImageTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetTexImageFormat : uint
    {
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
        
        Red = 6403u,
        
        Green = 6404u,
        
        Blue = 6405u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Rgba = 6408u,
        
        Bgr = 32992u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        GreenInteger = 36245u,
        
        BlueInteger = 36246u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        RgbaInteger = 36249u,
        
        BgrInteger = 36250u,
        
        BgraInteger = 36251u,
    }
    
    public enum GetTexImageType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt248 = 34042u,
        
        UnsignedInt10f11f11fRev = 35899u,
        
        UnsignedInt5999Rev = 35902u,
        
        Float32UnsignedInt248Rev = 36269u,
    }
    
    public enum GetnTexImageTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetnTexImageFormat : uint
    {
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
        
        Red = 6403u,
        
        Green = 6404u,
        
        Blue = 6405u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Rgba = 6408u,
        
        Bgr = 32992u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        GreenInteger = 36245u,
        
        BlueInteger = 36246u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        RgbaInteger = 36249u,
        
        BgrInteger = 36250u,
        
        BgraInteger = 36251u,
    }
    
    public enum GetnTexImageType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt248 = 34042u,
        
        UnsignedInt10f11f11fRev = 35899u,
        
        UnsignedInt5999Rev = 35902u,
        
        Float32UnsignedInt248Rev = 36269u,
    }
    
    public enum GetTextureImageFormat : uint
    {
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
        
        Red = 6403u,
        
        Green = 6404u,
        
        Blue = 6405u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Rgba = 6408u,
        
        Bgr = 32992u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        GreenInteger = 36245u,
        
        BlueInteger = 36246u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        RgbaInteger = 36249u,
        
        BgrInteger = 36250u,
        
        BgraInteger = 36251u,
    }
    
    public enum GetTextureImageType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt248 = 34042u,
        
        UnsignedInt10f11f11fRev = 35899u,
        
        UnsignedInt5999Rev = 35902u,
        
        Float32UnsignedInt248Rev = 36269u,
    }
    
    public enum GetTexLevelParameterfvTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureRectangle = 34037u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        ProxyTexture1d = 32867u,
        
        ProxyTexture2d = 32868u,
        
        ProxyTexture3d = 32880u,
        
        ProxyTexture1dArray = 35865u,
        
        ProxyTexture2dArray = 35867u,
        
        ProxyTextureRectangle = 34039u,
        
        ProxyTexture2dMultisample = 37121u,
        
        ProxyTexture2dMultisampleArray = 37123u,
        
        ProxyTextureCubeMap = 34075u,
        
        TextureBuffer = 35882u,
    }
    
    public enum GetTexLevelParameterfvPname : uint
    {
        
        TextureWidth = 4096u,
        
        TextureHeight = 4097u,
        
        TextureDepth = 32881u,
        
        TextureInternalFormat = 4099u,
        
        TextureRedSize = 32860u,
        
        TextureGreenSize = 32861u,
        
        TextureBlueSize = 32862u,
        
        TextureAlphaSize = 32863u,
        
        TextureDepthSize = 34890u,
        
        TextureCompressed = 34465u,
        
        TextureCompressedImageSize = 34464u,
        
        TextureBufferOffset = 37277u,
    }
    
    public enum GetTexLevelParameterivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture2d = 3553u,
        
        Texture3d = 32879u,
        
        Texture1dArray = 35864u,
        
        Texture2dArray = 35866u,
        
        TextureRectangle = 34037u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        ProxyTexture1d = 32867u,
        
        ProxyTexture2d = 32868u,
        
        ProxyTexture3d = 32880u,
        
        ProxyTexture1dArray = 35865u,
        
        ProxyTexture2dArray = 35867u,
        
        ProxyTextureRectangle = 34039u,
        
        ProxyTexture2dMultisample = 37121u,
        
        ProxyTexture2dMultisampleArray = 37123u,
        
        ProxyTextureCubeMap = 34075u,
        
        TextureBuffer = 35882u,
    }
    
    public enum GetTexLevelParameterivPname : uint
    {
        
        TextureWidth = 4096u,
        
        TextureHeight = 4097u,
        
        TextureDepth = 32881u,
        
        TextureInternalFormat = 4099u,
        
        TextureRedSize = 32860u,
        
        TextureGreenSize = 32861u,
        
        TextureBlueSize = 32862u,
        
        TextureAlphaSize = 32863u,
        
        TextureDepthSize = 34890u,
        
        TextureCompressed = 34465u,
        
        TextureCompressedImageSize = 34464u,
        
        TextureBufferOffset = 37277u,
    }
    
    public enum GetTextureLevelParameterfvPname : uint
    {
        
        TextureWidth = 4096u,
        
        TextureHeight = 4097u,
        
        TextureDepth = 32881u,
        
        TextureInternalFormat = 4099u,
        
        TextureRedSize = 32860u,
        
        TextureGreenSize = 32861u,
        
        TextureBlueSize = 32862u,
        
        TextureAlphaSize = 32863u,
        
        TextureDepthSize = 34890u,
        
        TextureCompressed = 34465u,
        
        TextureCompressedImageSize = 34464u,
        
        TextureBufferOffset = 37277u,
    }
    
    public enum GetTextureLevelParameterivPname : uint
    {
        
        TextureWidth = 4096u,
        
        TextureHeight = 4097u,
        
        TextureDepth = 32881u,
        
        TextureInternalFormat = 4099u,
        
        TextureRedSize = 32860u,
        
        TextureGreenSize = 32861u,
        
        TextureBlueSize = 32862u,
        
        TextureAlphaSize = 32863u,
        
        TextureDepthSize = 34890u,
        
        TextureCompressed = 34465u,
        
        TextureCompressedImageSize = 34464u,
        
        TextureBufferOffset = 37277u,
    }
    
    public enum GetTexParameterfvTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetTexParameterfvPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTexParameterivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetTexParameterivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTexParameterIivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetTexParameterIivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTexParameterIuivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMapArray = 36873u,
    }
    
    public enum GetTexParameterIuivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTextureParameterfvPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTextureParameterivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTextureParameterIivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTextureParameterIuivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        ImageFormatCompatibilityType = 37063u,
        
        TextureBaseLevel = 33084u,
        
        TextureBorderColor = 4100u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
        
        TextureImmutableFormat = 37167u,
        
        TextureImmutableLevels = 33503u,
        
        TextureLodBias = 34049u,
        
        TextureMagFilter = 10240u,
        
        TextureMaxLevel = 33085u,
        
        TextureMaxLod = 33083u,
        
        TextureMinFilter = 10241u,
        
        TextureMinLod = 33082u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureSwizzleRgba = 36422u,
        
        TextureTarget = 4102u,
        
        TextureViewMinLayer = 33501u,
        
        TextureViewMinLevel = 33499u,
        
        TextureViewNumLayers = 33502u,
        
        TextureViewNumLevels = 33500u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
    }
    
    public enum GetTextureSubImageFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum GetTextureSubImageType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum GetTransformFeedbackivPname : uint
    {
        
        TransformFeedbackBufferBinding = 35983u,
        
        TransformFeedbackBufferStart = 35972u,
        
        TransformFeedbackBufferSize = 35973u,
        
        TransformFeedbackPaused = 36387u,
        
        TransformFeedbackActive = 36388u,
    }
    
    public enum GetTransformFeedbacki_vPname : uint
    {
        
        TransformFeedbackBufferBinding = 35983u,
        
        TransformFeedbackBufferStart = 35972u,
        
        TransformFeedbackBufferSize = 35973u,
        
        TransformFeedbackPaused = 36387u,
        
        TransformFeedbackActive = 36388u,
    }
    
    public enum GetTransformFeedbacki64_vPname : uint
    {
        
        TransformFeedbackBufferBinding = 35983u,
        
        TransformFeedbackBufferStart = 35972u,
        
        TransformFeedbackBufferSize = 35973u,
        
        TransformFeedbackPaused = 36387u,
        
        TransformFeedbackActive = 36388u,
    }
    
    public enum GetUniformSubroutineuivShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum GetVertexArrayIndexed64ivPname : uint
    {
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayLong = 34638u,
        
        VertexAttribArrayDivisor = 35070u,
        
        VertexAttribRelativeOffset = 33493u,
        
        VertexBindingOffset = 33495u,
    }
    
    public enum GetVertexArrayIndexedivPname : uint
    {
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayLong = 34638u,
        
        VertexAttribArrayDivisor = 35070u,
        
        VertexAttribRelativeOffset = 33493u,
        
        VertexBindingOffset = 33495u,
    }
    
    public enum GetVertexArrayivPname : uint
    {
        
        ElementArrayBufferBinding = 34965u,
    }
    
    public enum GetVertexAttribdvPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribfvPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribivPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribIivPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribIuivPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribLdvPname : uint
    {
        
        VertexAttribArrayBufferBinding = 34975u,
        
        VertexAttribArrayEnabled = 34338u,
        
        VertexAttribArraySize = 34339u,
        
        VertexAttribArrayStride = 34340u,
        
        VertexAttribArrayType = 34341u,
        
        VertexAttribArrayNormalized = 34922u,
        
        VertexAttribArrayInteger = 35069u,
        
        VertexAttribArrayDivisor = 35070u,
        
        CurrentVertexAttrib = 34342u,
    }
    
    public enum GetVertexAttribPointervPname : uint
    {
        
        VertexAttribArrayPointer = 34373u,
    }
    
    public enum HintTarget : uint
    {
        
        LineSmoothHint = 3154u,
        
        PolygonSmoothHint = 3155u,
        
        TextureCompressionHint = 34031u,
        
        FragmentShaderDerivativeHint = 35723u,
    }
    
    public enum HintMode : uint
    {
        
        Fastest = 4353u,
        
        Nicest = 4354u,
        
        DontCare = 4352u,
    }
    
    public enum LogicOpOpcode : uint
    {
        
        Clear = 5376u,
        
        Set = 5391u,
        
        Copy = 5379u,
        
        CopyInverted = 5388u,
        
        Noop = 5381u,
        
        Invert = 5386u,
        
        And = 5377u,
        
        Nand = 5390u,
        
        Or = 5383u,
        
        Nor = 5384u,
        
        Xor = 5382u,
        
        Equiv = 5385u,
        
        AndReverse = 5378u,
        
        AndInverted = 5380u,
        
        OrReverse = 5387u,
        
        OrInverted = 5389u,
    }
    
    public enum MapBufferAccess : uint
    {
        
        ReadOnly = 35000u,
        
        WriteOnly = 35001u,
        
        ReadWrite = 35002u,
    }
    
    public enum MapNamedBufferAccess : uint
    {
        
        ReadOnly = 35000u,
        
        WriteOnly = 35001u,
        
        ReadWrite = 35002u,
    }
    
    [FlagsAttribute()]
    public enum MemoryBarrierBarriers : uint
    {
        
        VertexAttribArrayBarrierBit = 1u,
        
        ElementArrayBarrierBit = 2u,
        
        UniformBarrierBit = 4u,
        
        TextureFetchBarrierBit = 8u,
        
        ShaderImageAccessBarrierBit = 32u,
        
        CommandBarrierBit = 64u,
        
        PixelBufferBarrierBit = 128u,
        
        TextureUpdateBarrierBit = 256u,
        
        BufferUpdateBarrierBit = 512u,
        
        FramebufferBarrierBit = 1024u,
        
        TransformFeedbackBarrierBit = 2048u,
        
        AtomicCounterBarrierBit = 4096u,
        
        ShaderStorageBarrierBit = 8192u,
        
        AllBarrierBits = 4294967295u,
    }
    
    [FlagsAttribute()]
    public enum MemoryBarrierByRegionBarriers : uint
    {
        
        VertexAttribArrayBarrierBit = 1u,
        
        ElementArrayBarrierBit = 2u,
        
        UniformBarrierBit = 4u,
        
        TextureFetchBarrierBit = 8u,
        
        ShaderImageAccessBarrierBit = 32u,
        
        CommandBarrierBit = 64u,
        
        PixelBufferBarrierBit = 128u,
        
        TextureUpdateBarrierBit = 256u,
        
        BufferUpdateBarrierBit = 512u,
        
        FramebufferBarrierBit = 1024u,
        
        TransformFeedbackBarrierBit = 2048u,
        
        AtomicCounterBarrierBit = 4096u,
        
        ShaderStorageBarrierBit = 8192u,
        
        AllBarrierBits = 4294967295u,
    }
    
    public enum MultiDrawArraysMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum MultiDrawArraysIndirectMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum MultiDrawElementsMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum MultiDrawElementsType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum MultiDrawElementsBaseVertexMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum MultiDrawElementsBaseVertexType : uint
    {
        
        UnsignedByte = 5121u,
        
        UnsignedShort = 5123u,
        
        UnsignedInt = 5125u,
    }
    
    public enum MultiDrawElementsIndirectMode : uint
    {
        
        Points = 0u,
        
        LineStrip = 3u,
        
        LineLoop = 2u,
        
        Lines = 1u,
        
        LineStripAdjacency = 11u,
        
        LinesAdjacency = 10u,
        
        TriangleStrip = 5u,
        
        TriangleFan = 6u,
        
        Triangles = 4u,
        
        TriangleStripAdjacency = 13u,
        
        TrianglesAdjacency = 12u,
        
        Patches = 14u,
    }
    
    public enum MultiDrawElementsIndirectType : uint
    {
        
        ElementArrayBuffer = 34963u,
    }
    
    public enum PatchParameteriPname : uint
    {
        
        PatchVertices = 36466u,
        
        PatchDefaultOuterLevel = 36468u,
        
        PatchDefaultInnerLevel = 36467u,
    }
    
    public enum PatchParameterfvPname : uint
    {
        
        PatchVertices = 36466u,
        
        PatchDefaultOuterLevel = 36468u,
        
        PatchDefaultInnerLevel = 36467u,
    }
    
    public enum PixelStorefPname : uint
    {
        
        PackSwapBytes = 3328u,
        
        PackLsbFirst = 3329u,
        
        PackRowLength = 3330u,
        
        PackImageHeight = 32876u,
        
        PackSkipPixels = 3332u,
        
        PackSkipRows = 3331u,
        
        PackSkipImages = 32875u,
        
        PackAlignment = 3333u,
        
        UnpackSwapBytes = 3312u,
        
        UnpackLsbFirst = 3313u,
        
        UnpackRowLength = 3314u,
        
        UnpackImageHeight = 32878u,
        
        UnpackSkipPixels = 3316u,
        
        UnpackSkipRows = 3315u,
        
        UnpackSkipImages = 32877u,
        
        UnpackAlignment = 3317u,
    }
    
    public enum PixelStoreiPname : uint
    {
        
        PackSwapBytes = 3328u,
        
        PackLsbFirst = 3329u,
        
        PackRowLength = 3330u,
        
        PackImageHeight = 32876u,
        
        PackSkipPixels = 3332u,
        
        PackSkipRows = 3331u,
        
        PackSkipImages = 32875u,
        
        PackAlignment = 3333u,
        
        UnpackSwapBytes = 3312u,
        
        UnpackLsbFirst = 3313u,
        
        UnpackRowLength = 3314u,
        
        UnpackImageHeight = 32878u,
        
        UnpackSkipPixels = 3316u,
        
        UnpackSkipRows = 3315u,
        
        UnpackSkipImages = 32877u,
        
        UnpackAlignment = 3317u,
    }
    
    public enum PointParameterfPname : uint
    {
        
        PointFadeThresholdSize = 33064u,
        
        PointSpriteCoordOrigin = 36000u,
    }
    
    public enum PointParameteriPname : uint
    {
        
        PointFadeThresholdSize = 33064u,
        
        PointSpriteCoordOrigin = 36000u,
    }
    
    public enum PointParameterfvPname : uint
    {
        
        PointFadeThresholdSize = 33064u,
        
        PointSpriteCoordOrigin = 36000u,
    }
    
    public enum PointParameterivPname : uint
    {
        
        PointFadeThresholdSize = 33064u,
        
        PointSpriteCoordOrigin = 36000u,
    }
    
    public enum PolygonModeFace : uint
    {
        
        FrontAndBack = 1032u,
    }
    
    public enum PolygonModeMode : uint
    {
        
        Point = 6912u,
        
        Line = 6913u,
        
        Fill = 6914u,
    }
    
    public enum QueryCounterTarget : uint
    {
        
        Timestamp = 36392u,
    }
    
    public enum ReadBufferMode : uint
    {
        
        FrontLeft = 1024u,
        
        FrontRight = 1025u,
        
        BackLeft = 1026u,
        
        BackRight = 1027u,
        
        Front = 1028u,
        
        Back = 1029u,
        
        Left = 1030u,
        
        Right = 1031u,
    }
    
    public enum NamedFramebufferReadBufferMode : uint
    {
        
        FrontLeft = 1024u,
        
        FrontRight = 1025u,
        
        BackLeft = 1026u,
        
        BackRight = 1027u,
        
        Front = 1028u,
        
        Back = 1029u,
        
        Left = 1030u,
        
        Right = 1031u,
    }
    
    public enum ReadPixelsFormat : uint
    {
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
        
        Red = 6403u,
        
        Green = 6404u,
        
        Blue = 6405u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
    }
    
    public enum ReadPixelsType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt248 = 34042u,
        
        UnsignedInt10f11f11fRev = 35899u,
        
        UnsignedInt5999Rev = 35902u,
        
        Float32UnsignedInt248Rev = 36269u,
    }
    
    public enum ReadnPixelsFormat : uint
    {
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
        
        Red = 6403u,
        
        Green = 6404u,
        
        Blue = 6405u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
    }
    
    public enum ReadnPixelsType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt248 = 34042u,
        
        UnsignedInt10f11f11fRev = 35899u,
        
        UnsignedInt5999Rev = 35902u,
        
        Float32UnsignedInt248Rev = 36269u,
    }
    
    public enum RenderbufferStorageTarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum RenderbufferStorageMultisampleTarget : uint
    {
        
        Renderbuffer = 36161u,
    }
    
    public enum SamplerParameterfPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum SamplerParameteriPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum SamplerParameterfvPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum SamplerParameterivPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum SamplerParameterIivPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum SamplerParameterIuivPname : uint
    {
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureBorderColor = 4100u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureLodBias = 34049u,
        
        TextureCompareMode = 34892u,
        
        TextureCompareFunc = 34893u,
    }
    
    public enum StencilFuncFunc : uint
    {
        
        Never = 512u,
        
        Less = 513u,
        
        Lequal = 515u,
        
        Greater = 516u,
        
        Gequal = 518u,
        
        Equal = 514u,
        
        Notequal = 517u,
        
        Always = 519u,
    }
    
    public enum StencilFuncSeparateFace : uint
    {
        
        Front = 1028u,
        
        Back = 1029u,
        
        FrontAndBack = 1032u,
    }
    
    public enum StencilFuncSeparateFunc : uint
    {
        
        Never = 512u,
        
        Less = 513u,
        
        Lequal = 515u,
        
        Greater = 516u,
        
        Gequal = 518u,
        
        Equal = 514u,
        
        Notequal = 517u,
        
        Always = 519u,
    }
    
    public enum StencilMaskSeparateFace : uint
    {
        
        Front = 1028u,
        
        Back = 1029u,
        
        FrontAndBack = 1032u,
    }
    
    public enum StencilOpSfail : uint
    {
        
        Keep = 7680u,
        
        Zero = 0u,
        
        Replace = 7681u,
        
        Incr = 7682u,
        
        IncrWrap = 34055u,
        
        Decr = 7683u,
        
        DecrWrap = 34056u,
        
        Invert = 5386u,
    }
    
    public enum StencilOpDpfail : uint
    {
        
        Keep = 7680u,
    }
    
    public enum StencilOpDppass : uint
    {
        
        Keep = 7680u,
    }
    
    public enum StencilOpSeparateFace : uint
    {
        
        Front = 1028u,
        
        Back = 1029u,
        
        FrontAndBack = 1032u,
    }
    
    public enum StencilOpSeparateSfail : uint
    {
        
        Keep = 7680u,
        
        Zero = 0u,
        
        Replace = 7681u,
        
        Incr = 7682u,
        
        IncrWrap = 34055u,
        
        Decr = 7683u,
        
        DecrWrap = 34056u,
        
        Invert = 5386u,
    }
    
    public enum StencilOpSeparateDpfail : uint
    {
        
        Keep = 7680u,
    }
    
    public enum StencilOpSeparateDppass : uint
    {
        
        Keep = 7680u,
    }
    
    public enum TexBufferTarget : uint
    {
        
        TextureBuffer = 35882u,
    }
    
    public enum TexBufferRangeTarget : uint
    {
        
        TextureBuffer = 35882u,
    }
    
    public enum TexImage1DTarget : uint
    {
        
        Texture1d = 3552u,
        
        ProxyTexture1d = 32867u,
    }
    
    public enum TexImage1DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        BgrInteger = 36250u,
        
        RgbaInteger = 36249u,
        
        BgraInteger = 36251u,
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
    }
    
    public enum TexImage1DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TexImage2DTarget : uint
    {
        
        Texture2d = 3553u,
        
        ProxyTexture2d = 32868u,
        
        Texture1dArray = 35864u,
        
        ProxyTexture1dArray = 35865u,
        
        TextureRectangle = 34037u,
        
        ProxyTextureRectangle = 34039u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        ProxyTextureCubeMap = 34075u,
    }
    
    public enum TexImage2DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        BgrInteger = 36250u,
        
        RgbaInteger = 36249u,
        
        BgraInteger = 36251u,
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
    }
    
    public enum TexImage2DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TexImage2DMultisampleTarget : uint
    {
        
        Texture2dMultisample = 37120u,
        
        ProxyTexture2dMultisample = 37121u,
    }
    
    public enum TexImage3DTarget : uint
    {
        
        Texture3d = 32879u,
        
        ProxyTexture3d = 32880u,
        
        Texture2dArray = 35866u,
        
        ProxyTexture2dArray = 35867u,
    }
    
    public enum TexImage3DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        RedInteger = 36244u,
        
        RgInteger = 33320u,
        
        RgbInteger = 36248u,
        
        BgrInteger = 36250u,
        
        RgbaInteger = 36249u,
        
        BgraInteger = 36251u,
        
        StencilIndex = 6401u,
        
        DepthComponent = 6402u,
        
        DepthStencil = 34041u,
    }
    
    public enum TexImage3DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TexImage3DMultisampleTarget : uint
    {
        
        Texture2dMultisampleArray = 37122u,
        
        ProxyTexture2dMultisampleArray = 37123u,
    }
    
    public enum TexParameterfTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameterfPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexParameteriTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameteriPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameterfPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameteriPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexParameterfvTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameterfvPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexParameterivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameterivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexParameterIivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameterIivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexParameterIuivTarget : uint
    {
        
        Texture1d = 3552u,
        
        Texture1dArray = 35864u,
        
        Texture2d = 3553u,
        
        Texture2dArray = 35866u,
        
        Texture2dMultisample = 37120u,
        
        Texture2dMultisampleArray = 37122u,
        
        Texture3d = 32879u,
        
        TextureCubeMap = 34067u,
        
        TextureCubeMapArray = 36873u,
        
        TextureRectangle = 34037u,
    }
    
    public enum TexParameterIuivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameterfvPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameterivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameterIivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TextureParameterIuivPname : uint
    {
        
        DepthStencilTextureMode = 37098u,
        
        TextureBaseLevel = 33084u,
        
        TextureCompareFunc = 34893u,
        
        TextureCompareMode = 34892u,
        
        TextureLodBias = 34049u,
        
        TextureMinFilter = 10241u,
        
        TextureMagFilter = 10240u,
        
        TextureMinLod = 33082u,
        
        TextureMaxLod = 33083u,
        
        TextureMaxLevel = 33085u,
        
        TextureSwizzleR = 36418u,
        
        TextureSwizzleG = 36419u,
        
        TextureSwizzleB = 36420u,
        
        TextureSwizzleA = 36421u,
        
        TextureWrapS = 10242u,
        
        TextureWrapT = 10243u,
        
        TextureWrapR = 32882u,
        
        TextureBorderColor = 4100u,
        
        TextureSwizzleRgba = 36422u,
    }
    
    public enum TexStorage1DTarget : uint
    {
        
        Texture1d = 3552u,
        
        ProxyTexture1d = 32867u,
    }
    
    public enum TexStorage2DTarget : uint
    {
        
        Texture2d = 3553u,
        
        Texture1dArray = 35864u,
        
        TextureRectangle = 34037u,
        
        TextureCubeMap = 34067u,
        
        ProxyTexture2d = 32868u,
        
        ProxyTexture1dArray = 35865u,
        
        ProxyTextureRectangle = 34039u,
        
        ProxyTextureCubeMap = 34075u,
    }
    
    public enum TexStorage2DMultisampleTarget : uint
    {
        
        Texture2dMultisample = 37120u,
        
        ProxyTexture2dMultisample = 37121u,
    }
    
    public enum TexStorage3DTarget : uint
    {
        
        Texture3d = 32879u,
        
        Texture2dArray = 35866u,
        
        TextureCubeMapArray = 36873u,
        
        ProxyTexture3d = 32880u,
        
        ProxyTexture2dArray = 35867u,
        
        ProxyTextureCubeMapArray = 36875u,
    }
    
    public enum TexStorage3DMultisampleTarget : uint
    {
        
        Texture2dMultisampleArray = 37122u,
        
        ProxyTexture2dMultisampleArray = 37123u,
    }
    
    public enum TexSubImage1DTarget : uint
    {
        
        Texture1d = 3552u,
    }
    
    public enum TexSubImage1DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TexSubImage1DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TextureSubImage1DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TextureSubImage1DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TexSubImage2DTarget : uint
    {
        
        Texture2d = 3553u,
        
        TextureCubeMapPositiveX = 34069u,
        
        TextureCubeMapNegativeX = 34070u,
        
        TextureCubeMapPositiveY = 34071u,
        
        TextureCubeMapNegativeY = 34072u,
        
        TextureCubeMapPositiveZ = 34073u,
        
        TextureCubeMapNegativeZ = 34074u,
        
        Texture1dArray = 35864u,
    }
    
    public enum TexSubImage2DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TexSubImage2DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TextureSubImage2DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        Bgra = 32993u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TextureSubImage2DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TexSubImage3DTarget : uint
    {
        
        Texture3d = 32879u,
        
        Texture2dArray = 35866u,
    }
    
    public enum TexSubImage3DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TexSubImage3DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TextureSubImage3DFormat : uint
    {
        
        Red = 6403u,
        
        Rg = 33319u,
        
        Rgb = 6407u,
        
        Bgr = 32992u,
        
        Rgba = 6408u,
        
        DepthComponent = 6402u,
        
        StencilIndex = 6401u,
    }
    
    public enum TextureSubImage3DType : uint
    {
        
        UnsignedByte = 5121u,
        
        Byte = 5120u,
        
        UnsignedShort = 5123u,
        
        Short = 5122u,
        
        UnsignedInt = 5125u,
        
        Int = 5124u,
        
        Float = 5126u,
        
        UnsignedByte332 = 32818u,
        
        UnsignedByte233Rev = 33634u,
        
        UnsignedShort565 = 33635u,
        
        UnsignedShort565Rev = 33636u,
        
        UnsignedShort4444 = 32819u,
        
        UnsignedShort4444Rev = 33637u,
        
        UnsignedShort5551 = 32820u,
        
        UnsignedShort1555Rev = 33638u,
        
        UnsignedInt8888 = 32821u,
        
        UnsignedInt8888Rev = 33639u,
        
        UnsignedInt1010102 = 32822u,
        
        UnsignedInt2101010Rev = 33640u,
    }
    
    public enum TransformFeedbackVaryingsBufferMode : uint
    {
        
        InterleavedAttribs = 35980u,
        
        SeparateAttribs = 35981u,
    }
    
    public enum UniformSubroutinesuivShadertype : uint
    {
        
        VertexShader = 35633u,
        
        TessControlShader = 36488u,
        
        TessEvaluationShader = 36487u,
        
        GeometryShader = 36313u,
        
        FragmentShader = 35632u,
    }
    
    public enum VertexAttribP1uiType : uint
    {
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribP2uiType : uint
    {
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribP3uiType : uint
    {
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribP4uiType : uint
    {
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribPointerType : uint
    {
        
        Byte = 5120u,
        
        UnsignedByte = 5121u,
        
        Short = 5122u,
        
        UnsignedShort = 5123u,
        
        Int = 5124u,
        
        UnsignedInt = 5125u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        Double = 5130u,
        
        Fixed = 5132u,
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribIPointerType : uint
    {
        
        Byte = 5120u,
        
        UnsignedByte = 5121u,
        
        Short = 5122u,
        
        UnsignedShort = 5123u,
        
        Int = 5124u,
        
        UnsignedInt = 5125u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        Double = 5130u,
        
        Fixed = 5132u,
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
    
    public enum VertexAttribLPointerType : uint
    {
        
        Byte = 5120u,
        
        UnsignedByte = 5121u,
        
        Short = 5122u,
        
        UnsignedShort = 5123u,
        
        Int = 5124u,
        
        UnsignedInt = 5125u,
        
        HalfFloat = 5131u,
        
        Float = 5126u,
        
        Double = 5130u,
        
        Fixed = 5132u,
        
        Int2101010Rev = 36255u,
        
        UnsignedInt2101010Rev = 33640u,
        
        UnsignedInt10f11f11fRev = 35899u,
    }
}
